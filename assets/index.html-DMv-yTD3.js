import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as i,o as n}from"./app-BiQR_lPj.js";const t={};function l(r,s){return n(),a("div",null,s[0]||(s[0]=[i(`<h1 id="goaccess轻量nginx日志分析工具" tabindex="-1"><a class="header-anchor" href="#goaccess轻量nginx日志分析工具"><span>GoAccess轻量nginx日志分析工具</span></a></h1><h2 id="什么是goaccess" tabindex="-1"><a class="header-anchor" href="#什么是goaccess"><span>什么是GoAccess</span></a></h2><p>GoAccess 是一款开源、实时，运行在命令行终端下的 Web 日志分析工具。</p><p>该工具提供快速、多样的 HTTP 状态统计。</p><p>分析结果，可以通过 XShell 等客户端工具查看，并且可以生成 Html 报告。</p><p>GitHub 地址：https://github.com/allinurl/goaccess</p><p>官网地址：http://goaccess.io/</p><h2 id="安装goaccess" tabindex="-1"><a class="header-anchor" href="#安装goaccess"><span>安装GoAccess</span></a></h2><p>测试环境， centos7</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>#  yum -y install glib2 glib2-devel ncurses ncurses-devel GeoIP GeoIP-devel</span></span>
<span class="line"><span>#  wget http://tar.goaccess.io/goaccess-1.2.tar.gz</span></span>
<span class="line"><span>#  tar -xzvf goaccess-1.2.tar.gz</span></span>
<span class="line"><span>#  cd goaccess-1.2/</span></span>
<span class="line"><span>#  ./configure --enable-geoip --enable-utf8</span></span>
<span class="line"><span>#  make &amp;&amp; make install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认配置文件在</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>vi /usr/local/etc/goaccess.conf</span></span>
<span class="line"><span></span></span>
<span class="line"><span>time-format %H:%M:%S</span></span>
<span class="line"><span>date-format %d/%b/%Y</span></span>
<span class="line"><span>log-format</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://imgoss.xgss.net/picgo/GoAccess-install2.jpg?aliyun" alt="GoAccess-install2"></p><p>接下来我们测试一下。现在就需要根据nginx的日志格式来写goaccess的规则</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>goaccess  -f /usr/local/nginx/logs/access.log -a &gt; /root/test/report.html</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="https://imgoss.xgss.net/picgo/GoAccess.png?aliyun" alt="GoAccess"></p><p>网络上大部分的文章和介绍都只适合没任何修改的nginx日志格式，对自定义的log format都不怎么涉及。如果你采用的自定义的nginx日志格式，那么此处就需要特别注意，一旦log-format配置不对，goaccess分析的结果会差很大。</p><p>以我nginx日志格式为例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>log_format main      &#39;$server_name $remote_addr - $remote_user [$time_local] &quot;$request&quot; $status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; $upstream_addr $request_time $upstream_response_time;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>按照goaccess预设的log format，这样的日志是没法分析的，所以我们需要自定义log format。 我的log format为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>log-format %^ %h %^ %^ [%d:%t %^] “%r” %s %b “%R” “%u” “%^” %^ %T %^</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>$server_name  			---&gt; 	%h  		---&gt;	主机(客户端IP地址,IPv4和IPv6)</span></span>
<span class="line"><span>[$time_local] 			---&gt; 	[%d:%t %^] 	---&gt;	时间	</span></span>
<span class="line"><span>$request				---&gt;	&quot;%r&quot;			---&gt;    客户机的请求,这需要具体分隔符在请求(单引号、双引号或其他)解析。如果没有,我们必须使用特殊的格式说明符的组合%m %U %H。</span></span>
<span class="line"><span>$status					---&gt;	%s			---&gt;	发送客户端的状态码</span></span>
<span class="line"><span>$body_bytes_sent		---&gt;	%b			---&gt;	给客户端返回大小</span></span>
<span class="line"><span>$http_referer			---&gt;	%R			---&gt;	“Referrer”HTTP请求头</span></span>
<span class="line"><span>$http_user_agent		---&gt;	&quot;%u&quot;		---&gt;	UA</span></span>
<span class="line"><span>$http_x_forwarded_for	---&gt;	</span></span>
<span class="line"><span>$request_time			---&gt;	%T			---&gt;	服务请求的时间,以秒或毫秒。注意:%D将优先于%T如果都使用。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了设置正确的log format，踩了不少坑，先列出来避免大家重复碰到。 （1） log format默认是按照空格分隔日志信息的，所以，对于包含了特殊字符如空格等信息的字段，必须包含在“”里面。如字段request http_user_agent等 （2） nginx日志格式里面，采用空格分隔，但是此处一定注意，只能用一个空格。当时我有个地方用了两个空格，直接导致goaccess结果出错。 （3） nginx日志中的每一个字段都要和log format中的一一对应，如果log format中不需要nginx中的某一个信息，则用%^跳过该信息。 （4） 对于nginx日志中的每一个 - log format都需要一个%^来跳过， 如果是“-”， 则用“%^” （5） 如果nginx日志信息中有：， 则需要在log format中也显示出来。例如nginx日志中$time_local就包含了：，所以在log format的相应位置也是 [%d:%t %^]</p><p>希望这些能帮助使用goaccess的朋友。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>goaccess -f log [-c][-r][-m][-h][-q][-d][-g][-a][-o csv|json][-e IP_ADDRESS][...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="自定义参数及其对应nginx的accesslog中的fromat" tabindex="-1"><a class="header-anchor" href="#自定义参数及其对应nginx的accesslog中的fromat"><span>自定义参数及其对应nginx的accesslog中的fromat</span></a></h2><p>%x 匹配替代time_format和date_format的设定，可以同时调用两个的全局设置（时间戳） %t 匹配替代 time-format 的设置<br> %d 匹配替代 date-forma 的设置 %h 客户端ip $remote_addr %r 请求方法 $request<br> %m 请求算法 相当于$request中的 post或get的匹配<br> %U 请求的URL路径(包括任何查询字符串) 相当于$request中的 URL匹配 %H 请求的协议 相当于$request中的 HTTP/1.1 %s 服务端返回客户端的状态code $status %b 返回客户端的body size $body_bytes_sent %R refer $http_referer<br> %u user-agent $http_user_agent<br> %D 服务请求的时间，以微秒为单位 $request_time %T 服务请求的时间，以秒为单位 $request_time %L 服务请求的时间，以毫秒为单位 $request_time %^ 忽略官方没有对应参数的区域</p><p>以上是官方给出的所有匹配参数，原版见</p><p>http://www.goaccess.io/man</p><p>以下是我自定义的nginx日志格式：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>log_format  main_zdy  &#39;$request_time - IP:$remote_addr - RealIP:$http_x_forwarded_for - [$time_local] $request - $status - $http_user_agent - $host - from:$http_referer&#39;;</span></span>
<span class="line"><span>记录日志：</span></span>
<span class="line"><span>0.000 - IP:3.3.3.3 - RealIP:1.1.1.1, 2.2.2.2 - [28/Jul/2017:16:04:15 +0800] POST /site/index.html HTTP/1.1 - 200 - Apache-HttpClient/UNAVAILABLE (java 1.4) - www.111111111.com - from:http://www.111111111.com</span></span>
<span class="line"><span>0.216 - IP:4.4.4.4 - RealIP:5.5.5.5, 6.6.6.6 - [28/Jul/2017:15:53:04 +0800] GET /client/serverlist?jsonpCallback=jQuery18206177038959697163_1501228347875&amp;gid=163&amp;wid=196&amp;_=1501228353156 HTTP/1.1 - 200 - Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727) - www.111111111.com - from:http://www.1111111111111.com/</span></span>
<span class="line"><span></span></span>
<span class="line"><span>goaccess的格式：</span></span>
<span class="line"><span>log-format %T %^ IP:%^ %^ RealIP:~h{,&quot; } %^ [%d:%t %^] %m %U %H %^ %s %^ %u %^ %^ %^ from:%R</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>%x 一个匹配时间格式的日期和时间字段和日期格式变量。这是时使用时间戳是给定的日期和时间而不是在两个独立的变量。 %t time字段匹配时间格式的变量。 %d date字段匹配日期格式的变量。 %v The服务器名称根据规范名称设置块(服务器或虚拟主机)。 %e 用户标识的人请求文档由HTTP身份验证。 %h host(客户端IP地址,IPv4和IPv6) %r 请求从客户端。这需要在请求特定的分隔符(单引号、双引号等)解析。否则,结合使用等特殊格式说明符%m %U %q 和 %H解析单个字段。注意:使用 %r 得到完整的请求或 %m %U %q 和 %H形成你的请求,不同时使用。请求方法让</p><p>%m 请求的方法。 %U 请求URL路径。注意:如果查询字符串在%U,没有必要使用%q。然而,如果URL路径,不包括任何查询字符串,可以使用%q和查询字符串将被附加到请求。</p><p>%q 查询字符串。</p><p>%H 请求协议。 %s 服务器发送给客户机的状态代码。 %b 服务器发送发送给客户端的大小。 %R 来源 %u 用户代理HTTP请求头。 %D 服务请求的时间，以微秒为单位 $request_time %T 服务请求的时间，以秒为单位 $request_time %L 服务请求的时间，以毫秒为单位作为一个十进制数。 %^ 忽略这个领域。 %~ 前进通过日志字符串直到找到(!isspace)字符进行技术改造。 ~h 主机(客户端IP地址,IPv4和IPv6)在X-Forwarded-For(XFF)领域。</p><p>For XFF, GoAccess uses a special specifier which consists of a tilde before the host specifier, followed by the character(s) that delimit the XFF field, which are enclosed by curly braces (i.e., ~h{,&quot;}). For example, ~h{,&quot; } is used in order to parse &quot;11.25.11.53, 17.68.33.17&quot; field which is delimited by a double quote, a comma, and a space.</p><p>XFF,GoAccess使用特殊说明符由波浪号主机之前,紧随其后的是字符(s)划入XFF字段,由花括号封闭(即~ h { })。 例如,h ~ { }的使用是为了解析”11.25.11.53,17.68.33.17”字段由一个双引号分隔,逗号,和空间。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>goaccess  -f /www/logs/nginx.log  -a &gt; /data/wwwroot/web/test/report1.html</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>-f 指定nginx日志文件</span></span>
<span class="line"><span>-p 指定日志格式文件</span></span>
<span class="line"><span>-o 输出到指定html文件</span></span>
<span class="line"><span>--real-time-html 实时刷新</span></span>
<span class="line"><span>--ws-url 绑定一个域名</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生成html展示" tabindex="-1"><a class="header-anchor" href="#生成html展示"><span>生成HTML展示</span></a></h2><p>将生成的文件用web服务器展示在浏览器上</p><p>goaccess -f /root/www.7477.com-access1000.log -a &gt; /data/wwwroot/web/zabbix/1111/reporta1.html</p><p>goaccess -f /root/test.log -a &gt; /data/wwwroot/web/zabbix/1111/reporta6.html</p><p>goaccess -f /root/www.7477.com-access181.log -a &gt; /data/wwwroot/web/zabbix/1111/report.html goaccess -f /root/www.7477.com-access1000.log -a &gt; /data/wwwroot/web/zabbix/1111/report1.html</p><p>goaccess -f /root/www.funet8.com-access.log -a &gt; /data/wwwroot/web/zabbix/1111/funet1.html</p><p>goaccess -f /root/1000.log -a &gt; /data/wwwroot/web/test/report1.html</p>`,45)]))}const o=e(t,[["render",l]]),d=JSON.parse('{"path":"/article/i9khi9ho/","title":"GoAccess轻量nginx日志分析工具","lang":"en-US","frontmatter":{"title":"GoAccess轻量nginx日志分析工具","createTime":"2025/05/27 17:51:17","permalink":"/article/i9khi9ho/"},"git":{"createdTime":1749111496000,"updatedTime":1750129445000,"contributors":[{"name":"star","username":"star","email":"star@xgss.net","commits":2,"url":"https://github.com/star"}]},"readingTime":{"minutes":5.94,"words":1781},"filePathRelative":"linux-basis/GoAccess轻量nginx日志分析工具.md"}');export{o as comp,d as data};
