import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as t}from"./app-BiQR_lPj.js";const l={};function e(h,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="网络协议基础-http-和-https-协议" tabindex="-1"><a class="header-anchor" href="#网络协议基础-http-和-https-协议"><span>网络协议基础：HTTP 和 HTTPS 协议</span></a></h1><h2 id="_1️⃣-前言" tabindex="-1"><a class="header-anchor" href="#_1️⃣-前言"><span>1️⃣ 前言</span></a></h2><p>在互联网世界中，数据的传输离不开各种网络协议的支撑，其中 HTTP 和 HTTPS 协议是我们日常上网过程中接触最为频繁的两种应用层协议。它们如同数据在网络中穿梭的 “交通规则”，决定了数据如何在客户端（如浏览器）和服务器之间传递。深入了解这两种协议的本质、工作原理及差异，不仅能帮助我们更好地理解网络通信的底层逻辑，还能在实际的网络应用开发、网站维护以及个人信息安全保护中发挥重要作用。</p><h2 id="_2️⃣-http-协议概述" tabindex="-1"><a class="header-anchor" href="#_2️⃣-http-协议概述"><span>2️⃣ HTTP 协议概述</span></a></h2><h3 id="_2-1-定义" tabindex="-1"><a class="header-anchor" href="#_2-1-定义"><span>2.1 定义</span></a></h3><p>HTTP，即超文本传输协议（HyperText Transfer Protocol），是一种用于分布式、协作式和超媒体信息系统的应用层协议。它最初由蒂姆・伯纳斯 - 李（Tim Berners-Lee）于 1989 年在欧洲核子研究组织（CERN）提出，目的是为了实现不同计算机之间超文本（如 HTML 文档）的高效传输。经过多年的发展，HTTP 协议已经从最初的 1.0 版本迭代到了如今广泛使用的 1.1 版本，以及更高效的 2.0 和 3.0 版本，每一次版本更新都在性能、安全性和功能上进行了优化。</p><h3 id="_2-2-特点" tabindex="-1"><a class="header-anchor" href="#_2-2-特点"><span>2.2 特点</span></a></h3><ul><li><strong>无状态</strong>：每次请求独立，服务器不会自动记住之前的交互。</li><li><strong>明文传输</strong>：数据未加密，容易被窃听或篡改。</li><li><strong>基于 TCP</strong>：默认使用 80 端口。</li><li><strong>请求-响应模式</strong>：客户端发起请求，服务器返回响应。</li></ul><h3 id="_2-3-工作流程" tabindex="-1"><a class="header-anchor" href="#_2-3-工作流程"><span>2.3 工作流程</span></a></h3><ol><li>客户端发起 TCP 连接（3 次握手）。</li><li>客户端发送 HTTP 请求报文。</li><li>服务器处理请求并返回 HTTP 响应报文。</li><li>关闭连接或保持长连接（HTTP/1.1 默认 Keep-Alive）。</li></ol><hr><h2 id="_3️⃣-https-协议概述" tabindex="-1"><a class="header-anchor" href="#_3️⃣-https-协议概述"><span>3️⃣ HTTPS 协议概述</span></a></h2><h3 id="_3-1-定义" tabindex="-1"><a class="header-anchor" href="#_3-1-定义"><span>3.1 定义</span></a></h3><p>HTTPS，即超文本传输安全协议（HyperText Transfer Protocol Secure），是在 HTTP 协议的基础上加入了 SSL（Secure Sockets Layer，安全套接层）或 TLS（Transport Layer Security，传输层安全）协议形成的一种安全的应用层协议。随着互联网的快速发展，网络安全问题日益突出，HTTP 协议明文传输的缺陷使得用户的敏感信息面临着严重的安全威胁。为了解决 HTTP 协议的安全问题，网景公司（Netscape）于 1994 年推出了 SSL 协议，随后在 SSL 协议的基础上发展出了 TLS 协议。HTTPS 协议通过使用 SSL/TLS 协议对 HTTP 请求和响应的数据进行加密处理，从而保证了数据在传输过程中的机密性、完整性和身份认证性。</p><h3 id="_3-2-特点" tabindex="-1"><a class="header-anchor" href="#_3-2-特点"><span>3.2 特点</span></a></h3><ul><li><strong>加密传输</strong>：防止数据被窃听（对称加密 + 非对称加密结合）。</li><li><strong>身份验证</strong>：通过数字证书（CA）验证服务器身份，防止中间人攻击。</li><li><strong>数据完整性</strong>：防止数据在传输过程中被篡改。</li><li><strong>性能开销</strong>：加密解密会增加 CPU 负载，但 HTTP/2、TLS 1.3 已显著优化。</li></ul><h3 id="_3-3-工作流程-简化版" tabindex="-1"><a class="header-anchor" href="#_3-3-工作流程-简化版"><span>3.3 工作流程（简化版）</span></a></h3><ol><li><p><strong>TCP 握手</strong>（与 HTTP 相同）。</p></li><li><p>TLS 握手</p><p>：</p><ul><li>客户端请求安全连接，发送支持的加密套件。</li><li>服务器返回数字证书和加密算法。</li><li>双方协商会话密钥。</li></ul></li><li><p><strong>加密通信</strong>：后续 HTTP 数据通过 TLS 加密传输。</p></li></ol><hr><h2 id="_4️⃣-http-与-https-对比" tabindex="-1"><a class="header-anchor" href="#_4️⃣-http-与-https-对比"><span>4️⃣ HTTP 与 HTTPS 对比</span></a></h2><table><thead><tr><th>对比项</th><th>HTTP</th><th>HTTPS</th></tr></thead><tbody><tr><td>端口</td><td>80</td><td>443</td></tr><tr><td>安全性</td><td>明文传输，易被窃听</td><td>加密传输，防窃听、防篡改</td></tr><tr><td>性能</td><td>无加密，速度快</td><td>加密解密有开销（已优化）</td></tr><tr><td>SEO 影响</td><td>无加成</td><td>搜索引擎更青睐 HTTPS</td></tr><tr><td>证书需求</td><td>不需要</td><td>需要 CA 颁发的数字证书</td></tr><tr><td>常见用途</td><td>内网测试、非敏感数据</td><td>电商、登录、支付、API 调用</td></tr></tbody></table><hr><h2 id="_5️⃣-为什么要全面迁移到-https" tabindex="-1"><a class="header-anchor" href="#_5️⃣-为什么要全面迁移到-https"><span>5️⃣ 为什么要全面迁移到 HTTPS</span></a></h2><ul><li><strong>安全合规</strong>：防止敏感数据泄露，满足 GDPR、PCI-DSS 等法规要求。</li><li><strong>用户信任</strong>：浏览器会对 HTTP 标记“不安全”。</li><li><strong>SEO 优势</strong>：Google 等搜索引擎将 HTTPS 作为排名因素。</li><li><strong>HTTP/2 支持</strong>：大多数浏览器仅在 HTTPS 下启用 HTTP/2，提升性能。</li></ul><hr><h2 id="_6️⃣-实战建议" tabindex="-1"><a class="header-anchor" href="#_6️⃣-实战建议"><span>6️⃣ 实战建议</span></a></h2><h3 id="_6-1-获取免费证书" tabindex="-1"><a class="header-anchor" href="#_6-1-获取免费证书"><span>6.1 获取免费证书</span></a></h3><ul><li><strong>Let’s Encrypt</strong>：免费、自动化更新，适合中小型网站。</li><li><strong>ZeroSSL</strong>：免费版支持 90 天证书。</li></ul><h3 id="_6-2-nginx-配置-https-示例" tabindex="-1"><a class="header-anchor" href="#_6-2-nginx-配置-https-示例"><span>6.2 Nginx 配置 HTTPS 示例</span></a></h3><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-nginx"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    listen </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">443</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ssl;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server_name </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">example.com;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    ssl_certificate </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/etc/ssl/certs/example.crt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    ssl_certificate_key </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/etc/ssl/private/example.key;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    ssl_protocols </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">TLSv1.2 TLSv1.3;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    ssl_ciphers </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">HIGH:!aNULL:!MD5;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    location</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> / {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        root </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/var/www/html;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        index </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">index.html;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># HTTP 自动跳转到 HTTPS</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    listen </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    server_name </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">example.com;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 301</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> https://$</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">request_uri</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-性能优化" tabindex="-1"><a class="header-anchor" href="#_6-3-性能优化"><span>6.3 性能优化</span></a></h3><ul><li>启用 <strong>HTTP/2</strong> 或 <strong>HTTP/3</strong>。</li><li>使用 <strong>OCSP Stapling</strong> 加快证书验证。</li><li>开启 <strong>TLS 会话复用</strong> 减少握手延迟。</li></ul><h2 id="_7️⃣-应用场景" tabindex="-1"><a class="header-anchor" href="#_7️⃣-应用场景"><span>7️⃣ 应用场景</span></a></h2><ul><li><p><strong>选择 HTTP 协议的场景</strong>：如果应用场景对数据安全性要求较低，仅需要展示静态的、不涉及用户敏感信息的内容，如普通的企业官网（仅展示公司介绍、产品信息等）、个人博客（仅发布文章内容）等，此时可以选择使用 HTTP 协议。使用 HTTP 协议可以减少服务器的性能开销，提高数据传输速度，降低网站的部署成本（无需购买和维护数字证书）。</p></li><li><p><strong>选择 HTTPS 协议的场景</strong>：如果应用场景涉及用户敏感信息的传输和处理，如用户登录（需要输入用户名和密码）、在线支付（需要输入银行卡号、支付密码等）、用户注册（需要填写手机号、身份证号等）、社交媒体（需要传输用户的聊天记录、个人隐私信息等）等，此时必须选择使用 HTTPS 协议。使用 HTTPS 协议可以有效保护用户的敏感信息不被泄露和篡改，防止 “中间人攻击”，增强用户对网站的信任度。此外，目前主流的搜索引擎（如 Google、百度等）也更倾向于收录使用 HTTPS 协议的网站，并且会给予其更高的搜索排名；一些现代的浏览器（如 Chrome、Firefox 等）也会对使用 HTTP 协议的网站进行 “不安全” 提示，影响用户体验和网站的形象。因此，即使是一些原本使用 HTTP 协议的网站，为了提升安全性、用户体验和搜索引擎排名，也在逐步迁移到 HTTPS 协议。</p></li></ul><hr><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>HTTP 协议作为互联网数据传输的 “基石”，凭借其简单易用、可扩展性强的特点，在互联网的发展过程中发挥了重要作用。然而，随着网络安全问题的日益凸显，HTTP 协议明文传输、无身份认证的缺陷使其无法满足对安全性要求较高的应用场景。</p><p>HTTPS 协议在 HTTP 协议的基础上引入了 SSL/TLS 协议，通过数据加密、身份认证和数据完整性校验等机制，为网络通信提供了可靠的安全保障，成为了当前网络安全通信的主流协议。</p>`,38)]))}const d=i(l,[["render",e]]),T=JSON.parse('{"path":"/%E6%99%BA%E7%BB%B4%E6%94%BB%E5%9F%8E%E7%8B%AE/S15/20.%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80-HTTP%E5%92%8CHTTPS%E5%8D%8F%E8%AE%AE.html","title":"网络协议基础：HTTP 和 HTTPS 协议","lang":"en-US","frontmatter":{},"git":{"createdTime":1760001321000,"updatedTime":1761640845000,"contributors":[{"name":"star","username":"star","email":"star@xgss.net","commits":2,"url":"https://github.com/star"}]},"readingTime":{"minutes":5.89,"words":1766},"filePathRelative":"智维攻城狮/S15/20.网络协议基础-HTTP和HTTPS协议.md"}');export{d as comp,T as data};
