import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as n}from"./app-BiQR_lPj.js";const l={};function t(p,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="开源配置管理中心apollo使用方法" tabindex="-1"><a class="header-anchor" href="#开源配置管理中心apollo使用方法"><span>开源配置管理中心apollo使用方法</span></a></h1><h2 id="什么是apollo" tabindex="-1"><a class="header-anchor" href="#什么是apollo"><span>什么是apollo</span></a></h2><p>Apollo（阿波罗）是一款可靠的分布式配置管理中心，诞生于携程框架研发部，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。</p><h2 id="应用什么场景" tabindex="-1"><a class="header-anchor" href="#应用什么场景"><span>应用什么场景</span></a></h2><p><strong>项目在不同环境对应的不同的配置</strong>，统一管理不同环境、不同集群的配置</p><p>Apollo提供了一个统一界面集中式管理不同环境（environment）、不同集群（cluster）、不同命名空间（namespace）的配置。 同一份代码部署在不同的集群，可以有不同的配置，比如zk的地址等 通过命名空间（namespace）可以很方便的支持多个不同应用共享同一份配置，同时还允许应用对共享的配置进行覆盖</p><p><img src="https://imgoss.xgss.net/picgo/基于Linux搭建开源配置管理中心apollo-16511151656951.jpg?aliyun" alt="基于Linux搭建开源配置管理中心apollo"></p><h2 id="系统介绍" tabindex="-1"><a class="header-anchor" href="#系统介绍"><span>系统介绍</span></a></h2><table><thead><tr><th>系统</th><th>Centos7</th></tr></thead><tbody><tr><td>java环境</td><td>java1.8</td></tr><tr><td>数据库</td><td>MariaDB-10.2.9</td></tr><tr><td>IP</td><td>192.168.1.8</td></tr></tbody></table><h1 id="使用文档" tabindex="-1"><a class="header-anchor" href="#使用文档"><span><a href="https://www.apolloconfig.com/#/zh/usage/apollo-user-guide" target="_blank" rel="noopener noreferrer">使用文档</a></span></a></h1><h3 id="名词解释" tabindex="-1"><a class="header-anchor" href="#名词解释"><span>名词解释</span></a></h3><p><strong>普通应用</strong> 普通应用指的是独立运行的程序，如Web应用程序、带有main函数的程序</p><p><strong>公共组件</strong> 公共组件指的是发布的类库、客户端程序，不会自己独立运行，如Java的jar包、.Net的dll文件</p><h1 id="普通应用接入指南" tabindex="-1"><a class="header-anchor" href="#普通应用接入指南"><span>普通应用接入指南</span></a></h1><h2 id="创建项目" tabindex="-1"><a class="header-anchor" href="#创建项目"><span>创建项目</span></a></h2><p>要使用Apollo，第一步需要创建项目。</p><ol><li>打开apollo-portal主页</li><li>点击“创建项目”</li></ol><p><img src="https://imgoss.xgss.net/picgo/create-app-entry.png?aliyun" alt="create-app-entry"></p><ol><li>输入项目信息 <ul><li>部门：选择应用所在的部门</li><li>应用AppId：用来标识应用身份的唯一id，格式为string，需要和客户端app.properties中配置的app.id对应</li><li>应用名称：应用名，仅用于界面展示</li><li>应用负责人：选择的人默认会成为该项目的管理员，具备项目权限管理、集群创建、Namespace创建等权限</li></ul></li></ol><p><img src="https://imgoss.xgss.net/picgo/create-app.png?aliyun" alt="create-app"></p><ol><li><p>点击提交</p><p>创建成功后，会自动跳转到项目首页</p></li></ol><p><img src="https://imgoss.xgss.net/picgo/app-created.png?aliyun" alt="app-created"></p><h2 id="项目权限分配" tabindex="-1"><a class="header-anchor" href="#项目权限分配"><span>项目权限分配</span></a></h2><h3 id="项目管理员权限" tabindex="-1"><a class="header-anchor" href="#项目管理员权限"><span>项目管理员权限</span></a></h3><p>项目管理员拥有以下权限：</p><ol><li>可以管理项目的权限分配</li><li>可以创建集群</li><li>可以创建Namespace</li></ol><p>创建项目时填写的应用负责人默认会成为项目的管理员之一，如果还需要其他人也成为项目管理员，可以按照下面步骤操作：</p><ol><li><p>点击页面左侧的“管理项目”</p><ul><li><img src="https://imgoss.xgss.net/picgo/app-permission-entry.png?aliyun" alt="app-permission-entry"></li></ul></li><li><p>搜索需要添加的成员并点击添加</p><ul><li><img src="https://imgoss.xgss.net/picgo/app-permission-search-user.png?aliyun" alt="app-permission-search-user"></li><li><img src="https://imgoss.xgss.net/picgo/app-permission-user-added.png?aliyun" alt="app-permission-user-added"></li></ul></li></ol><h3 id="配置编辑、发布权限" tabindex="-1"><a class="header-anchor" href="#配置编辑、发布权限"><span>配置编辑、发布权限</span></a></h3><p>配置权限分为编辑和发布：</p><ul><li>编辑权限允许用户在Apollo界面上创建、修改、删除配置 <ul><li>配置修改后只在Apollo界面上变化，不会影响到应用实际使用的配置</li></ul></li><li>发布权限允许用户在Apollo界面上发布、回滚配置 <ul><li>配置只有在发布、回滚动作后才会被应用实际使用到</li><li>Apollo在用户操作发布、回滚动作后实时通知到应用，并使最新配置生效</li></ul></li></ul><p>项目创建完，默认没有分配配置的编辑和发布权限，需要项目管理员进行授权。</p><ol><li>点击application这个namespace的授权按钮 <ul><li><img src="https://imgoss.xgss.net/picgo/namespace-permission-entry.png?aliyun" alt="namespace-permission-entry"></li></ul></li><li>分配修改权限 <ul><li><img src="https://imgoss.xgss.net/picgo/namespace-permission-edit.png?aliyun" alt="namespace-permission-edit"></li></ul></li><li>分配发布权限 <ul><li><img src="https://imgoss.xgss.net/picgo/namespace-publish-permission.png?aliyun" alt="namespace-publish-permission"></li></ul></li></ol><h2 id="添加配置项" tabindex="-1"><a class="header-anchor" href="#添加配置项"><span>添加配置项</span></a></h2><p>编辑配置需要拥有这个Namespace的编辑权限，如果发现没有新增配置按钮，可以找项目管理员授权。</p><h3 id="通过表格模式添加配置" tabindex="-1"><a class="header-anchor" href="#通过表格模式添加配置"><span>通过表格模式添加配置</span></a></h3><ol><li>点击新增配置 <ul><li><img src="https://imgoss.xgss.net/picgo/create-item-entry.png?aliyun" alt="create-item-entry"></li></ul></li><li>输入配置项 <ul><li><img src="https://imgoss.xgss.net/picgo/create-item-detail.png?aliyun" alt="create-item-detail"></li></ul></li><li>点击提交 <ul><li><img src="https://imgoss.xgss.net/picgo/item-created.png?aliyun" alt="item-created"></li></ul></li></ol><h3 id="通过文本模式编辑" tabindex="-1"><a class="header-anchor" href="#通过文本模式编辑"><span>通过文本模式编辑</span></a></h3><p>Apollo除了支持表格模式，逐个添加、修改配置外，还提供文本模式批量添加、修改。 这个对于从已有的properties文件迁移尤其有用。</p><ol><li><p>切换到文本编辑模式</p><p><img src="https://imgoss.xgss.net/picgo/text-mode-config-overview.png?aliyun" alt="text-mode-config-overview"></p></li><li><p>点击右侧的修改配置按钮</p><p><img src="https://imgoss.xgss.net/picgo/text-mode-config-entry.png?aliyun" alt="text-mode-config-entry"></p></li><li><p>输入配置项，并点击提交修改</p><p><img src="https://imgoss.xgss.net/picgo/text-mode-config-submit.png?aliyun" alt="text-mode-config-submit"></p></li></ol><h2 id="发布配置" tabindex="-1"><a class="header-anchor" href="#发布配置"><span>发布配置</span></a></h2><p>配置只有在发布后才会真的被应用使用到，所以在编辑完配置后，需要发布配置。</p><p>发布配置需要拥有这个Namespace的发布权限，如果发现没有发布按钮，可以找项目管理员授权。</p><ol><li><p>点击“发布按钮” <img src="https://imgoss.xgss.net/picgo/hermes-portal-publish-entry.png?aliyun" alt="publish-entry"></p></li><li><p>填写发布相关信息，点击发布</p><p><img src="https://imgoss.xgss.net/picgo/hermes-portal-publish-detail.png?aliyun" alt="publish-detail"></p></li></ol><h2 id="应用读取配置" tabindex="-1"><a class="header-anchor" href="#应用读取配置"><span>应用读取配置</span></a></h2><p>配置发布成功后，应用就可以通过Apollo客户端读取到配置了。</p><p>Apollo目前提供Java客户端，具体信息请点击<a href="https://www.apolloconfig.com/#/zh/usage/java-sdk-user-guide" target="_blank" rel="noopener noreferrer">Java客户端使用文档</a>：</p><p>如果应用使用了其它语言，也可以通过直接访问Http接口获取配置，具体可以参考<a href="https://www.apolloconfig.com/#/zh/usage/other-language-client-user-guide" target="_blank" rel="noopener noreferrer">其它语言客户端接入指南</a></p><h2 id="应用接入apollo" tabindex="-1"><a class="header-anchor" href="#应用接入apollo"><span>应用接入Apollo</span></a></h2><p>首先需要在Apollo中接入你的应用，具体步骤可以参考<a href="https://www.apolloconfig.com/#/zh/usage/apollo-user-guide?id=%E4%B8%80%E3%80%81%E6%99%AE%E9%80%9A%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97" target="_blank" rel="noopener noreferrer">应用接入文档</a>。</p><h2 id="通过带缓存的http接口从apollo读取配置" tabindex="-1"><a class="header-anchor" href="#通过带缓存的http接口从apollo读取配置"><span>通过带缓存的Http接口从Apollo读取配置</span></a></h2><p>该接口会从缓存中获取配置，适合频率较高的配置拉取请求，如简单的每30秒轮询一次配置。</p><p>由于缓存最多会有一秒的延时，所以如果需要配合配置推送通知实现实时更新配置的话，请参考通过不带缓存的Http接口从Apollo读取配置</p><h3 id="http接口说明" tabindex="-1"><a class="header-anchor" href="#http接口说明"><span>Http接口说明</span></a></h3><p><strong>URL</strong>: {config_server_url}/configfiles/json/{appId}/{clusterName}/{namespaceName}?ip={clientIp}</p><p><strong>Method</strong>: GET</p><p><strong>参数说明</strong>：</p><table><thead><tr><th>参数名</th><th>是否必须</th><th>参数值</th><th>备注</th></tr></thead><tbody><tr><td>config_server_url</td><td>是</td><td>Apollo配置服务的地址</td><td></td></tr><tr><td>appId</td><td>是</td><td>应用的appId</td><td></td></tr><tr><td>clusterName</td><td>是</td><td>集群名</td><td>一般情况下传入 default 即可。 如果希望配置按集群划分，可以参考<a href="https://www.apolloconfig.com/#/zh/usage/apollo-user-guide?id=%E4%B8%89%E3%80%81%E9%9B%86%E7%BE%A4%E7%8B%AC%E7%AB%8B%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener noreferrer">集群独立配置说明</a>做相关配置，然后在这里填入对应的集群名。</td></tr><tr><td>namespaceName</td><td>是</td><td>Namespace的名字</td><td>如果没有新建过Namespace的话，传入application即可。 如果创建了Namespace，并且需要使用该Namespace的配置，则传入对应的Namespace名字。<strong>需要注意的是对于properties类型的namespace，只需要传入namespace的名字即可，如application。对于其它类型的namespace，需要传入namespace的名字加上后缀名，如datasources.json</strong></td></tr><tr><td>ip</td><td>否</td><td>应用部署的机器ip</td><td>这个参数是可选的，用来实现灰度发布。 如果不想传这个参数，请注意URL中从?号开始的query parameters整个都不要出现。</td></tr></tbody></table><h3 id="http接口返回格式" tabindex="-1"><a class="header-anchor" href="#http接口返回格式"><span>Http接口返回格式</span></a></h3><p>该Http接口返回的是JSON格式、UTF-8编码，包含了对应namespace中所有的配置项。</p><p>返回内容Sample如下：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;portal.elastic.document.type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;biz&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;portal.elastic.cluster.name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hermes-es-fws&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>通过<code>{config_server_url}/configfiles/{appId}/{clusterName}/{namespaceName}?ip={clientIp}</code>可以获取到properties形式的配置</p></blockquote><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h3><p>由于是Http接口，所以在URL组装OK之后，直接通过浏览器、或者相关的http接口测试工具访问即可。</p><p>本地测试：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># curl http://192.168.1.5:8080/configfiles/json/1001/default/application</span></span>
<span class="line"><span></span></span>
<span class="line"><span>{&quot;redis_ip&quot;:&quot;192.168.1.12&quot;,&quot;redis_passwd&quot;:&quot;123456&quot;,&quot;redis_port&quot;:&quot;6379&quot;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="通过不带缓存的http接口从apollo读取配置" tabindex="-1"><a class="header-anchor" href="#通过不带缓存的http接口从apollo读取配置"><span>通过不带缓存的Http接口从Apollo读取配置</span></a></h2><p>该接口会直接从数据库中获取配置，可以配合配置推送通知实现实时更新配置。</p><h3 id="http接口说明-1" tabindex="-1"><a class="header-anchor" href="#http接口说明-1"><span>Http接口说明</span></a></h3><p><strong>URL</strong>: {config_server_url}/configs/{appId}/{clusterName}/{namespaceName}?releaseKey={releaseKey}&amp;ip={clientIp}</p><p><strong>Method</strong>: GET</p><p><strong>参数说明</strong>：</p><table><thead><tr><th>参数名</th><th>是否必须</th><th>参数值</th><th>备注</th></tr></thead><tbody><tr><td>config_server_url</td><td>是</td><td>Apollo配置服务的地址</td><td></td></tr><tr><td>appId</td><td>是</td><td>应用的appId</td><td></td></tr><tr><td>clusterName</td><td>是</td><td>集群名</td><td>一般情况下传入 default 即可。 如果希望配置按集群划分，可以参考<a href="https://www.apolloconfig.com/#/zh/usage/apollo-user-guide?id=%E4%B8%89%E3%80%81%E9%9B%86%E7%BE%A4%E7%8B%AC%E7%AB%8B%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener noreferrer">集群独立配置说明</a>做相关配置，然后在这里填入对应的集群名。</td></tr><tr><td>namespaceName</td><td>是</td><td>Namespace的名字</td><td>如果没有新建过Namespace的话，传入application即可。 如果创建了Namespace，并且需要使用该Namespace的配置，则传入对应的Namespace名字。<strong>需要注意的是对于properties类型的namespace，只需要传入namespace的名字即可，如application。对于其它类型的namespace，需要传入namespace的名字加上后缀名，如datasources.json</strong></td></tr><tr><td>releaseKey</td><td>否</td><td>上一次的releaseKey</td><td>将上一次返回对象中的releaseKey传入即可，用来给服务端比较版本，如果版本比下来没有变化，则服务端直接返回304以节省流量和运算</td></tr><tr><td>ip</td><td>否</td><td>应用部署的机器ip</td><td>这个参数是可选的，用来实现灰度发布。</td></tr></tbody></table><h3 id="http接口返回格式-1" tabindex="-1"><a class="header-anchor" href="#http接口返回格式-1"><span>Http接口返回格式</span></a></h3><p>该Http接口返回的是JSON格式、UTF-8编码。</p><p>如果配置没有变化（传入的releaseKey和服务端的相等），则返回HttpStatus 304，response body为空。</p><p>如果配置有变化，则会返回HttpStatus 200，response body为对应namespace的meta信息以及其中所有的配置项。</p><p>返回内容Sample如下：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;appId&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;100004458&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;cluster&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;default&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;namespaceName&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;application&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;configurations&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;portal.elastic.document.type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;biz&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;portal.elastic.cluster.name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hermes-es-fws&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;releaseKey&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;20170430092936-dee2d58e74515ff3&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试-1" tabindex="-1"><a class="header-anchor" href="#测试-1"><span>测试</span></a></h3><p>由于是Http接口，所以在URL组装OK之后，直接通过浏览器、或者相关的http接口测试工具访问即可。</p><p>本地测试</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># curl http://192.168.1.5:8080/configs/1001/default/application</span></span>
<span class="line"><span>{&quot;appId&quot;:&quot;1001&quot;,&quot;cluster&quot;:&quot;default&quot;,&quot;namespaceName&quot;:&quot;application&quot;,&quot;configurations&quot;:{&quot;redis_ip&quot;:&quot;192.168.1.12&quot;,&quot;redis_passwd&quot;:&quot;123456&quot;,&quot;redis_port&quot;:&quot;6379&quot;},&quot;releaseKey&quot;:&quot;20220330100056-d3ee492df675126d&quot;}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># curl http://192.168.1.5:8080/configs/1001/default/application?releaseKey=20220330100056-d3ee492df675126d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用感知配置更新" tabindex="-1"><a class="header-anchor" href="#应用感知配置更新"><span>应用感知配置更新</span></a></h2><p>Apollo提供了基于Http long polling的配置更新推送通知，第三方客户端可以看自己实际的需求决定是否需要使用这个功能。</p><p>如果对配置更新时间不是那么敏感的话，可以通过定时刷新来感知配置更新，刷新频率可以视应用自身情况来定，建议在30秒以上。</p><p>如果需要做到实时感知配置更新（1秒）的话，可以参考下面的文档实现配置更新推送的功能。</p><h3 id="配置更新推送实现思路" tabindex="-1"><a class="header-anchor" href="#配置更新推送实现思路"><span>配置更新推送实现思路</span></a></h3><p>这里建议大家可以参考Apollo的Java实现：<a href="https://github.com/apolloconfig/apollo/blob/master/apollo-client/src/main/java/com/ctrip/framework/apollo/internals/RemoteConfigLongPollService.java" target="_blank" rel="noopener noreferrer">RemoteConfigLongPollService.java</a>，代码量200多行，总体上还是比较简单的。</p><h4 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h4><p>首先需要确定哪些namespace需要配置更新推送，Apollo的实现方式是程序第一次获取某个namespace的配置时就会来注册一下，我们就知道有哪些namespace需要配置更新推送了。</p><p>初始化后的结果就是得到一个notifications的Map，内容是namespaceName -&gt; notificationId（初始值为-1）。</p><p>运行过程中如果发现有新的namespace需要配置更新推送，直接塞到notifications这个Map里面即可。</p><h4 id="请求服务" tabindex="-1"><a class="header-anchor" href="#请求服务"><span>请求服务</span></a></h4><p>有了notifications这个Map之后，就可以请求服务了。这里先描述一下请求服务的逻辑，具体的URL参数和说明请参见后面的接口说明。</p><ol><li>请求远端服务，带上自己的应用信息以及notifications信息</li><li>服务端针对传过来的每一个namespace和对应的notificationId，检查notificationId是否是最新的</li><li>如果都是最新的，则保持住请求60秒，如果60秒内没有配置变化，则返回HttpStatus 304。如果60秒内有配置变化，则返回对应namespace的最新notificationId, HttpStatus 200。</li><li>如果传过来的notifications信息中发现有notificationId比服务端老，则直接返回对应namespace的最新notificationId, HttpStatus 200。</li><li>客户端拿到服务端返回后，判断返回的HttpStatus</li><li>如果返回的HttpStatus是304，说明配置没有变化，重新执行第1步</li><li>如果返回的HttpStauts是200，说明配置有变化，针对变化的namespace重新去服务端拉取配置，参见<a href="https://www.apolloconfig.com/#/zh/usage/other-language-client-user-guide?id=_13-%E9%80%9A%E8%BF%87%E4%B8%8D%E5%B8%A6%E7%BC%93%E5%AD%98%E7%9A%84http%E6%8E%A5%E5%8F%A3%E4%BB%8Eapollo%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener noreferrer">1.3 通过不带缓存的Http接口从Apollo读取配置</a>。同时更新notifications map中的notificationId。重新执行第1步。</li></ol><h3 id="http接口说明-2" tabindex="-1"><a class="header-anchor" href="#http接口说明-2"><span>Http接口说明</span></a></h3><p><strong>URL</strong>: {config_server_url}/notifications/v2?appId={appId}&amp;cluster={clusterName}&amp;notifications={notifications}</p><p><strong>Method</strong>: GET</p><p><strong>参数说明</strong>：</p><table><thead><tr><th>参数名</th><th>是否必须</th><th>参数值</th><th>备注</th></tr></thead><tbody><tr><td>config_server_url</td><td>是</td><td>Apollo配置服务的地址</td><td></td></tr><tr><td>appId</td><td>是</td><td>应用的appId</td><td></td></tr><tr><td>clusterName</td><td>是</td><td>集群名</td><td>一般情况下传入 default 即可。 如果希望配置按集群划分，可以参考<a href="https://www.apolloconfig.com/#/zh/usage/apollo-user-guide?id=%E4%B8%89%E3%80%81%E9%9B%86%E7%BE%A4%E7%8B%AC%E7%AB%8B%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener noreferrer">集群独立配置说明</a>做相关配置，然后在这里填入对应的集群名。</td></tr><tr><td>notifications</td><td>是</td><td>notifications信息</td><td>传入本地的notifications信息，注意这里需要以array形式转为json传入，如：[{&quot;namespaceName&quot;: &quot;application&quot;, &quot;notificationId&quot;: 100}, {&quot;namespaceName&quot;: &quot;FX.apollo&quot;, &quot;notificationId&quot;: 200}]。<strong>需要注意的是对于properties类型的namespace，只需要传入namespace的名字即可，如application。对于其它类型的namespace，需要传入namespace的名字加上后缀名，如datasources.json</strong></td></tr></tbody></table><blockquote><p>注1：由于服务端会hold住请求60秒，所以请确保客户端访问服务端的超时时间要大于60秒。</p></blockquote><blockquote><p>注2：别忘了对参数进行<a href="https://en.wikipedia.org/wiki/Percent-encoding" target="_blank" rel="noopener noreferrer">url encode</a></p></blockquote><h3 id="http接口返回格式-2" tabindex="-1"><a class="header-anchor" href="#http接口返回格式-2"><span>Http接口返回格式</span></a></h3><p>该Http接口返回的是JSON格式、UTF-8编码，包含了有变化的namespace和最新的notificationId。</p><p>返回内容Sample如下：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;namespaceName&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;application&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;notificationId&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">101</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试-2" tabindex="-1"><a class="header-anchor" href="#测试-2"><span>测试</span></a></h3><p>由于是Http接口，所以在URL组装OK之后，直接通过浏览器、或者相关的http接口测试工具访问即可。</p><h2 id="配置访问密钥" tabindex="-1"><a class="header-anchor" href="#配置访问密钥"><span>配置访问密钥</span></a></h2><p>Apollo从1.6.0版本开始增加访问密钥机制，从而只有经过身份验证的客户端才能访问敏感配置。如果应用开启了访问密钥，客户端发出请求时需要增加签名，否则无法获取配置。</p><p>需要设置的Header信息：</p><table><thead><tr><th>Header</th><th>Value</th><th>备注</th></tr></thead><tbody><tr><td>Authorization</td><td>Apollo \${appId}😒{signature}</td><td>appId: 应用的appId，signature：使用访问密钥对当前时间以及所访问的URL加签后的值，具体实现可以参考<a href="https://github.com/apolloconfig/apollo/blob/aa184a2e11d6e7e3f519d860d69f3cf30ccfcf9c/apollo-core/src/main/java/com/ctrip/framework/apollo/core/signature/Signature.java#L22" target="_blank" rel="noopener noreferrer">Signature.signature</a></td></tr><tr><td>Timestamp</td><td>从<code>1970-1-1 00:00:00 UTC+0</code>到现在所经过的毫秒数</td><td>可以参考<a href="https://docs.oracle.com/javase/7/docs/api/java/lang/System.html#currentTimeMillis()" target="_blank" rel="noopener noreferrer">System.currentTimeMillis</a></td></tr></tbody></table><p>本地测试</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># curl</span></span>
<span class="line"><span>http://192.168.1.5:8080/configfiles/json/1001/default/application</span></span>
<span class="line"><span>{&quot;timestamp&quot;:&quot;2022-03-30T16:39:11.912+0800&quot;,&quot;status&quot;:401,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;&quot;,&quot;path&quot;:&quot;/configfiles/json/1001/default/application&quot;}</span></span>
<span class="line"><span>报错 401</span></span>
<span class="line"><span></span></span>
<span class="line"><span>密钥： da01f4aab45d4e3c8b8764d99f9a31f5</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>获取时间戳： Timestamp=\`date +%s\`</span></span>
<span class="line"><span></span></span>
<span class="line"><span>curl http://192.168.1.5:8080/configfiles/json/1001/default/application -X POST -H &quot;Content-type:application/json&quot; -d &#39;{&quot;Authorization&quot;:&quot;Apollo 1001:da01f4aab45d4e3c8b8764d99f9a31f5&quot;,&quot;Timestamp&quot;:&quot;1648630422&quot;}&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="错误码说明" tabindex="-1"><a class="header-anchor" href="#错误码说明"><span>错误码说明</span></a></h2><p>正常情况下，接口返回的Http状态码是200，下面列举了Apollo会返回的非200错误码说明。</p><h3 id="_400-bad-request" tabindex="-1"><a class="header-anchor" href="#_400-bad-request"><span>400 - Bad Request</span></a></h3><p>客户端传入参数的错误，如必选参数没有传入等，客户端需要根据提示信息检查对应的参数是否正确。</p><h3 id="_401-unauthorized" tabindex="-1"><a class="header-anchor" href="#_401-unauthorized"><span>401 - Unauthorized</span></a></h3><p>客户端未授权，如服务端配置了访问密钥，客户端未配置或配置错误。</p><h3 id="_404-not-found" tabindex="-1"><a class="header-anchor" href="#_404-not-found"><span>404 - Not Found</span></a></h3><p>接口要访问的资源不存在，一般是URL或URL的参数错误，或者是对应的namespace还没有发布过配置。</p><h3 id="_405-method-not-allowed" tabindex="-1"><a class="header-anchor" href="#_405-method-not-allowed"><span>405 - Method Not Allowed</span></a></h3><p>接口访问的Method不正确，比如应该使用GET的接口使用了POST访问等，客户端需要检查接口访问方式是否正确。</p><h3 id="_500-internal-server-error" tabindex="-1"><a class="header-anchor" href="#_500-internal-server-error"><span>500 - Internal Server Error</span></a></h3><p>其它类型的错误默认都会返回500，对这类错误如果应用无法根据提示信息找到原因的话，可以尝试查看服务端日志来排查问题。</p><h1 id="apollo使用场景和示例代码" tabindex="-1"><a class="header-anchor" href="#apollo使用场景和示例代码"><span>Apollo使用场景和示例代码</span></a></h1><p>https://github.com/ctripcorp/apollo-use-cases</p><h1 id="apollo-实践案例" tabindex="-1"><a class="header-anchor" href="#apollo-实践案例"><span>Apollo 实践案例</span></a></h1><ul><li><p><a href="https://mp.weixin.qq.com/s/VHugn0vgNu4m56V49geC4w" target="_blank" rel="noopener noreferrer">Apollo+ES源码改造，构建民生银行的ELK日志平台配置管理中心</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/Ge14UeY9Gm2Hrk--E47eJQ" target="_blank" rel="noopener noreferrer">Apollo在有赞的实践</a></p></li><li><p><a href="https://blog.llyweb.com/articles/2020/08/11/1597149013480.html" target="_blank" rel="noopener noreferrer">微服务版本切换初始设计思路</a></p></li><li><p><a href="https://anilople.github.io/Sentinel" target="_blank" rel="noopener noreferrer">Alibaba Sentinel Push模式 规则推送至Apollo配置中心</a></p></li></ul><h1 id="apollo-安全相关最佳实践" tabindex="-1"><a class="header-anchor" href="#apollo-安全相关最佳实践"><span>Apollo 安全相关最佳实践</span></a></h1><h2 id="配置查看权限" tabindex="-1"><a class="header-anchor" href="#配置查看权限"><span>配置查看权限</span></a></h2><p>从1.1.0版本开始，apollo-portal增加了查看权限的支持，可以支持配置某个环境只允许项目成员查看私有Namespace的配置。</p><p>这里的项目成员是指：</p><ol><li>项目的管理员</li><li>具备该私有Namespace在该环境下的修改或发布权限</li></ol><p>配置方式很简单，用超级管理员账号登录后，进入<code>管理员工具 - 系统参数</code>页面新增或修改<code>configView.memberOnly.envs</code>配置项即可。</p><p><img src="https://imgoss.xgss.net/picgo/46456519-c155e100-c7e1-11e8-969b-8f332379fa29.png?aliyun" alt="configView.memberOnly.envs"></p><h2 id="配置访问密钥-1" tabindex="-1"><a class="header-anchor" href="#配置访问密钥-1"><span>配置访问密钥</span></a></h2><p>Apollo从1.6.0版本开始增加访问密钥机制，从而只有经过身份验证的客户端才能访问敏感配置。如果应用开启了访问密钥，客户端需要配置密钥，否则无法获取配置。</p><ol><li><p>项目管理员打开管理密钥页面</p><p><img src="https://imgoss.xgss.net/picgo/94990081-f4d3cd80-05ab-11eb-9470-fed5ec6de92e-164861936808620.png?aliyun" alt="94990081-f4d3cd80-05ab-11eb-9470-fed5ec6de92e-164861936808620"></p></li><li><p>为项目的每个环境生成访问密钥，注意默认是禁用的，建议在客户端都配置完成后再开启</p><p><img src="https://imgoss.xgss.net/picgo/94990150-788dba00-05ac-11eb-9a12-727fdb872e42-164861936808621.png?aliyun" alt="94990150-788dba00-05ac-11eb-9a12-727fdb872e42-164861936808621"></p></li></ol><h1 id="客户端配置访问密钥" tabindex="-1"><a class="header-anchor" href="#客户端配置访问密钥"><span>客户端配置访问密钥</span></a></h1><blockquote><p>适用于1.6.0及以上版本</p></blockquote><p>Apollo从1.6.0版本开始增加访问密钥机制，从而只有经过身份验证的客户端才能访问敏感配置。如果应用开启了访问密钥，客户端需要配置密钥，否则无法获取配置。</p><p>配置方式按照优先级从高到低分别为：</p><p>1.通过Java System Property</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>通过Java System Propertyapollo.access-key.secret(1.9.0+) 或者 apollo.accesskey.secret(1.9.0之前)</span></span>
<span class="line"><span>可以通过Java的System Property apollo.access-key.secret(1.9.0+) 或者 apollo.accesskey.secret(1.9.0之前)来指定</span></span>
<span class="line"><span>在Java程序启动脚本中，可以指定-Dapollo.access-key.secret=1cf998c4e2ad4704b45a98a509d15719(1.9.0+) 或者 -Dapollo.accesskey.secret=1cf998c4e2ad4704b45a98a509d15719(1.9.0之前)</span></span>
<span class="line"><span>如果是运行jar文件，需要注意格式是java -Dapollo.access-key.secret=1cf998c4e2ad4704b45a98a509d15719 -jar xxx.jar(1.9.0+) 或者 java -Dapollo.accesskey.secret=1cf998c4e2ad4704b45a98a509d15719 -jar xxx.jar(1.9.0之前)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>也可以通过程序指定，如System.setProperty(&quot;apollo.access-key.secret&quot;, &quot;1cf998c4e2ad4704b45a98a509d15719&quot;);(1.9.0+) 或者 System.setProperty(&quot;apollo.accesskey.secret&quot;, &quot;1cf998c4e2ad4704b45a98a509d15719&quot;);(1.9.0之前)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.通过Spring Boot的配置文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>可以在Spring Boot的application.properties或bootstrap.properties中指定apollo.access-key.secret=1cf998c4e2ad4704b45a98a509d15719(1.9.0+) 或者 apollo.accesskey.secret=1cf998c4e2ad4704b45a98a509d15719(1.9.0之前)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3.通过操作系统的System Environment</p><pre><code>还可以通过操作系统的System Environment APOLLO_ACCESS_KEY_SECRET(1.9.0+) 或者 APOLLO_ACCESSKEY_SECRET(1.9.0之前)来指定
注意key为全大写
</code></pre><p>4.通过app.properties配置文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>可以在classpath:/META-INF/app.properties指定apollo.access-key.secret=1cf998c4e2ad4704b45a98a509d15719(1.9.0+) 或者 apollo.accesskey.secret=1cf998c4e2ad4704b45a98a509d15719(1.9.0之前)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="自定义server-properties路径" tabindex="-1"><a class="header-anchor" href="#自定义server-properties路径"><span>自定义server.properties路径</span></a></h1><blockquote><p>适用于1.8.0及以上版本</p></blockquote><p>1.8.0版本开始支持以下方式自定义server.properties路径，按照优先级从高到低分别为：</p><p>一.通过Java System Property apollo.path.server.properties</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>1.可以通过Java的System Property apollo.path.server.properties来指定</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2.在Java程序启动脚本中，可以指定-Dapollo.path.server.properties=/some-dir/some-file.properties</span></span>
<span class="line"><span>如果是运行jar文件，需要注意格式是java -Dapollo.path.server.properties=/some-dir/some-file.properties -jar xxx.jar</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3.也可以通过程序指定，如System.setProperty(&quot;apollo.path.server.properties&quot;, &quot;/some-dir/some-file.properties&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二、通过操作系统的System EnvironmentAPOLLO_PATH_SERVER_PROPERTIES</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>可以通过操作系统的System Environment APOLLO_PATH_SERVER_PROPERTIES来指定</span></span>
<span class="line"><span>注意key为全大写，且中间是_分隔</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="客户端用法" tabindex="-1"><a class="header-anchor" href="#客户端用法"><span><a href="https://www.apolloconfig.com/#/zh/usage/java-sdk-user-guide?id=%E4%B8%89%E3%80%81%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%94%A8%E6%B3%95" target="_blank" rel="noopener noreferrer">客户端用法</a></span></a></h1><p>Apollo支持API方式和Spring整合方式，该怎么选择用哪一种方式？</p><ul><li><p>API方式灵活，功能完备，配置值实时更新（热发布），支持所有Java环境。</p></li><li><p>Spring方式接入简单，结合Spring有N种酷炫的玩法，如</p><ul><li>Placeholder方式： <ul><li>代码中直接使用，如：<code>@Value(&quot;\${someKeyFromApollo:someDefaultValue}&quot;)</code></li><li>配置文件中使用替换placeholder，如：<code>spring.datasource.url: \${someKeyFromApollo:someDefaultValue}</code></li><li>直接托管spring的配置，如在apollo中直接配置<code>spring.datasource.url=jdbc:mysql://localhost:3306/somedb?characterEncoding=utf8</code></li></ul></li><li>Spring boot的<a href="http://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/context/properties/ConfigurationProperties.html" target="_blank" rel="noopener noreferrer">@ConfigurationProperties</a>方式</li><li>从v0.10.0开始的版本支持placeholder在运行时自动更新，具体参见<a href="https://github.com/apolloconfig/apollo/pull/972" target="_blank" rel="noopener noreferrer">PR #972</a>。（v0.10.0之前的版本在配置变化后不会重新注入，需要重启才会更新，如果需要配置值实时更新，可以参考后续<a href="https://www.apolloconfig.com/#/zh/usage/java-sdk-user-guide?id=_322-spring-placeholder%E7%9A%84%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener noreferrer">3.2.2 Spring Placeholder的使用</a>的说明）</li></ul></li><li><p>Spring方式也可以结合API方式使用，如注入Apollo的Config对象，就可以照常通过API方式获取配置了：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ApolloConfig</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Config</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //inject config for namespace application点击复制错误复制成功</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="api使用方式" tabindex="-1"><a class="header-anchor" href="#api使用方式"><span>API使用方式</span></a></h2><p>API方式是最简单、高效使用Apollo配置的方式，不依赖Spring框架即可使用。</p><h3 id="获取默认namespace的配置-application" tabindex="-1"><a class="header-anchor" href="#获取默认namespace的配置-application"><span>获取默认namespace的配置（application）</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Config</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> config </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ConfigService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAppConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //config instance is singleton for each namespace and is never null</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> someKey </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;someKeyFromDefaultNamespace&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> someDefaultValue </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;someDefaultValueForTheKey&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> value </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(someKey, someDefaultValue);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上述的<strong>config.getProperty</strong>可以获取到someKey对应的实时最新的配置值。</p><p>另外，配置值从内存中获取，所以不需要应用自己做缓存。</p><h1 id="go、python、nodejs、php等客户端使用" tabindex="-1"><a class="header-anchor" href="#go、python、nodejs、php等客户端使用"><span>Go、Python、Nodejs、PHP等客户端使用</span></a></h1><p>对应开发语言支持：https://www.apolloconfig.com/#/zh/usage/third-party-sdks-user-guide</p><h3 id="apollo-php-客户端-1" tabindex="-1"><a class="header-anchor" href="#apollo-php-客户端-1"><span><a href="https://www.apolloconfig.com/#/zh/usage/third-party-sdks-user-guide?id=apollo-php-%E5%AE%A2%E6%88%B7%E7%AB%AF-1" target="_blank" rel="noopener noreferrer">Apollo PHP 客户端 1</a></span></a></h3><p>项目地址：<a href="https://github.com/multilinguals/apollo-php-client" target="_blank" rel="noopener noreferrer">apollo-php-client</a></p><h3 id="apollo-php-客户端-2" tabindex="-1"><a class="header-anchor" href="#apollo-php-客户端-2"><span><a href="https://www.apolloconfig.com/#/zh/usage/third-party-sdks-user-guide?id=apollo-php-%E5%AE%A2%E6%88%B7%E7%AB%AF-2" target="_blank" rel="noopener noreferrer">Apollo PHP 客户端 2</a></span></a></h3><p>项目地址：<a href="https://github.com/fengzhibin/apollo-sdk-config" target="_blank" rel="noopener noreferrer">apollo-sdk-config</a></p><p>项目地址：<a href="https://github.com/fengzhibin/apollo-sdk-clientd" target="_blank" rel="noopener noreferrer">apollo-sdk-clientd</a></p><h1 id="什么是namespace" tabindex="-1"><a class="header-anchor" href="#什么是namespace"><span><a href="https://www.apolloconfig.com/#/zh/design/apollo-core-concept-namespace?id=_1-%e4%bb%80%e4%b9%88%e6%98%afnamespace" target="_blank" rel="noopener noreferrer">什么是Namespace</a></span></a></h1><p>Namespace是配置项的集合，类似于一个配置文件的概念。</p><p>个人觉得也是Apollo的比较重要和核心的知识点！</p><h2 id="什么是-application-的namespace" tabindex="-1"><a class="header-anchor" href="#什么是-application-的namespace"><span>什么是“application”的Namespace</span></a></h2><p>Apollo在创建项目的时候，都会默认创建一个“application”的Namespace。顾名思义，“application”是给应用自身使用的，熟悉Spring Boot的同学都知道，Spring Boot项目都有一个默认配置文件application.yml。在这里application.yml就等同于“application”的Namespace。对于90%的应用来说，“application”的Namespace已经满足日常配置使用场景了。</p><h4 id="客户端获取-application-namespace的代码如下" tabindex="-1"><a class="header-anchor" href="#客户端获取-application-namespace的代码如下"><span>客户端获取“application” Namespace的代码如下：</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Config</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> config </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ConfigService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAppConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="客户端获取非-application-namespace的代码如下" tabindex="-1"><a class="header-anchor" href="#客户端获取非-application-namespace的代码如下"><span>客户端获取非“application” Namespace的代码如下：</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Config</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> config </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ConfigService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(namespaceName);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="namespace的格式有哪些" tabindex="-1"><a class="header-anchor" href="#namespace的格式有哪些"><span>Namespace的格式有哪些？</span></a></h2><p>配置文件有多种格式，例如：properties、xml、yml、yaml、json等。同样Namespace也具有这些格式。在Portal UI中可以看到“application”的Namespace上有一个“properties”标签，表明“application”是properties格式的。</p><blockquote><p>注1：非properties格式的namespace，在客户端使用时需要调用<code>ConfigService.getConfigFile(String namespace, ConfigFileFormat configFileFormat)</code>来获取，如果使用<a href="https://www.apolloconfig.com/#/zh/usage/other-language-client-user-guide?id=_12-%E9%80%9A%E8%BF%87%E5%B8%A6%E7%BC%93%E5%AD%98%E7%9A%84http%E6%8E%A5%E5%8F%A3%E4%BB%8Eapollo%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener noreferrer">Http接口直接调用</a>时，对应的namespace参数需要传入namespace的名字加上后缀名，如datasources.json。</p></blockquote><blockquote><p>注2：apollo-client 1.3.0版本开始对yaml/yml做了更好的支持，使用起来和properties格式一致：<code>Config config = ConfigService.getConfig(&quot;application.yml&quot;);</code>，Spring的注入方式也和properties一致。</p></blockquote><h2 id="namespace的获取权限分类" tabindex="-1"><a class="header-anchor" href="#namespace的获取权限分类"><span>Namespace的获取权限分类</span></a></h2><p><strong>private （私有的）</strong></p><p><strong>public （公共的）</strong></p><p>这里的获取权限是相对于Apollo客户端来说的。</p><p>private权限的Namespace：<strong>只能被所属的应用获取到。一个应用尝试获取其它应用private的Namespace，Apollo会报“404”异常。</strong></p><p>public权限的Namespace： <strong>能被任何应用获取。</strong></p><h2 id="namespace的类型" tabindex="-1"><a class="header-anchor" href="#namespace的类型"><span>Namespace的类型</span></a></h2><p>Namespace类型有三种：</p><h3 id="私有类型" tabindex="-1"><a class="header-anchor" href="#私有类型"><span>私有类型</span></a></h3><p><strong>具有private权限。例如上文提到的“application” Namespace就是私有类型。</strong></p><h3 id="公共类型" tabindex="-1"><a class="header-anchor" href="#公共类型"><span>公共类型</span></a></h3><p><strong>具有public权限。公共类型的Namespace相当于游离于应用之外的配置，且通过Namespace的名称去标识公共Namespace，所以公共的Namespace的名称必须全局唯一。</strong></p><p>使用场景：部门级别共享的配置、小组级别共享的配置、几个项目之间共享的配置、中间件客户端的配置。</p><h3 id="关联类型-继承类型" tabindex="-1"><a class="header-anchor" href="#关联类型-继承类型"><span>关联类型（继承类型）</span></a></h3><p>关联类型又可称为继承类型，关联类型具有private权限。关联类型的Namespace继承于公共类型的Namespace，用于覆盖公共Namespace的某些配置。</p><p>例如公共的Namespace有两个配置项</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>k1 = v1</span></span>
<span class="line"><span>k2 = v2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后应用A有一个关联类型的Namespace关联了此公共Namespace，且覆盖了配置项k1，新值为v3。那么在应用A实际运行时，获取到的公共Namespace的配置为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>k1 = v3</span></span>
<span class="line"><span>k2 = v2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>关联类型使用场景：</p><p>举一个实际使用的场景。假设RPC框架的配置（如：timeout）有以下要求：</p><ul><li>提供一份全公司默认的配置且可动态调整</li><li>RPC客户端项目可以自定义某些配置项且可动态调整</li></ul><ol><li>如果把以上两点要求去掉“动态调整”，那么做法很简单。在rpc-client.jar包里有一份配置文件，每次修改配置文件然后重新发一个版本的jar包即可。同理，客户端项目修改配置也是如此。</li><li>如果只支持客户端项目可动态调整配置。客户端项目可以在Apollo “application” Namespace上配置一些配置项。在初始化service的时候，从Apollo上读取配置即可。这样做的坏处就是，每个项目都要自定义一些key，不统一。</li><li>那么如何完美支持以上需求呢？答案就是结合使用Apollo的公共类型的Namespace和关联类型的Namespace。RPC团队在Apollo上维护一个叫“rpc-client”的公共Namespace，在“rpc-client” Namespace上配置默认的参数值。rpc-client.jar里的代码读取“rpc-client”Namespace的配置即可。如果需要调整默认的配置，只需要修改公共类型“rpc-client” Namespace的配置。如果客户端项目想要自定义或动态修改某些配置项，只需要在Apollo 自己项目下关联“rpc-client”，就能创建关联类型“rpc-client”的Namespace。然后在关联类型“rpc-client”的Namespace下修改配置项即可。这里有一点需要指出的，那就是rpc-client.jar是在应用容器里运行的，所以rpc-client获取到的“rpc-client” Namespace的配置是应用的关联类型的Namespace加上公共类型的Namespace。</li></ol><h4 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span><a href="https://www.apolloconfig.com/#/zh/design/apollo-core-concept-namespace?id=_54-%E4%BE%8B%E5%AD%90" target="_blank" rel="noopener noreferrer">例子</a></span></a></h4><p>如下图所示，有三个应用：应用A、应用B、应用C。</p><ul><li><p>应用A有两个私有类型的Namespace：application和NS-Private，以及一个关联类型的Namespace：NS-Public。</p></li><li><p>应用B有一个私有类型的Namespace：application，以及一个公共类型的Namespace：NS-Public。</p></li><li><p>应用C只有一个私有类型的Namespace：application</p><p><img src="https://imgoss.xgss.net/picgo/namespace-model-example.png?aliyun" alt="Namespace例子"></p></li></ul><h5 id="应用a获取apollo配置" tabindex="-1"><a class="header-anchor" href="#应用a获取apollo配置"><span>应用A获取Apollo配置</span></a></h5><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //application </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Config</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> appConfig </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ConfigService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAppConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  appConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;k1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // k1 = v11</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  appConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;k2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // k2 = v21</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //NS-Private</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Config</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> privateConfig </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ConfigService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;NS-Private&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  privateConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;k1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // k1 = v3</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  privateConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;k3&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // k3 = v4</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //NS-Public，覆盖公共类型配置的情况，k4被覆盖</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Config</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> publicConfig </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ConfigService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;NS-Public&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  publicConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;k4&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // k4 = v6 cover</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  publicConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;k6&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // k6 = v6</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  publicConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;k7&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // k7 = v7点击复制错误复制成功</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="应用b获取apollo配置" tabindex="-1"><a class="header-anchor" href="#应用b获取apollo配置"><span>应用B获取Apollo配置</span></a></h5><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //application</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Config</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> appConfig </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ConfigService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAppConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  appConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;k1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // k1 = v12</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  appConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;k2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // k2 = null</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  appConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;k3&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // k3 = v32</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //NS-Private，由于没有NS-Private Namespace 所以获取到default value</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Config</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> privateConfig </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ConfigService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;NS-Private&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  privateConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;k1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;default value&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //NS-Public</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Config</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> publicConfig </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ConfigService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;NS-Public&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  publicConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;k4&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // k4 = v5</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  publicConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;k6&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // k6 = v6</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  publicConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;k7&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // k7 = v7点击复制错误复制成功</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="应用c获取apollo配置" tabindex="-1"><a class="header-anchor" href="#应用c获取apollo配置"><span>应用C获取Apollo配置</span></a></h5><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //application</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Config</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> appConfig </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ConfigService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAppConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  appConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;k1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // k1 = v12</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  appConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;k2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // k2 = null</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  appConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;k3&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // k3 = v33</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //NS-Private，由于没有NS-Private Namespace 所以获取到default value</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Config</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> privateConfig </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ConfigService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;NS-Private&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  privateConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;k1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;default value&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //NS-Public，公共类型的Namespace，任何项目都可以获取到</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Config</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> publicConfig </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ConfigService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;NS-Public&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  publicConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;k4&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // k4 = v5</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  publicConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;k6&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // k6 = v6</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  publicConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;k7&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // k7 = v7点击复制错误复制成功</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="changelistener" tabindex="-1"><a class="header-anchor" href="#changelistener"><span>ChangeListener</span></a></h5><p>以上代码例子中可以看到，在客户端Namespace映射成一个Config对象。Namespace配置变更的监听器是注册在Config对象上。</p><p>所以在应用A中监听application的Namespace代码如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Config</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> appConfig </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ConfigService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAppConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">appConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addChangeListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ConfigChangeListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onChange</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ConfigChangeEvent</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> changeEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //do something</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在应用A中监听NS-Private的Namespace代码如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Config</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> privateConfig </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ConfigService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;NS-Private&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">privateConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addChangeListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ConfigChangeListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onChange</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ConfigChangeEvent</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> changeEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //do something</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在应用A、应用B、应用C中监听NS-Public的Namespace代码如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Config</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> publicConfig </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ConfigService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;NS-Public&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">publicConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addChangeListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ConfigChangeListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onChange</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ConfigChangeEvent</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> changeEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //do something</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="调整apolloconfigdb配置" tabindex="-1"><a class="header-anchor" href="#调整apolloconfigdb配置"><span><a href="https://www.apolloconfig.com/#/zh/deployment/distributed-deployment-guide?id=_32-%E8%B0%83%E6%95%B4apolloconfigdb%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener noreferrer">调整ApolloConfigDB配置</a></span></a></h1><p>配置项统一存储在ApolloConfigDB.ServerConfig表中，需要注意每个环境的ApolloConfigDB.ServerConfig都需要单独配置，修改完一分钟实时生效。</p><h2 id="namespace-lock-switch-一次发布只能有一个人修改开关-用于发布审核" tabindex="-1"><a class="header-anchor" href="#namespace-lock-switch-一次发布只能有一个人修改开关-用于发布审核"><span><a href="https://www.apolloconfig.com/#/zh/deployment/distributed-deployment-guide?id=_322-namespacelockswitch-%E4%B8%80%E6%AC%A1%E5%8F%91%E5%B8%83%E5%8F%AA%E8%83%BD%E6%9C%89%E4%B8%80%E4%B8%AA%E4%BA%BA%E4%BF%AE%E6%94%B9%E5%BC%80%E5%85%B3%EF%BC%8C%E7%94%A8%E4%BA%8E%E5%8F%91%E5%B8%83%E5%AE%A1%E6%A0%B8" target="_blank" rel="noopener noreferrer">namespace.lock.switch - 一次发布只能有一个人修改开关，用于发布审核</a></span></a></h2><p>这是一个功能开关，如果配置为true的话，那么一次配置发布只能是一个人修改，另一个发布。</p><blockquote><p>生产环境建议开启此选项</p></blockquote><h1 id="服务端配置说明" tabindex="-1"><a class="header-anchor" href="#服务端配置说明"><span>服务端配置说明</span></a></h1><blockquote><p>以下配置除了支持在数据库中配置以外，也支持通过-D参数、application.properties等配置，且-D参数、application.properties等优先级高于数据库中的配置</p></blockquote><h2 id="调整apolloportaldb配置" tabindex="-1"><a class="header-anchor" href="#调整apolloportaldb配置"><span>调整ApolloPortalDB配置</span></a></h2><p>配置项统一存储在ApolloPortalDB.ServerConfig表中，也可以通过<code>管理员工具 - 系统参数</code>页面进行配置，无特殊说明则修改完一分钟实时生效。</p><h3 id="apollo-portal-envs-可支持的环境列表" tabindex="-1"><a class="header-anchor" href="#apollo-portal-envs-可支持的环境列表"><span>apollo.portal.envs - 可支持的环境列表</span></a></h3><p>默认值是dev，如果portal需要管理多个环境的话，以逗号分隔即可（大小写不敏感），如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>DEV,FAT,UAT,PRO</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>名词解释：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>DEV(Development environment)</span></span>
<span class="line"><span>开发环境，用于开发者调试使用</span></span>
<span class="line"><span></span></span>
<span class="line"><span>FAT(Feature Acceptance Test environment)</span></span>
<span class="line"><span>功能验收测试环境，用于软件测试者测试使用</span></span>
<span class="line"><span></span></span>
<span class="line"><span>UAT(User Acceptance Test environment)</span></span>
<span class="line"><span>用户验收测试环境，用于用户测试验收使用</span></span>
<span class="line"><span></span></span>
<span class="line"><span>PRO(Production environment)</span></span>
<span class="line"><span>生产环境</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改完需要重启生效。</p><blockquote><p>注1：一套Portal可以管理多个环境，但是每个环境都需要独立部署一套Config Service、Admin Service和ApolloConfigDB，具体请参考：<a href="https://www.apolloconfig.com/#/zh/deployment/distributed-deployment-guide?id=_212-%E5%88%9B%E5%BB%BAapolloconfigdb" target="_blank" rel="noopener noreferrer">2.1.2 创建ApolloConfigDB</a>，<a href="https://www.apolloconfig.com/#/zh/deployment/distributed-deployment-guide?id=_32-%E8%B0%83%E6%95%B4apolloconfigdb%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener noreferrer">3.2 调整ApolloConfigDB配置</a>，<a href="https://www.apolloconfig.com/#/zh/deployment/distributed-deployment-guide?id=_22112-%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E4%BF%A1%E6%81%AF" target="_blank" rel="noopener noreferrer">2.2.1.1.2 配置数据库连接信息</a>，另外如果是为已经运行了一段时间的Apollo配置中心增加环境，别忘了参考<a href="https://www.apolloconfig.com/#/zh/deployment/distributed-deployment-guide?id=_2124-%E4%BB%8E%E5%88%AB%E7%9A%84%E7%8E%AF%E5%A2%83%E5%AF%BC%E5%85%A5apolloconfigdb%E7%9A%84%E9%A1%B9%E7%9B%AE%E6%95%B0%E6%8D%AE" target="_blank" rel="noopener noreferrer">2.1.2.4 从别的环境导入ApolloConfigDB的项目数据</a>对新的环境做初始化。</p></blockquote><blockquote><p>注2：只在数据库添加环境是不起作用的，还需要为apollo-portal添加新增环境对应的meta server地址，具体参考：<a href="https://www.apolloconfig.com/#/zh/deployment/distributed-deployment-guide?id=_221124-%E9%85%8D%E7%BD%AEapollo-portal%E7%9A%84meta-service%E4%BF%A1%E6%81%AF" target="_blank" rel="noopener noreferrer">2.2.1.1.2.4 配置apollo-portal的meta service信息</a>。apollo-client在新的环境下使用时也需要做好相应的配置，具体参考：<a href="https://www.apolloconfig.com/#/zh/usage/java-sdk-user-guide?id=_122-apollo-meta-server" target="_blank" rel="noopener noreferrer">1.2.2 Apollo Meta Server</a>。</p></blockquote><blockquote><p>注3：如果希望添加自定义的环境名称，具体步骤可以参考<a href="https://www.apolloconfig.com/#/zh/faq/common-issues-in-deployment-and-development-phase?id=_4-portal%E5%A6%82%E4%BD%95%E5%A2%9E%E5%8A%A0%E7%8E%AF%E5%A2%83%EF%BC%9F" target="_blank" rel="noopener noreferrer">Portal如何增加环境</a>。</p></blockquote><blockquote><p>注4：1.1.0版本增加了系统信息页面（<code>管理员工具</code> -&gt; <code>系统信息</code>），可以通过该页面检查配置是否正确</p></blockquote><h1 id="多环境部署" tabindex="-1"><a class="header-anchor" href="#多环境部署"><span>多环境部署</span></a></h1><h2 id="配置apollo-portal的meta-service信息" tabindex="-1"><a class="header-anchor" href="#配置apollo-portal的meta-service信息"><span>配置apollo-portal的meta service信息</span></a></h2><p>Apollo Portal需要在不同的环境访问不同的meta service(apollo-configservice)地址，所以我们需要在配置中提供这些信息。默认情况下，meta service和config service是部署在同一个JVM进程，所以meta service的地址就是config service的地址。</p><blockquote><p>对于1.6.0及以上版本，可以通过ApolloPortalDB.ServerConfig中的配置项来配置Meta Service地址，详见<a href="https://www.apolloconfig.com/#/zh/deployment/distributed-deployment-guide?id=_312-apolloportalmetaservers-%E5%90%84%E7%8E%AF%E5%A2%83meta-service%E5%88%97%E8%A1%A8" target="_blank" rel="noopener noreferrer">apollo.portal.meta.servers - 各环境Meta Service列表</a></p></blockquote><p>使用程序员专用编辑器（如vim，notepad++，sublime等）打开<code>apollo-portal-x.x.x-github.zip</code>中<code>config</code>目录下的<code>apollo-env.properties</code>文件。</p><p>假设DEV的apollo-configservice未绑定域名，地址是192.168.1.5:8080，PRO的apollo-configservice绑定了域名apollo.chuanqu.ltd，那么可以如下修改各环境meta service服务地址，格式为<code>\${env}.meta=http://\${config-service-url:port}</code>，如果某个环境不需要，也可以直接删除对应的配置项（如lpt.meta）：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dev.meta</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=http://1.1.1.1:8080</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fat.meta</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=http://apollo.fat.xxx.com</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">uat.meta</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=http://apollo.uat.xxx.com</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pro.meta</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=http://apollo.xxx.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了通过<code>apollo-env.properties</code>方式配置meta service以外，apollo也支持在运行时指定meta service（优先级比<code>apollo-env.properties</code>高）：</p><ol><li><p>通过Java System Property</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>\${env}_meta</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>可以通过Java的System Property <code>\${env}_meta</code>来指定</li><li>如<code>java -Ddev_meta=http://config-service-url -jar xxx.jar</code></li><li>也可以通过程序指定，如<code>System.setProperty(&quot;dev_meta&quot;, &quot;http://config-service-url&quot;);</code></li></ul></li><li><p>通过操作系统的System Environment</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>\${ENV}_META</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>如<code>DEV_META=http://config-service-url</code></li><li>注意key为全大写，且中间是<code>_</code>分隔</li></ul></li></ol><blockquote><p>注1: 为了实现meta service的高可用，推荐通过SLB（Software Load Balancer）做动态负载均衡</p></blockquote><blockquote><p>注2: meta service地址也可以填入IP，0.11.0版本之前只支持填入一个IP。从0.11.0版本开始支持填入以逗号分隔的多个地址（<a href="https://github.com/apolloconfig/apollo/pull/1214" target="_blank" rel="noopener noreferrer">PR #1214</a>），如<code>http://1.1.1.1:8080,http://2.2.2.2:8080</code>，不过生产环境还是建议使用域名（走slb），因为机器扩容、缩容等都可能导致IP列表的变化。</p></blockquote>`,260)]))}const o=s(l,[["render",t]]),d=JSON.parse('{"path":"/article/6puzyeg6/","title":"2.开源配置管理中心apollo使用方法","lang":"en-US","frontmatter":{"title":"2.开源配置管理中心apollo使用方法","createTime":"2025/05/27 17:51:17","permalink":"/article/6puzyeg6/"},"git":{"createdTime":1749111496000,"updatedTime":1750129445000,"contributors":[{"name":"star","username":"star","email":"star@xgss.net","commits":2,"url":"https://github.com/star"}]},"readingTime":{"minutes":27.55,"words":8265},"filePathRelative":"kaiyuan/Open-Source-Software/2.开源配置管理中心apollo使用方法.md"}');export{o as comp,d as data};
