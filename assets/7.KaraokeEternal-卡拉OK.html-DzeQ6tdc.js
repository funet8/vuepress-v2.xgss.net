import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as n}from"./app-BiQR_lPj.js";const l={};function t(h,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="开源神器-karaokeeternal-自托管无广告-手机点歌-多房间-ktv-docker-一键搭" tabindex="-1"><a class="header-anchor" href="#开源神器-karaokeeternal-自托管无广告-手机点歌-多房间-ktv-docker-一键搭"><span>开源神器 KaraokeEternal：自托管无广告，手机点歌 + 多房间 KTV，Docker 一键搭！</span></a></h1><p>有没有适合家庭派对、小型聚会的 KTV 方案？不要那种满是广告的付费软件，最好能自己管歌曲库，手机点歌还不用装 APP 的？</p><p>今天就给大家安利一款完美匹配这些需求的开源工具 ——KaraokeEternal。它不仅能让你在家轻松开起 KTV 派对，还支持全平台自托管，部署起来也没门槛，新手用 Docker 跟着步骤走就能搞定。</p><p><img src="https://imgoss.xgss.net/picgo-tx2025/QQ_1760273931592.png?tx" alt="img"></p><h2 id="软件核心-开源、轻量、全浏览器化" tabindex="-1"><a class="header-anchor" href="#软件核心-开源、轻量、全浏览器化"><span>软件核心：开源、轻量、全浏览器化</span></a></h2><p>先明确下 KaraokeEternal 的定位：它是一款专注于 “派对场景” 的开源 KTV 系统，核心优势就是 “轻量无负担”—— 不管是点歌的手机端，还是播放的大屏端，全靠浏览器运行，不用额外装任何 APP，对新手和非技术用户特别友好。</p><p>关键信息先摆清楚，方便大家直接上手：</p><ul><li><strong>开源地址</strong>：https://github.com/bhj/KaraokeEternal/（代码可查，无隐私顾虑）</li><li><strong>官方文档</strong>：https://www.karaoke-eternal.com/（详细配置看这里）</li><li><strong>Docker 镜像</strong>：radrootllc/karaoke-eternal（部署首选，省去环境配置麻烦）</li><li><strong>支持平台</strong>：Windows、Mac、Linux，甚至树莓派、群晖 NAS 这类轻量设备都能跑</li></ul><h2 id="二、核心功能-精准踩中派对需求" tabindex="-1"><a class="header-anchor" href="#二、核心功能-精准踩中派对需求"><span>二、核心功能：精准踩中派对需求</span></a></h2><p>用过不少 KTV 工具，KaraokeEternal 最让我觉得 “贴心” 的是，它的功能全是针对实际派对场景设计的，没有花里胡哨的冗余功能：</p><h3 id="_1-格式兼容-音效优化-音质不翻车" tabindex="-1"><a class="header-anchor" href="#_1-格式兼容-音效优化-音质不翻车"><span>1. 格式兼容 + 音效优化，音质不翻车</span></a></h3><p>支持 MP3+G（老卡拉 OK 文件）和 MP4 视频（现在主流的 KTV 视频格式），还能识别 ReplayGain 标签 —— 简单说，就是不管你找的歌曲音量大小不一，播放时会自动统一音量，不用中途手忙脚乱调音量。</p><h3 id="_2-多房间-密码保护-人多也不乱" tabindex="-1"><a class="header-anchor" href="#_2-多房间-密码保护-人多也不乱"><span>2. 多房间 + 密码保护，人多也不乱</span></a></h3><p>朋友多的时候，能开多个同步房间（比如 “华语金曲房”“欧美流行房”），每个房间可以设密码，避免陌生人乱进。每个房间的点歌队列独立，互不干扰。</p><h3 id="_3-动态队列-不用抢麦" tabindex="-1"><a class="header-anchor" href="#_3-动态队列-不用抢麦"><span>3. 动态队列，不用抢麦</span></a></h3><p>点歌不用 “抢”，系统会自动按顺序排，还能调整队列顺序（比如长辈想先唱，直接把歌曲移到前面），既公平又灵活，不会因为抢点歌扫了兴。</p><h3 id="_4-全自托管-无广告-隐私有保障" tabindex="-1"><a class="header-anchor" href="#_4-全自托管-无广告-隐私有保障"><span>4. 全自托管 + 无广告，隐私有保障</span></a></h3><p>所有数据（歌曲库、用户信息）都存在你自己的设备上，没有广告弹窗，也不会收集任何使用数据（官方明确说 “无 telemetry”），不管是家庭用还是小社团用，隐私都放心。</p><h2 id="docker-部署-ubuntu-为例-3-步搞定" tabindex="-1"><a class="header-anchor" href="#docker-部署-ubuntu-为例-3-步搞定"><span>Docker 部署：Ubuntu 为例，3 步搞定</span></a></h2><p>KaraokeEternal 支持多种部署方式，但星哥最推荐 Docker—— 不用管依赖，一键启动，后续升级也方便。下面以 Ubuntu 系统为例，一步步教大家操作：</p><h3 id="第一步-安装-docker-和-docker-compose" tabindex="-1"><a class="header-anchor" href="#第一步-安装-docker-和-docker-compose"><span>第一步：安装 Docker 和 docker-compose</span></a></h3><p>先更新系统，再安装 Docker 和 docker-compose（如果已经装过，可以跳过这步）：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 更新系统软件包</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 安装Docker和docker-compose</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -y</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker.io</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker-compose</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 验证安装成功（出现版本号就没问题）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --version</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --version</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第二步-创建-docker-compose-yml-配置文件" tabindex="-1"><a class="header-anchor" href="#第二步-创建-docker-compose-yml-配置文件"><span>第二步：创建 docker-compose.yml 配置文件</span></a></h3><p>建议在<code>/home</code>目录下创建配置文件，方便后续管理（比如修改路径、升级容器）。先进入 /home 目录，然后创建文件：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 进入/home目录</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /home</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建并编辑docker-compose.yml</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nano</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker-compose.yml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把下面的内容复制进去（注意修改路径，确保符合你的实际需求）：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  karaoke-eternal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 使用官方Docker镜像</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">radrootllc/karaoke-eternal</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 容器名字，方便后续管理</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    container_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">karaoke-eternal</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 数据卷映射：左边是你本地路径，右边是容器内路径</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    volumes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/home/config:/config</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 存放系统配置（比如用户、房间设置）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/home/mnt/karaoke:/mnt/karaoke</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 存放你的KTV歌曲库</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 端口映射：本地8000端口映射到容器8080端口（8000可以改，只要不冲突）</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    ports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">8000:8080</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 重启策略：除非手动停止，否则容器挂了会自动重启</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    restart</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">unless-stopped</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复制完后，按<code>Ctrl+O</code>保存，再按<code>Ctrl+X</code>退出编辑。</p><h3 id="第三步-启动容器-访问系统" tabindex="-1"><a class="header-anchor" href="#第三步-启动容器-访问系统"><span>第三步：启动容器，访问系统</span></a></h3><p>执行下面的命令，启动 KaraokeEternal 容器：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 后台启动容器（-d表示后台运行）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> up</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看容器状态（出现Up就表示启动成功）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> karaoke-eternal</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动成功后，就可以访问了：</p><ul><li><strong>本地访问</strong>：在同一局域网的设备上，打开浏览器输入<code>http://localhost:8000</code>（如果是服务器，把<a href="https://localhost/" target="_blank" rel="noopener noreferrer">localhost</a>换成服务器的局域网 IP）；</li></ul><p>我这边用8002端口</p><p><img src="https://imgoss.xgss.net/picgo-tx2025/image-20251012201353727.png?tx" alt="image-20251012201353727"></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker ps</span></span>
<span class="line"><span>CONTAINER ID   IMAGE                                                           COMMAND                  CREATED          STATUS          PORTS                                                           NAMES</span></span>
<span class="line"><span>003eb9c1e043   radrootllc/karaoke-eternal                                      &quot;karaoke-eternal-ser…&quot;   13 seconds ago   Up 11 seconds   0.0.0.0:8002-&gt;8080/tcp, :::8002-&gt;8080/tcp                       karaoke-eternal</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>云服务器访问</strong>：如果用的是云服务器，需要先在安全组里开放 8000 端口，然后用<code>http://服务器公网IP:8000</code>访问。</li></ul><p><img src="https://imgoss.xgss.net/picgo-tx2025/image-20251012201505300.png?tx" alt="image-20251012201505300"></p><p><img src="https://imgoss.xgss.net/picgo-tx2025/image-20251012202346170.png?tx" alt="image-20251012202346170"></p><h2 id="四、快速体验-不想写配置-一条命令搞定" tabindex="-1"><a class="header-anchor" href="#四、快速体验-不想写配置-一条命令搞定"><span>四、快速体验：不想写配置？一条命令搞定</span></a></h2><p>如果只是想先试试水，不想创建 docker-compose.yml，也可以用一条命令直接启动容器（注意：这种方式适合体验，正式用还是建议用 docker-compose，方便后续管理）：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    --name=karaoke-eternal</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /home/config:/config</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /home/mnt/karaoke:/mnt/karaoke</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 8000:8080</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    --restart</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> unless-stopped</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    radrootllc/karaoke-eternal</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、使用小贴士-让体验更丝滑" tabindex="-1"><a class="header-anchor" href="#五、使用小贴士-让体验更丝滑"><span>五、使用小贴士：让体验更丝滑</span></a></h2><ol><li>**歌曲库怎么加？**把下载好的 MP3+G 或 MP4 格式歌曲，放到<code>/home/mnt/karaoke</code>目录（就是你配置里映射的歌曲库路径），系统会自动扫描，不用手动添加。</li><li>**手机点歌怎么操作？**手机和服务器连同一局域网，打开浏览器输入服务器地址，登录后选一个房间，搜索歌曲、加入队列就行 —— 界面是响应式的，手机上点起来很顺手。</li><li>**麦克风怎么弄？**KaraokeEternal 的播放器只输出音乐，麦克风需要自己配（比如用蓝牙麦克风、外接麦克风），这样你可以根据自己的预算搭配音频设备，灵活度很高。</li><li>**遇到问题找谁？**官方有 Discord 社区（https://discord.com/invite/PgqVtFq），可以去里面问问题，也能和其他用户交流歌曲库资源；GitHub 上也能提 Issue，作者响应挺及时的。</li></ol><h2 id="六、总结-谁适合用-karaokeeternal" tabindex="-1"><a class="header-anchor" href="#六、总结-谁适合用-karaokeeternal"><span>六、总结：谁适合用 KaraokeEternal？</span></a></h2><p>如果你需要一款 “无广告、可控性强、部署简单” 的 KTV 工具，不管是家庭聚会、朋友派对，还是小社团活动，KaraokeEternal 都很合适 —— 它没有复杂的设置，开源免费，还能自己管歌曲库，完全不用被付费软件 “绑架”。</p>`,47)]))}const p=i(l,[["render",t]]),d=JSON.parse('{"path":"/kaiyuan2025/7.KaraokeEternal-%E5%8D%A1%E6%8B%89OK.html","title":"开源神器 KaraokeEternal：自托管无广告，手机点歌 + 多房间 KTV，Docker 一键搭！","lang":"en-US","frontmatter":{},"git":{"createdTime":1761192011000,"updatedTime":1761192011000,"contributors":[{"name":"star","username":"star","email":"star@xgss.net","commits":1,"url":"https://github.com/star"}]},"readingTime":{"minutes":5.63,"words":1689},"filePathRelative":"kaiyuan2025/7.KaraokeEternal-卡拉OK.md"}');export{p as comp,d as data};
