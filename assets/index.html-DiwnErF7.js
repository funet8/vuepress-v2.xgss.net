import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as p}from"./app-BiQR_lPj.js";const t={};function l(n,i){return p(),e("div",null,i[0]||(i[0]=[a('<h1 id="【redis必备的基础知识】-redis中的数据结构" tabindex="-1"><a class="header-anchor" href="#【redis必备的基础知识】-redis中的数据结构"><span>【Redis必备的基础知识】-Redis中的数据结构</span></a></h1><h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h1><p>Redis作为一款高性能的键值对数据库，其丰富的数据结构是其灵活性的关键。本文将介绍Redis中的五种基本数据结构，并结合实际应用场景，帮助您更好地掌握Redis。</p><p><img src="https://imgoss.xgss.net/picgo/image-20241225163049638.png?aliyun" alt=""></p><p>Redis提供了五种主要的数据类型，它提供了强大且实用的功能，然而实际开发中，有大多数的开发者仅仅只会使用简单的 Redis String的 Get和Set</p><ul><li>String - 字符串</li><li>Hash - 哈希</li><li>List - 列表</li><li>Set - 集合</li><li>Sort Set - 有序集合</li><li>其它数据结构</li></ul><h1 id="字符串-string" tabindex="-1"><a class="header-anchor" href="#字符串-string"><span>字符串-String</span></a></h1><p><strong>最简单的类型</strong>：存储各种格式的数据，如数字、字符串等。</p><p>字符串类型是Redis最基础的数据结构，其他几种数据结构都是在字符串类型基础上构建的。字符串类型的值是字符串（简单的字符串、复杂的字符串（例如JSON、XML））、数字（整数、浮点数），甚至是二进制（图片、音频、视频）等。</p><p><img src="https://imgoss.xgss.net/picgo/image-20200626095844113.png?aliyun" alt="image-20200626095844113"></p><p>字符串对象的内部编码有3种 ：<strong>int</strong>、<strong>raw</strong> 和 <strong>embstr</strong>，Redis会根据当前值的类型和长度来决定使用哪种编码来实现</p><ul><li>int：如果一个字符串对象保存的是整数值,并且这个整数值可以用<code>long</code>类型来表示</li><li>raw：如果字符串对象保存的是一个字符串值,并且这个字符串值的长度大于32字节</li><li>embstr：如果字符串对象保存的是一个字符串值,并且这个字符申值的长度小于等于32字节</li></ul><h2 id="字符串-应用场景" tabindex="-1"><a class="header-anchor" href="#字符串-应用场景"><span>字符串-应用场景</span></a></h2><p>Reids字符串的使用场景是最为广泛的，甚至有些对redis其它几种对象不太熟悉的人，基本所有场景都会使用字符串(序列化一下直接扔进去),这让本身很单纯的字符串承受了它这个年纪本不该承受的重量。其实Redis的主要使用场景主要有以下几种:</p><ul><li><p>作为缓存层,缓存热点数据</p></li><li><p>计数器：实现网站访问量统计、点赞数、限速器、自增ID生成等。</p></li><li><p>分布式系统的Session共享</p></li><li><p>二进制数据的存储</p></li><li><p>简单队列：使用LPUSH和RPOP命令实现简单的消息队列。</p></li><li><p>缓存：缓存用户信息、商品信息等。</p></li></ul><h1 id="哈希-hash" tabindex="-1"><a class="header-anchor" href="#哈希-hash"><span>哈希-Hash</span></a></h1><p>哈希对象用来存储一组数据对。每个数据对又包含键值两部分</p><p><img src="https://imgoss.xgss.net/picgo/image-20200626101327742.png?aliyun" alt="image-20200626101327742"></p><p>Hash对象也有两种实现方式：ziplist（压缩列表）和 hashtable（哈希表）</p><p>同样，只有当存储的数据量比较小的情况下，Redis才使用压缩列表来实现哈希对象，具体需要满足两个条件</p><ul><li>字典中保存的键和值的大小都要小于64字节</li><li>字典中键值对的个数要小于512个</li></ul><p>当不能同时满足上面的两个条件时，Redis就使用哈希表来实现Hash对象</p><p>当存储的内容是对象的时候，Redis字符串对象很多功能使用Redis 哈希对象也可以实现，如缓存用户信息的时候，使用Redis哈希对象存储，简单直观，如果使用合理可以减少内存空间的使用。</p><p>但是也有其缺点，就是要控制哈希在ziplist和hashtable两种内部编码的转换，hashtable将会消耗更多的内存。</p><h2 id="哈希-应用场景" tabindex="-1"><a class="header-anchor" href="#哈希-应用场景"><span>哈希-应用场景</span></a></h2><ul><li>存储用户信息：将一个用户的所有信息存储在一个哈希中。</li><li>缓存对象：将一个复杂对象序列化为哈希存储。</li></ul><h1 id="列表-list" tabindex="-1"><a class="header-anchor" href="#列表-list"><span>列表-List</span></a></h1><p>列表这种对象支持存储一组有序的，不重复的数据。因为其有序性，它可以获取指定范围的元素列表，可以在O(1)的时间复杂度获取指定索引的下标的元素等。</p><p><img src="https://imgoss.xgss.net/picgo/image-20200626105857594.png?aliyun" alt="image-20200626105857594"></p><p>在Redis3.2版本以前列表类型的内部编码有两种。当满足下面两个条件的时候，Redis 列表对象使用ziplist（压缩列表）来实现。</p><ul><li>当列表的元素个数小于list-max-ziplist-entries配置（默认512个）</li><li>当列表中每个元素的值都小于list-max-ziplist-value配置时（默认64字节）</li></ul><p>当列表类型无法满足ziplist条件时，Redis会使用linkedList作为列表的内部实现。</p><p>而在Redis3.2版本开始怼列表数据结构进行改造，使用quickList代替了zipList和linkedList。</p><p>由于列表对象的有序且不可重复的特性，它比较适合用来做文章、商品等列表的存储。</p><p>列表类型可以lpush（左侧push），同时又可以使用rpop（右侧弹出）第一个元素，所以列表类型具有先进先出的特性，可以用来实现消息队列，也可以lpush（左侧push）和lpop（左侧弹出），具有后进先出的特性，因此开发中需要使用栈的时候，我们可以使用列表对象来实现。</p><h2 id="列表-应用场景" tabindex="-1"><a class="header-anchor" href="#列表-应用场景"><span>列表-应用场景</span></a></h2><ul><li>消息队列：实现生产者消费者模型。</li><li>微博评论列表：按照时间顺序存储评论。</li></ul><h1 id="集合-set" tabindex="-1"><a class="header-anchor" href="#集合-set"><span>集合-Set</span></a></h1><p>集合对象是一个无序且唯一的键值集合。它的存储顺序不会按照插入的先后顺序进行存储，与列表不同的是它存储的数据是无序且不重复的。</p><p><img src="https://imgoss.xgss.net/picgo/image-20200626122033221.png?aliyun" alt="image-20200626122033221"></p><p>集合对象的内部编码也有两种，intest（整数集合）与hashtable（哈希表），当满足下面两个条件的时候，集合对象使用intset来实现</p><ul><li>集合中的元素都是整数</li><li>集合中元素的个数小于 set-maxintset-entries配置（默认512个）</li></ul><p>不满足上面两个条件时，集合对象使用hashtable来实现</p><p>集合对象的主要两个特性就是：<strong>无序</strong>，<strong>不可重复</strong>，<strong>支持并交差</strong>，因此可以用来做标签系统</p><p>而集合中的 SPOP(随机移除并返回集合中一个或多个元素) 和 SRANDMEMBER(随机返回集合中一个或多个元素) 命令可以帮助我们实现一个抽奖系统</p><h2 id="集合-应用场景" tabindex="-1"><a class="header-anchor" href="#集合-应用场景"><span>集合-应用场景</span></a></h2><ul><li>标签系统：存储用户标签。</li><li>共同好友：存储两个用户共同的好友。</li></ul><h1 id="有序集合-sort-set" tabindex="-1"><a class="header-anchor" href="#有序集合-sort-set"><span>有序集合-Sort Set</span></a></h1><p>有序集合类型 (Sorted Set或ZSet) 相比于集合类型多了一个排序属性 score（分值），对于有序集合 ZSet 来说，每个存储元素相当于有两个值组成的，一个是有序结合的元素值，一个是排序值。有序集合保留了集合不能有重复成员的特性(分值可以重复)，但不同的是，有序集合中的元素可以排序。</p><p><img src="https://imgoss.xgss.net/picgo/image-20200626123309037.png?aliyun" alt="image-20200626123309037"></p><p>有序集合是由 ziplist (压缩列表) 或 skiplist (跳跃表) 组成的。</p><p>当数据比较少时，有序集合使用的是 ziplist 存储的，有序集合使用 ziplist 格式存储必须满足以下两个条件：</p><ul><li>有序集合保存的元素个数要小于 128 个；</li><li>有序集合保存的所有元素成员的长度都必须小于 64 字节。</li></ul><p>如果不能满足以上两个条件中的任意一个，有序集合将会使用 skiplist 结构进行存储。</p><p>有序集合比较典型的使用场景就是排行榜系统例如学生成绩的排名。某视频(博客等)网站的用户点赞、播放排名、电商系统中商品的销量排名等。</p><h1 id="其它数据结构" tabindex="-1"><a class="header-anchor" href="#其它数据结构"><span>其它数据结构</span></a></h1><p>Bitmaps：以bit为单位存储数据，高效地操作位数组。</p><p>位图是一种通过操作二进制位来进行数据存储和操作的数据结构。位图可以高效地存储大量的布尔值，并支持对这些布尔值进行快速的设置、获取和统计等操作。常见的应用场景包括用户签到状态、在线状态等。</p><p>HyperLogLog：用于估算基数，即集合中不重复元素的数量。</p><p>HyperLogLog是一种用于基数估计的算法，它可以在不知道数据集完整大小的情况下，对数据集的基数进行高效的估算。HyperLogLog通过牺牲一定的精度来换取存储空间的节省和计算效率的提高。常见的应用场景包括用户访问量统计、网站UV统计等。</p><p>Geo：存储地理位置信息，支持范围查询、距离计算等。</p><p>地理位置是用于存储和操作地理位置信息的一种数据结构。Redis的地理位置类型支持对地理位置进行添加、查询、计算距离等操作。常见的应用场景包括附近的人、地点推荐等。</p><p>Stream：用于构建消息流，支持持久化、消费者组等特性。</p><h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h1><p>Redis的数据结构非常丰富，每种数据结构都有其独特的应用场景。合理选择数据结构可以大大提高应用程序的性能和开发效率。</p>',65)]))}const d=s(t,[["render",l]]),o=JSON.parse('{"path":"/article/oxdiiwg0/","title":"redis-Redis中的数据结构","lang":"en-US","frontmatter":{"title":"redis-Redis中的数据结构","createTime":"2025/05/27 17:51:17","permalink":"/article/oxdiiwg0/"},"git":{"createdTime":1749111496000,"updatedTime":1750129445000,"contributors":[{"name":"star","username":"star","email":"star@xgss.net","commits":2,"url":"https://github.com/star"}]},"readingTime":{"minutes":7.77,"words":2332},"filePathRelative":"mysql/redis-Redis中的数据结构.md"}');export{d as comp,o as data};
