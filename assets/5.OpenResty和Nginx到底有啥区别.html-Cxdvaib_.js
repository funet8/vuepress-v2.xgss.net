import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as i}from"./app-BiQR_lPj.js";const l={};function p(t,n){return i(),a("div",null,n[0]||(n[0]=[e(`<h1 id="openresty-和-nginx-到底有啥区别-你真的了解吗" tabindex="-1"><a class="header-anchor" href="#openresty-和-nginx-到底有啥区别-你真的了解吗"><span>OpenResty 和 Nginx 到底有啥区别？你真的了解吗！</span></a></h1><p>大家好，我是星哥。今天我们来聊聊 OpenResty 和 Nginx 这两个看似相似、实则大有不同的技术。很多小伙伴可能觉得 OpenResty 无非就是集成了 Lua 的 Nginx，但事实真的如此吗？让我们一起来深入探究一下！</p><h2 id="_1-简单认识-nginx-和-openresty" tabindex="-1"><a class="header-anchor" href="#_1-简单认识-nginx-和-openresty"><span>1. 简单认识 Nginx 和 OpenResty</span></a></h2><p>先来快速了解一下这两个技术的基本背景。</p><h3 id="nginx-是什么" tabindex="-1"><a class="header-anchor" href="#nginx-是什么"><span>Nginx 是什么？</span></a></h3><p>Nginx 是一款高性能的 HTTP 和反向代理服务器，同时支持 IMAP/POP3 协议。它以<strong>高并发、低内存占用、稳定性强</strong>著称，以其高并发处理能力和低内存消耗闻名。它采用事件驱动的异步非阻塞架构，特别适合处理大量并发连接。是全球最流行的 Web 服务器之一。 常见用途包括：</p><ul><li>静态资源服务（HTML、CSS、JS、图片等）</li><li>反向代理与负载均衡</li><li>简单的访问控制与缓存</li></ul><h3 id="openresty-是什么" tabindex="-1"><a class="header-anchor" href="#openresty-是什么"><span>OpenResty 是什么？</span></a></h3><p>OpenResty 是基于 Nginx 的<strong>全功能 Web 平台</strong>，它不仅仅是一个服务器，更是一个<strong>可编程的高性能应用框架</strong>。<br> 它的核心亮点是<strong>内置 Lua 脚本支持</strong>，并集成了大量高质量的第三方模块，让你可以在 Nginx 的事件驱动架构上直接编写业务逻辑。</p><p>诞生背景：OpenResty 由中国开发者章亦春（agentzh）于 2009 年创建，初衷是为了解决 Nginx 在动态业务处理中的不足。通过将 LuaJIT（高性能 Lua 编译器）与 Nginx 深度结合，开发者可以直接在请求处理流程中编写业务逻辑，无需依赖外部服务或复杂的 C 模块开发。</p><p><strong>Nginx 是个高效的&quot;交通警察&quot;</strong>，主要负责请求的转发和调度；</p><p><strong>OpenResty 则是个&quot;全能选手&quot;</strong>，既能做交通指挥，还能处理具体的业务任务(比如WAF功能)</p><p>简单理解：</p><blockquote><p><strong>OpenResty = Nginx + Lua + 一堆强大模块</strong></p></blockquote><p><img src="https://imgoss.xgss.net/picgo-tx2025/QQ_1757041014338.png?tx" alt="img"></p><h2 id="_2-核心差异对比" tabindex="-1"><a class="header-anchor" href="#_2-核心差异对比"><span>2. 核心差异对比</span></a></h2><p>让我们通过一个表格来直观对比两者的主要区别：</p><table><thead><tr><th>维度</th><th>Nginx</th><th>OpenResty</th></tr></thead><tbody><tr><td>功能定位</td><td>高性能静态服务器/反向代理</td><td>动态应用平台 + 全功能网关</td></tr><tr><td>编程能力</td><td>仅支持 C 模块开发</td><td>原生 Lua 脚本，支持热加载</td></tr><tr><td>业务逻辑处理</td><td>依赖外部服务或复杂模块扩展</td><td>直接在请求流程中嵌入 Lua 代码</td></tr><tr><td>中间件交互</td><td>需通过反向代理调用外部服务</td><td>内置库直连 Redis/MySQL/Kafka</td></tr><tr><td>典型场景</td><td>静态资源托管、负载均衡</td><td>动态 API 网关、边缘计算、WAF</td></tr><tr><td>开发效率</td><td>低（需编译 C 代码）</td><td>高（Lua 脚本即时生效）</td></tr><tr><td>性能开销</td><td>极低（纯 C 实现）</td><td>接近 Nginx（LuaJIT 高效编译）</td></tr></tbody></table><h4 id="示例对比-实现一个-按用户身份动态路由-的功能" tabindex="-1"><a class="header-anchor" href="#示例对比-实现一个-按用户身份动态路由-的功能"><span>示例对比：实现一个“按用户身份动态路由”的功能</span></a></h4><ul><li>Nginx 方案： 需编写 C 模块解析请求头，或通过反向代理调用外部鉴权服务，延迟高且架构复杂。</li><li>OpenResty 方案： 在 access_by_lua_block 阶段编写 10 行 Lua 代码，直接读取 Redis 中的路由规则，动态转发请求。</li></ul><h2 id="_3-关键技术差异详解" tabindex="-1"><a class="header-anchor" href="#_3-关键技术差异详解"><span>3. 关键技术差异详解</span></a></h2><h3 id="_3-1-架构设计理念" tabindex="-1"><a class="header-anchor" href="#_3-1-架构设计理念"><span>3.1 架构设计理念</span></a></h3><p>Nginx 的核心设计理念是<strong>高效处理网络I/O</strong>，它的主要优势在于：</p><ul><li>事件驱动的异步非阻塞架构</li><li>高度模块化的设计</li><li>低内存消耗和高并发能力</li></ul><p>OpenResty 在 Nginx 的基础上，引入了<strong>可编程性</strong>的理念：</p><ul><li>内置 LuaJIT 虚拟机</li><li>提供丰富的 Lua API 和第三方库</li><li>支持在请求处理的各个阶段注入自定义逻辑</li></ul><h3 id="_3-2-编程模式差异" tabindex="-1"><a class="header-anchor" href="#_3-2-编程模式差异"><span>3.2 编程模式差异</span></a></h3><p>这是两者最根本的区别。来看个例子：</p><p><strong>Nginx 配置示例</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>location /api {</span></span>
<span class="line"><span>    proxy_pass http://backend;</span></span>
<span class="line"><span>    proxy_set_header X-Real-IP $remote_addr;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>OpenResty 示例</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>location /api {</span></span>
<span class="line"><span>    access_by_lua_block {</span></span>
<span class="line"><span>        -- 复杂的认证逻辑</span></span>
<span class="line"><span>        if ngx.var.remote_addr == &quot;192.168.1.1&quot; then</span></span>
<span class="line"><span>            ngx.exit(ngx.HTTP_FORBIDDEN)</span></span>
<span class="line"><span>        end</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    content_by_lua_block {</span></span>
<span class="line"><span>        -- 业务处理逻辑</span></span>
<span class="line"><span>        local res = ngx.location.capture(&quot;/backend&quot;)</span></span>
<span class="line"><span>        ngx.say(res.body)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到区别了吗？Nginx 主要通过配置指令来实现功能，而 OpenResty 则可以通过 Lua 脚本实现任意复杂的业务逻辑。</p><h3 id="_3-3-性能特点" tabindex="-1"><a class="header-anchor" href="#_3-3-性能特点"><span>3.3 性能特点</span></a></h3><ul><li><p><strong>Nginx</strong>：作为一个轻量级的Web服务器，Nginx 本身在静态内容的处理和反向代理方面表现优秀。它能够处理成千上万的并发连接，且内存消耗极低，适合做负载均衡、反向代理等高并发场景。</p></li><li><p><strong>OpenResty</strong>：OpenResty 在继承 Nginx 的高性能基础上，通过 Lua 脚本支持实现了更高的扩展性和定制化。其采用 LuaJIT（Just-in-time编译器）技术，使得 Lua 脚本的执行效率接近于C语言。这使得 OpenResty 在高并发下依然能够保持优异的性能。</p></li></ul><p>虽然两者都基于相同的核心，但由于 OpenResty 需要运行 Lua 代码，在某些场景下会有额外的开销：</p><ul><li><strong>纯代理场景</strong>：Nginx 性能略优</li><li><strong>需要复杂逻辑处理的场景</strong>：OpenResty 优势明显，避免了多次代理转发</li></ul><h2 id="_4-如何选择-什么时候用哪个" tabindex="-1"><a class="header-anchor" href="#_4-如何选择-什么时候用哪个"><span>4. 如何选择：什么时候用哪个？</span></a></h2><h3 id="_4-1-选择-nginx-的场景" tabindex="-1"><a class="header-anchor" href="#_4-1-选择-nginx-的场景"><span>4.1 选择 Nginx 的场景</span></a></h3><ul><li>静态资源托管：分发 HTML/CSS/JS 文件或图片。</li><li>基础反向代理：将请求转发到后端 Tomcat、Node.js 服务。</li><li>SSL 终结与缓存：配置 HTTPS 和缓存策略。</li><li>简单负载均衡：使用轮询、权重分配等基础策略。</li></ul><h3 id="_4-2-选择-openresty-的场景" tabindex="-1"><a class="header-anchor" href="#_4-2-选择-openresty-的场景"><span>4.2 选择 OpenResty 的场景</span></a></h3><ul><li>动态流量管控：根据实时流量调整限流阈值或熔断策略。</li><li>边缘业务逻辑：在请求到达后端前完成数据脱敏、请求校验。</li><li>轻量级微服务：直接操作数据库实现 API（如 GET /user/:id）。</li><li>安全防护：通过 Lua 脚本实现自定义 WAF 规则。</li></ul><h2 id="_5-实际应用案例" tabindex="-1"><a class="header-anchor" href="#_5-实际应用案例"><span>5. 实际应用案例</span></a></h2><p>举个例子：某电商平台使用 OpenResty 实现了一个高性能的API网关：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>location ~ ^/api/(.*) {</span></span>
<span class="line"><span>    access_by_lua_block {</span></span>
<span class="line"><span>        -- JWT token验证</span></span>
<span class="line"><span>        local auth = require(&quot;resty.jwt&quot;)</span></span>
<span class="line"><span>        local jwt = auth:verify(ngx.var.arg_token)</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>        -- 限流检查</span></span>
<span class="line"><span>        local limiter = require &quot;resty.limit.req&quot;</span></span>
<span class="line"><span>        local lim = limiter.new(&quot;my_limit&quot;, 100, 200) -- 100r/s, 200 burst</span></span>
<span class="line"><span>        local delay, err = lim:incoming(ngx.var.remote_addr, true)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    content_by_lua_block {</span></span>
<span class="line"><span>        -- 参数验证和转换</span></span>
<span class="line"><span>        -- 服务路由</span></span>
<span class="line"><span>        -- 响应格式统一处理</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    log_by_lua_block {</span></span>
<span class="line"><span>        -- 访问日志记录</span></span>
<span class="line"><span>        -- 监控指标上报</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种复杂逻辑如果只用 Nginx 来实现，可能需要多个模块配合外加外部服务，而在 OpenResty 中可以一站式解决。</p><h2 id="_6-总结" tabindex="-1"><a class="header-anchor" href="#_6-总结"><span>6. 总结</span></a></h2><p>Nginx 和 OpenResty 虽然同源，但定位和能力有着本质区别：</p><ul><li><strong>Nginx</strong> 是高性能的Web服务器和代理，适合网络层处理</li><li><strong>OpenResty</strong> 是全功能的Web应用平台，适合业务逻辑处理</li></ul><p>选择哪个取决于你的具体需求。如果你的应用只需要简单的转发和负载均衡，Nginx 就足够了；如果需要处理复杂业务逻辑，或者想要在网关层实现更多功能，那么 OpenResty 是更好的选择。</p><p>记住：<strong>技术选型没有银弹，最适合的才是最好的</strong>。</p><p>希望这篇文章能帮助你更好地理解 OpenResty 和 Nginx 的区别。如果有任何问题，欢迎在评论区留言讨论！</p>`,52)]))}const c=s(l,[["render",p]]),o=JSON.parse('{"path":"/linux-basis2025/5.OpenResty%E5%92%8CNginx%E5%88%B0%E5%BA%95%E6%9C%89%E5%95%A5%E5%8C%BA%E5%88%AB.html","title":"OpenResty 和 Nginx 到底有啥区别？你真的了解吗！","lang":"en-US","frontmatter":{},"git":{"createdTime":1760001321000,"updatedTime":1760001321000,"contributors":[{"name":"star","username":"star","email":"star@xgss.net","commits":1,"url":"https://github.com/star"}]},"readingTime":{"minutes":5.91,"words":1773},"filePathRelative":"linux-basis2025/5.OpenResty和Nginx到底有啥区别.md"}');export{c as comp,o as data};
