import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as s,o as n}from"./app-BiQR_lPj.js";const t={};function r(c,a){return n(),e("div",null,a[0]||(a[0]=[s('<h1 id="负载均衡和cdn技术" tabindex="-1"><a class="header-anchor" href="#负载均衡和cdn技术"><span>负载均衡和CDN技术</span></a></h1><p>曾经见到知乎上有人问“为什么像facebook这类的网站需要上千个工程师维护？”</p><p>下面的回答多种多样，但总结起来就是：一个高性能的web系统需要从无数个角度去考虑他，大到服务器的布局，小到软件中某个文件的实现，甚至于某个循环内的运算如果出现不严谨都可能导致全盘崩溃。</p><p>上面提到web性能优化需要多个角度去考虑，我们无法考虑到所有的优化细节，但可以从我们已知的层面去优化，我们就先从网络层面说起。</p><p>①网络请求路径:</p><blockquote><p>（客户端输入URL定位符）→（DNS服务器寻找映射）→（进入服务器，处理数据）→（返回数据至客户端）</p></blockquote><p>在这个用例中我们可以很清晰的看出网络请求到返回的过程，虽然非常抽象，但足够我们以他为基础来进行优化了。</p><h4 id="_1-负载均衡" tabindex="-1"><a class="header-anchor" href="#_1-负载均衡"><span>1）负载均衡</span></a></h4><blockquote><p>BOSS一次给了小明好多项任务，小明发现怎么安排时间也做不完，于是乎他盯上了在旁边偷偷看电影的小强，小强突然觉得背后有一股凉气，一回头小明一脸坏笑看着他</p><p>“这几个任务交给你，晚上请你吃饭，要不然…嘿嘿嘿”，小强虽然不情愿，但是在小明的请求（要挟）下，只能服从。</p><p>第二天，小明顺利的完成了任务，给小强买了袋辣条。</p></blockquote><p>在计算机上负载均衡也类似如此，我们的大BOSS客户端将请求发送至服务器，然而一台服务器是无法承受很高的并发量的，我们就会将请求转发到其他服务器。</p><p>当然真正的负载均衡架构并不是由一台server转发的另一台server，而在客户端与服务器端中间加入了一个负责分配请求的负载均衡硬件（软件）。</p><h5 id="dns" tabindex="-1"><a class="header-anchor" href="#dns"><span>DNS</span></a></h5><blockquote><p>名词：DNS是客户端发送请求中一个非常重要的中转，他的作用是将用户请求的URL映射为具体的IP地址，全世界有13台根服务器，但通常为我们进行域名解析的并不是根服务器，而是直接访问我们的 LDNS（Local DNS Server），通常由网络运营商维护。</p></blockquote><p>最早的负载均衡就是利用搭建本地DNS服务器实现的，实现方式简单易懂，为同一个主机名分配多个映射 ，可采用轮循，随机等方式分配请求。</p><p>看上去没什么问题，但是在使用过程中会发现，如果其中一个地址down机，我们是无法及时发现的，如果有用户被分配到这个主机就会出现访问失败的状况，同时我们也无法判断每个server的负载，可能会出现，某个server几乎闲置，另外一个server负载压力极高的情况。</p><p><img src="https://imgoss.xgss.net/picgo/6ac2304f0d6a4a319fe427434db88158.png?aliyun" alt="「干货」负载均衡&amp;CDN技术"></p><h5 id="硬件设备" tabindex="-1"><a class="header-anchor" href="#硬件设备"><span>硬件设备</span></a></h5><blockquote><p>名词：负载均衡器（Load Balancer），负载均衡器通常作为独立的硬件置于客户端与服务器之间。</p></blockquote><p>负载均衡设备拥有非常好的负载均衡性能，他拥有众多的负载均衡策略（权重，动态比率，最快模式，最小连接数等），可以保证以相对较优的方式分配请求。</p><p>不过好的东西总是有代价的，那就是价格，一台负载均衡器的售价往往高达十几万甚至几十万，许多企业并不愿意为它买单。</p><h5 id="反向代理" tabindex="-1"><a class="header-anchor" href="#反向代理"><span>反向代理</span></a></h5><blockquote><p>名词：Nginx。高性能，轻量级，已经成了人们对Nginx的第一印象，Nginx可作为HTTP服务器，在处理高并发请求的时候拥有比现在主流的Apache服务器更高的性能，同时Nginx也是一个优秀的反向代理服务器。</p></blockquote><p>第一次听到“反向代理”，可能有些陌生，但如果了解与之对应的正向代理就很好理解了，正向代理通常由客户端主动链接，比如我们的科学的上网方式就是使用正向代理，以达到间接访问网站的目。</p><p>而反向代理在服务器端，无需主动链接，当我们访问拥有反向代理的网站时，实际访问的是其反向代理服务器，而非真正的服务器，当请求到达反向代理服务器时，反向代理服务器再将请求转发至服务器。</p><p>反向代理是实现负载均衡的主流手段之一，通常使用Nginx等服务器搭建，Nginx同样拥有众多的分配策略，以保证平均分配压力。</p><p><img src="https://imgoss.xgss.net/picgo/af522235f87744819540bdd27f56fc9d.png?aliyun" alt="「干货」负载均衡&amp;CDN技术"></p><p><strong>Nginx反向代理：</strong></p><p><img src="https://imgoss.xgss.net/picgo/c4e87d969cf14aed87a1ab3c3bcc1a24.jpeg?aliyun" alt="「干货」负载均衡&amp;CDN技术"></p><p></p><p><strong>BIGIP（硬件）负载均衡：</strong></p><p><img src="https://imgoss.xgss.net/picgo/39974005a5ef4bc6a3ef060a5579557c.jpeg?aliyun" alt="「干货」负载均衡&amp;CDN技术"></p><h4 id="_2-cdn" tabindex="-1"><a class="header-anchor" href="#_2-cdn"><span>2）CDN</span></a></h4><p>视频总在缓冲，图片各种加载不出来，几年前是再正常不过的事了，在当时大家也没觉得是回事，但把这种情况放在现在，我想人们绝对直接就小红叉了吧，那么我们如何避免这样的情况呢？这就是我要说的，内容分发网络（Content Delivery Network），简称：CDN。</p><p>CDN简单的来说就是存储一些静态文件的一台或多台服务器，通过复制，缓存等方式，将文件保存其中。</p><h5 id="_1-哪些是静态文件" tabindex="-1"><a class="header-anchor" href="#_1-哪些是静态文件"><span>1.哪些是静态文件？</span></a></h5><p>css，html，图片，媒体都属于静态文件，也就是说用户发送的请求不会影响静态文件的内容，而jsp，php等文件就不属于静态文件，因为他们的内容会因我们的请求而发生改变。</p><h5 id="_2-cdn如何实现加速" tabindex="-1"><a class="header-anchor" href="#_2-cdn如何实现加速"><span>2.CDN如何实现加速？</span></a></h5><p>通常情况下，我们所要的数据都是从主服务器中获取，但假如我们的主服务器在南方，而访问用户在北方，那么访问速度就会相对变慢，变慢的原因有很多，例如传输距离，运营商，带宽等等因素，而使用CDN技术的话，我们会将CDN节点分布在各地，当用户发送请求到达服务器时，服务器会根据用户的区域信息，为用户分配最近的CDN服务器。</p><h5 id="_3-cdn数据从哪里来" tabindex="-1"><a class="header-anchor" href="#_3-cdn数据从哪里来"><span>3.CDN数据从哪里来？</span></a></h5><p>复制，缓存，CDN服务器可以在用户请求后缓存文件，也可以主动抓取主服务器内容。</p><p><strong>分布在各地的CDNS：</strong></p><p><img src="https://imgoss.xgss.net/picgo/71485d4bf24b4f2a816d81b865fa8a75.png?aliyun" alt="「干货」负载均衡&amp;CDN技术"></p>',42)]))}const d=p(t,[["render",r]]),h=JSON.parse('{"path":"/article/7hstc3ot/","title":"负载均衡和CDN技术","lang":"en-US","frontmatter":{"title":"负载均衡和CDN技术","createTime":"2025/05/27 17:51:17","permalink":"/article/7hstc3ot/"},"git":{"createdTime":1749111496000,"updatedTime":1750129445000,"contributors":[{"name":"star","username":"star","email":"star@xgss.net","commits":2,"url":"https://github.com/star"}]},"readingTime":{"minutes":5.73,"words":1719},"filePathRelative":"linux-basis/负载均衡和CDN技术.md"}');export{d as comp,h as data};
