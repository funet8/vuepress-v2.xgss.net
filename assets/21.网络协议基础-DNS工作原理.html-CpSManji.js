import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as n,o as s}from"./app-BiQR_lPj.js";const o={};function t(i,a){return s(),r("div",null,a[0]||(a[0]=[n('<h1 id="网络协议基础-dns-工作原理" tabindex="-1"><a class="header-anchor" href="#网络协议基础-dns-工作原理"><span>网络协议基础：DNS 工作原理</span></a></h1><h2 id="_1-dns-的定义和作用" tabindex="-1"><a class="header-anchor" href="#_1-dns-的定义和作用"><span>1. DNS 的定义和作用</span></a></h2><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><p>DNS，即域名系统（Domain Name System），是互联网中的一项核心基础设施服务，它如同互联网的 “地址簿”，负责将人类易于记忆的域名（如 www.baidu.com）转换为计算机能够识别和处理的 IP 地址（如 180.101.50.188）。在互联网通信中，计算机之间的通信依赖于 IP 地址，但域名更符合人类的记忆习惯，DNS 正是在域名与 IP 地址之间搭建起了一座转换的桥梁，保障了互联网服务的顺畅访问。</p><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h3><h4 id="_1-地址解析" tabindex="-1"><a class="header-anchor" href="#_1-地址解析"><span>1）地址解析</span></a></h4><p>​ 这是 DNS 最核心的作用。当用户在浏览器中输入一个域名时，DNS 会快速将该域名解析为对应的 IP 地址，使得用户设备能够与目标服务器建立连接，获取所需的网页、文件等资源。例如，用户输入 “www.google.com”，DNS 会将其解析为谷歌服务器的 IP 地址，让用户顺利访问谷歌搜索页面。</p><h4 id="_2-负载均衡" tabindex="-1"><a class="header-anchor" href="#_2-负载均衡"><span>2）负载均衡</span></a></h4><p>​ 许多大型网站会拥有多个服务器来提供服务，DNS 可以通过轮询、基于地理位置等方式，将用户的请求分配到不同的服务器上，实现负载均衡。这样不仅能避免单个服务器因负载过高而出现卡顿或崩溃的情况，还能提高用户的访问速度。比如，淘宝、京东等电商平台在促销活动期间，会通过 DNS 把大量用户请求分散到各个服务器，保障平台的稳定运行。</p><h4 id="_3-服务冗余与故障恢复" tabindex="-1"><a class="header-anchor" href="#_3-服务冗余与故障恢复"><span>3）服务冗余与故障恢复</span></a></h4><p>​ DNS 支持为一个域名配置多个 IP 地址，当其中一个服务器出现故障无法正常工作时，DNS 可以自动将用户请求导向其他正常运行的服务器 IP 地址，实现服务的冗余和故障恢复，减少服务中断的时间，提高服务的可用性。例如，某个网站的主服务器发生故障，DNS 会迅速将域名解析到备用服务器的 IP 地址，用户几乎不会察觉到服务的中断。</p><h2 id="_2-dns-的工作流程" tabindex="-1"><a class="header-anchor" href="#_2-dns-的工作流程"><span>2. DNS 的工作流程</span></a></h2><ol><li>用户在浏览器输入域名。</li><li>操作系统检查本地 DNS 缓存。</li><li>若无缓存，向本地 DNS 服务器发起查询。</li><li>本地 DNS 服务器通过递归或迭代方式向其他 DNS 服务器查询。</li><li>获取 IP 地址并返回给用户。</li></ol><p><img src="https://imgoss.xgss.net/picgo-tx2025/image-20250916145629791.png?tx" alt="image-20250916145629791"></p><h3 id="_2-1-用户在浏览器输入域名" tabindex="-1"><a class="header-anchor" href="#_2-1-用户在浏览器输入域名"><span>2.1 用户在浏览器输入域名</span></a></h3><h3 id="_2-2本地-dns-缓存查询" tabindex="-1"><a class="header-anchor" href="#_2-2本地-dns-缓存查询"><span>2.2本地 DNS 缓存查询</span></a></h3><p>当用户在设备上输入域名并发起访问请求时，设备会首先检查本地的 DNS 缓存。本地 DNS 缓存通常存储在用户的计算机、手机等终端设备中，包含了近期访问过的域名及其对应的 IP 地址。如果在本地缓存中找到了该域名对应的 IP 地址，设备就会直接使用这个 IP 地址与目标服务器进行通信，无需再进行后续的查询步骤，从而大大提高了访问速度。</p><p>例如，用户刚刚访问过 “www.qq.com”，此时本地缓存中已经保存了该域名对应的 IP 地址。当用户再次访问 “www.qq.com” 时，设备直接从本地缓存中获取 IP 地址，快速建立连接并加载页面。</p><p>如果本地 DNS 缓存中没有找到该域名对应的 IP 地址，设备就会向本地 DNS 服务器发起查询请求。</p><h2 id="_3-dns-的关键组件" tabindex="-1"><a class="header-anchor" href="#_3-dns-的关键组件"><span>3. DNS 的关键组件</span></a></h2><h3 id="_3-1-域名结构" tabindex="-1"><a class="header-anchor" href="#_3-1-域名结构"><span>3.1 域名结构</span></a></h3><p>DNS 的域名结构采用层次化的树形结构，从顶层到底层依次为根域、顶级域、二级域、三级域（子域）等，每个层级之间用 “.” 分隔。</p><ul><li>**根域：**位于域名结构的最顶层，用 “.” 表示，通常在域名中省略不写。根域由根 DNS 服务器进行管理。</li><li>**顶级域：**位于根域之下，主要分为通用顶级域（如 .com、.org、.net、.edu、.gov 等）和国家 / 地区顶级域（如 .cn 代表中国、.us 代表美国、.uk 代表英国等）。</li><li>**二级域：**是顶级域下的域名，通常由企业、组织或个人申请注册。例如，“baidu.com” 中的 “baidu” 就是二级域，“qq.com” 中的 “qq” 也是二级域。</li><li><strong>三级域（子域）</strong>：是在二级域的基础上创建的域名，用于对网站的不同部分或服务进行区分。例如，“mail.baidu.com” 中的 “mail” 就是 “baidu.com” 的三级域，用于提供邮件服务；“map.qq.com” 中的 “map” 是 “qq.com” 的三级域，用于提供地图服务。</li></ul><h3 id="_3-2-dns-服务器类型" tabindex="-1"><a class="header-anchor" href="#_3-2-dns-服务器类型"><span>3.2 DNS 服务器类型</span></a></h3><ul><li><p><strong>根 DNS 服务器</strong>：作为 DNS 域名解析系统的核心，根 DNS 服务器负责回答本地 DNS 服务器关于顶级域 DNS 服务器地址的查询请求，全球共有 13 组根 DNS 服务器，分布在世界各地，以确保 DNS 服务的可靠性和稳定性。</p></li><li><p><strong>顶级域 DNS 服务器</strong>：主要负责管理其所属顶级域下的二级域名，当收到本地 DNS 服务器的查询请求时，会返回该二级域名对应的权威 DNS 服务器地址。</p></li><li><p><strong>权威 DNS 服务器</strong>：是域名解析的最终执行者，存储着特定域名的解析记录，包括 A 记录（将域名解析为 IPv4 地址）、AAAA 记录（将域名解析为 IPv6 地址）、CNAME 记录（将一个域名别名指向另一个域名）、MX 记录（用于邮件服务器的解析）等。当本地 DNS 服务器向其查询时，会返回准确的解析结果。</p></li><li><p><strong>本地 DNS 服务器</strong>：由网络服务提供商（ISP）或企业内部网络管理员配置，直接为用户设备提供 DNS 查询服务。它会缓存大量的域名解析结果，以提高查询效率，减少对上层 DNS 服务器的依赖。</p></li></ul><h3 id="_3-3-dns-记录类型" tabindex="-1"><a class="header-anchor" href="#_3-3-dns-记录类型"><span>3.3 DNS 记录类型</span></a></h3><ul><li><p><strong>A 记录</strong>：又称 IPv4 地址记录，是最常用的 DNS 记录类型之一，用于将域名解析为对应的 IPv4 地址。例如，“<a href="https://www.baidu.com/" target="_blank" rel="noopener noreferrer">www.baidu.com</a>” 的 A 记录会指向其对应的 IPv4 地址，如 <a href="http://180.101.50.188/" target="_blank" rel="noopener noreferrer">180.101.50.188</a>。</p></li><li><p><strong>AAAA 记录</strong>：与 A 记录类似，但用于将域名解析为对应的 IPv6 地址，随着 IPv6 技术的不断发展和普及，AAAA 记录的应用也越来越广泛。</p></li><li><p><strong>CNAME 记录</strong>：即别名记录，用于将一个域名（别名）指向另一个域名（目标域名）。当用户访问别名域名时，DNS 会将其解析为目标域名，然后再通过目标域名的解析记录获取 IP 地址。例如，“<a href="https://blog.baidu.com/" target="_blank" rel="noopener noreferrer">blog.baidu.com</a>” 可能通过 CNAME 记录指向 “<a href="https://baidu.blog.cn/" target="_blank" rel="noopener noreferrer">baidu.blog.cn</a>”，用户访问 “<a href="https://blog.baidu.com/" target="_blank" rel="noopener noreferrer">blog.baidu.com</a>” 时，实际会访问 “<a href="https://baidu.blog.cn/" target="_blank" rel="noopener noreferrer">baidu.blog.cn</a>” 对应的服务器。</p></li><li><p><strong>MX 记录</strong>：即邮件交换记录，用于指定负责处理某个域名邮件服务的邮件服务器地址。当发送邮件到某个域名的邮箱时，发送方的邮件服务器会查询该域名的 MX 记录，找到对应的邮件服务器，然后将邮件发送到该服务器。例如，“<a href="https://baidu.com/" target="_blank" rel="noopener noreferrer">baidu.com</a>” 的 MX 记录会指向百度的邮件服务器地址，确保邮件能够准确送达。</p></li><li><p><strong>NS 记录</strong>：即名称服务器记录，用于指定负责解析某个域名的 DNS 服务器地址。例如，“<a href="https://baidu.com/" target="_blank" rel="noopener noreferrer">baidu.com</a>” 的 NS 记录会指向其权威 DNS 服务器的地址，告诉其他 DNS 服务器在解析 “<a href="https://baidu.com/" target="_blank" rel="noopener noreferrer">baidu.com</a>” 及其子域名时，应向这些权威 DNS 服务器查询。</p></li><li><p><strong>TXT 记录</strong>：即文本记录，用于存储关于域名的额外文本信息，这些信息可以用于域名验证、SPF（Sender Policy Framework，发件人策略框架）配置等。例如，一些云服务提供商可能会要求用户在域名的 TXT 记录中添加特定的验证信息，以确认用户对该域名的所有权。</p></li></ul><h2 id="_4-dns-查询类型" tabindex="-1"><a class="header-anchor" href="#_4-dns-查询类型"><span>4. DNS 查询类型</span></a></h2><h3 id="_4-1-递归查询" tabindex="-1"><a class="header-anchor" href="#_4-1-递归查询"><span>4.1 递归查询</span></a></h3><p>递归查询是指客户端（如用户设备）向 DNS 服务器发起查询请求后，DNS 服务器会全程负责查询过程，直到获取到最终的 IP 地址，并将结果返回给客户端。在递归查询过程中，客户端只需等待 DNS 服务器的回复，无需参与中间的查询步骤。</p><p>通常，用户设备向本地 DNS 服务器发起的查询就是递归查询。例如，用户设备查询 “<a href="https://www.taobao.com/" target="_blank" rel="noopener noreferrer">www.taobao.com</a>”，向本地 DNS 服务器发送递归查询请求后，本地 DNS 服务器会依次向根 DNS 服务器、顶级域 DNS 服务器、权威 DNS 服务器查询，直到获取到 “<a href="https://www.taobao.com/" target="_blank" rel="noopener noreferrer">www.taobao.com</a>” 对应的 IP 地址，然后将该 IP 地址返回给用户设备。</p><h3 id="_4-2-迭代查询" tabindex="-1"><a class="header-anchor" href="#_4-2-迭代查询"><span>4.2 迭代查询</span></a></h3><p>迭代查询是指 DNS 服务器之间的查询方式，当一个 DNS 服务器向另一个 DNS 服务器发起查询请求时，被查询的 DNS 服务器如果没有该域名对应的 IP 地址，会返回下一个应该查询的 DNS 服务器地址，而不是继续查询。发起查询的 DNS 服务器需要根据返回的地址，继续向下一个 DNS 服务器发起查询，直到获取到最终的 IP 地址。</p><p>在 DNS 域名解析的整个流程中，本地 DNS 服务器向根 DNS 服务器、顶级域 DNS 服务器、权威 DNS 服务器发起的查询都属于迭代查询。例如，本地 DNS 服务器向根 DNS 服务器查询 “<a href="https://www.baidu.com/" target="_blank" rel="noopener noreferrer">www.baidu.com</a>”，根 DNS 服务器没有该域名的 IP 地址，就会返回 “.com” 顶级域 DNS 服务器的地址；本地 DNS 服务器再向 “.com” 顶级域 DNS 服务器查询，该服务器返回 “<a href="https://baidu.com/" target="_blank" rel="noopener noreferrer">baidu.com</a>” 权威 DNS 服务器的地址；本地 DNS 服务器继续向权威 DNS 服务器查询，最终获取到 IP 地址。</p><h2 id="_5-dns-缓存机制及优势" tabindex="-1"><a class="header-anchor" href="#_5-dns-缓存机制及优势"><span>5. DNS 缓存机制及优势</span></a></h2><ul><li>缓存解析结果，减少重复查询。</li><li>提升响应速度，降低网络负载。</li></ul><h2 id="_6-dns-安全性问题及常见攻击方式" tabindex="-1"><a class="header-anchor" href="#_6-dns-安全性问题及常见攻击方式"><span>6. DNS 安全性问题及常见攻击方式</span></a></h2><ul><li><p><strong>DNS 劫持</strong>：DNS 劫持是指攻击者通过篡改 DNS 解析结果，将用户原本要访问的域名解析到错误的 IP 地址，从而引导用户访问恶意网站、窃取用户信息或进行其他恶意行为。例如，用户想要访问银行官网，却因 DNS 劫持被引导到一个仿冒的银行网站，导致账号密码等敏感信息被窃取。DNS 劫持可能发生在本地设备（如恶意软件修改本地 DNS 设置）、本地 DNS 服务器（如服务器被入侵篡改）或网络传输过程中（如中间人攻击）。</p></li><li><p><strong>DNS 污染</strong>：DNS 污染又称 DNS 缓存投毒，是指攻击者通过向 DNS 服务器发送虚假的 DNS 解析记录，污染 DNS 服务器的缓存，使得 DNS 服务器在后续的查询中返回错误的解析结果。DNS 污染通常针对一些特定的域名，通过干扰这些域名的解析，阻止用户访问相关网站。与 DNS 劫持不同，DNS 污染主要影响 DNS 服务器的缓存，而 DNS 劫持则可能直接篡改解析过程。</p></li><li><p><strong>DNS 解析延迟</strong>：DNS 解析延迟是指从用户发起域名查询请求到获取到 IP 地址所需的时间过长，导致用户访问网站时出现卡顿、加载缓慢等情况。造成 DNS 解析延迟的原因有很多，如本地 DNS 服务器性能不佳、网络拥堵、DNS 服务器之间的查询链路过长、域名解析记录配置不合理等。例如，本地 DNS 服务器负载过高，无法及时处理大量的查询请求，就会导致解析延迟；或者用户所在地区的本地 DNS 服务器与上层 DNS 服务器之间的网络连接不稳定，也会增加解析时间。</p></li></ul><h2 id="_7-dns-与其他网络协议的关系" tabindex="-1"><a class="header-anchor" href="#_7-dns-与其他网络协议的关系"><span>7. DNS 与其他网络协议的关系</span></a></h2><ul><li>与 TCP/IP 协议栈协同工作。</li><li>查询多用 UDP（端口 53），在数据量大或安全性要求高时可用 TCP。</li></ul>',40)]))}const h=e(o,[["render",t]]),S=JSON.parse('{"path":"/%E6%99%BA%E7%BB%B4%E6%94%BB%E5%9F%8E%E7%8B%AE/S15/21.%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80-DNS%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.html","title":"网络协议基础：DNS 工作原理","lang":"en-US","frontmatter":{},"git":{"createdTime":1760001321000,"updatedTime":1761640845000,"contributors":[{"name":"star","username":"star","email":"star@xgss.net","commits":2,"url":"https://github.com/star"}]},"readingTime":{"minutes":10.39,"words":3117},"filePathRelative":"智维攻城狮/S15/21.网络协议基础-DNS工作原理.md"}');export{h as comp,S as data};
