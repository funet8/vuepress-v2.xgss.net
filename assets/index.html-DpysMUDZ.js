import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as i,o as n}from"./app-BiQR_lPj.js";const r={};function t(l,e){return n(),a("div",null,e[0]||(e[0]=[i(`<h1 id="docker优化硬盘空间" tabindex="-1"><a class="header-anchor" href="#docker优化硬盘空间"><span>docker优化硬盘空间</span></a></h1><h2 id="_1-docker-system命令" tabindex="-1"><a class="header-anchor" href="#_1-docker-system命令"><span>1. docker system命令</span></a></h2><p>docker system df命令，类似于Linux上的df命令，用于查看Docker的磁盘使用情况:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker system df</span></span>
<span class="line"><span>TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE</span></span>
<span class="line"><span>Images              147                 36                  7.204GB             3.887GB (53%)</span></span>
<span class="line"><span>Containers          37                  10                  104.8MB             102.6MB (97%)</span></span>
<span class="line"><span>Local Volumes       3                   3                   1.421GB             0B (0%)</span></span>
<span class="line"><span>Build Cache                                                 0B                  0B</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可知，Docker镜像占用了<strong>7.2GB</strong>磁盘，Docker容器占用了<strong>104.8MB</strong>磁盘，Docker数据卷占用了<strong>1.4GB</strong>磁盘。</p><h2 id="docker-system-prune命令" tabindex="-1"><a class="header-anchor" href="#docker-system-prune命令"><span>docker system prune命令</span></a></h2><p><strong>docker system prune</strong>命令可以用于清理磁盘，删除关闭的容器、无用的数据卷和网络，以及dangling镜像(即无tag的镜像)。 <strong>docker system prune -a</strong>命令清理得更加彻底，可以将没有容器使用Docker镜像都删掉。注意，这两个命令会把你暂时关闭的容器，以及暂时没有用到的Docker镜像都删掉了…所以使用之前一定要想清楚吶。</p><h2 id="_2-手动清理docker镜像-容器-数据卷" tabindex="-1"><a class="header-anchor" href="#_2-手动清理docker镜像-容器-数据卷"><span>2. 手动清理Docker镜像/容器/数据卷</span></a></h2><p>对于旧版的Docker(版本1.13之前)，是没有docker system命令的，因此需要进行手动清理。这里给出几个常用的命令 <strong>删除所有关闭的容器</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker ps -a | grep Exit | cut -d &#39;&#39; -f 1 | xargs docker rm</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>删除所有dangling镜像(即无tag的镜像)：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker rmi $(docker images | grep &quot;^&lt;none&gt;&quot; | awk &quot;{print $3}&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>删除所有dangling数据卷(即无用的volume)：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker volume rm $(docker volume ls -qf dangling=true)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在内网测试机上，跑的三个docker虚拟机里面安装mysql之后，硬盘空间被占满 删除所有的镜像，依然无法腾出硬盘空间</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>生产环境谨慎使用！</span></span>
<span class="line"><span>systemctl stop docker</span></span>
<span class="line"><span>rm -rf /var/lib/docker/*</span></span>
<span class="line"><span>systemctl start docker</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>https://www.cnblogs.com/fundebug/p/8353158.html https://segmentfault.com/q/1010000005846603/a-1020000005854058</p>`,17)]))}const o=s(r,[["render",t]]),p=JSON.parse('{"path":"/article/qz6u65ed/","title":"Docker系列教程8-Docker优化硬盘空间","lang":"en-US","frontmatter":{"title":"Docker系列教程8-Docker优化硬盘空间","createTime":"2025/05/27 17:51:17","permalink":"/article/qz6u65ed/"},"git":{"createdTime":1749111496000,"updatedTime":1750129445000,"contributors":[{"name":"star","username":"star","email":"star@xgss.net","commits":2,"url":"https://github.com/star"}]},"readingTime":{"minutes":1.42,"words":427},"filePathRelative":"docker/Docker系列教程8-Docker优化硬盘空间.md"}');export{o as comp,p as data};
