import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as r,o as s}from"./app-BiQR_lPj.js";const t={};function p(i,a){return s(),n("div",null,a[0]||(a[0]=[r('<h1 id="rag从入门到放弃" tabindex="-1"><a class="header-anchor" href="#rag从入门到放弃"><span>RAG从入门到放弃</span></a></h1><h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h1><p>想象一下，你有一个非常聪明但是有点“健忘”的朋友——大型语言模型（LLM），比如 GPT 系列。它能写诗、能编程、能跟你聊天，听起来很厉害吧？但是，它所知道的知识都来自于训练它的海量数据，这些数据是有时间范围的，而且不包含你个人或者特定领域最新的、私有的信息。</p><p>当你问它一些关于最近发生的事情，或者你公司内部的知识时，它可能会胡编乱造（我们称之为“AI幻觉”），或者干脆说不知道。这可就尴尬了。</p><p>这个时候，RAG 就派上用场了！它的核心思想很简单：在 LLM 生成答案之前，先去外部的知识库里检索相关的信息，然后把这些信息“喂”给 LLM，让它基于检索到的信息来生成更准确、更可靠的答案。</p><p>你可以把 RAG 想象成给你的“健忘”朋友配备了一个“搜索引擎”和一个“记忆助手”。当它需要回答问题时，先去“搜索引擎”里查阅相关的资料，然后结合自己的“记忆”来给出答案。</p><p><img src="https://imgoss.xgss.net/picgo/rag-fengmiang.png?aliyun" alt="rag-fengmiang"></p><h1 id="rag是什么" tabindex="-1"><a class="header-anchor" href="#rag是什么"><span>RAG是什么</span></a></h1><p>RAG（Retrieval Augmented Generation，检索增强生成）是一种将大型语言模型（LLM） 与外部数据源（例如私有数据或最新数据）连接的通用方法。它允许大型语言模型（LLM）使用外部数据来生成其输出。</p><h1 id="rag-的流程大致" tabindex="-1"><a class="header-anchor" href="#rag-的流程大致"><span>RAG 的流程大致</span></a></h1><h2 id="_1-构建知识库-knowledge-base" tabindex="-1"><a class="header-anchor" href="#_1-构建知识库-knowledge-base"><span>1.构建知识库 (Knowledge Base)</span></a></h2><ul><li>首先，你需要准备好你的知识来源，这可以是各种各样的文档、网页、数据库等等。</li><li>然后，你需要将这些原始数据转换成 LLM 可以理解和处理的格式。一个常见的做法是将文本分割成小的“chunk”（块），并为每个 chunk 生成对应的向量嵌入（embedding）。向量嵌入是一种将文本信息映射到高维空间的技术，语义上相似的文本在向量空间中的距离也会比较近。</li><li>最后，你需要将这些向量嵌入存储在一个专门的向量数据库中，以便后续的快速检索。常见的向量数据库有 ChromaDB、Pinecone、FAISS 等。</li></ul><h2 id="_2-检索-retrieval" tabindex="-1"><a class="header-anchor" href="#_2-检索-retrieval"><span>2.检索 (Retrieval)</span></a></h2><ul><li>当用户提出一个问题时，首先需要将这个问题也转换成对应的向量嵌入。</li><li>然后，利用这个问题的向量嵌入在向量数据库中进行相似性搜索，找到与问题最相关的若干个知识块。这个过程就像在图书馆里通过关键词找到相关的书籍或文章。</li></ul><h2 id="_3-增强生成-augmented-generation" tabindex="-1"><a class="header-anchor" href="#_3-增强生成-augmented-generation"><span>3.增强生成 (Augmented Generation)</span></a></h2><ul><li>将检索到的相关知识块和用户的问题一起作为上下文（context）输入给 LLM。</li><li>LLM 基于这些检索到的信息，结合自身的知识和理解能力，生成最终的答案。</li></ul><h1 id="rag的架构" tabindex="-1"><a class="header-anchor" href="#rag的架构"><span>RAG的架构</span></a></h1><p>那么 rag 究竟是什么呢，我想，通过一些架构图来理解是最简单直观的，但架构图也需要一定的挑选，这里我选取两张比较容易看懂容易理解的图，来辅助理解。</p><p>来自 <a href="https://github.com/aigc-apps/PAI-RAG" target="_blank" rel="noopener noreferrer">PAI-RAG</a> 地址：https://github.com/aigc-apps/PAI-RAG</p><p>整个图的中心是大语言模型 LLM，RAG 的目标就是通过外部检索到的信息来增强 LLM 的生成能力，最终给出问题回答。整个流程可以分为构建知识库、检索相关信息和增强生成答案三个主要阶段。</p><p><img src="https://imgoss.xgss.net/picgo/1713093745798.png?aliyun" alt="img"></p><p>这张图清晰地展示了 RAG 的核心流程：</p><p>首先，将知识库中的文档转化为向量并存储。</p><p>然后，当用户提问时，也将其转化为向量，并在向量数据库中检索出最相关的知识片段。</p><p>最后，将用户的提问和检索到的知识片段一起作为上下文输入给大语言模型，让模型基于这些信息生成更准确、更相关的答案。</p><h1 id="rag应用场景" tabindex="-1"><a class="header-anchor" href="#rag应用场景"><span>RAG应用场景</span></a></h1><p>理论上，RAG 在开放域问答、智能客服、专业文档查询等领域有着巨大应用潜力。包括但不限于以下应用：</p><p>**1.智能问答系统：**例如企业内部知识库问答、专业领域问答、教育和研究等 **2.内容创作与增强：**例如辅助写作、新闻报道和内容生成、产品描述和营销文案生成等 **3.智能助手与聊天机器人:**客服机器人、个人知识助手、会议助手等 **4.信息检索与知识管理:**企业知识管理平台、搜索引擎优化 **5.代码生成与解释：**代码辅助生成、代码解释等。 <strong>6.多模态</strong>:图像、视频、音频检索增强生成: 未来 RAG 不仅限于文本，还可以扩展到处理图像、视频、音频等多种模态的数据，例如，用户可以提问关于一张图片的内容，RAG 系统可以检索相关的文本描述和背景信息进行回答。</p><h1 id="如何利用rag搭建个人知识库" tabindex="-1"><a class="header-anchor" href="#如何利用rag搭建个人知识库"><span>如何利用RAG搭建个人知识库</span></a></h1><h1 id="rag-的挑战" tabindex="-1"><a class="header-anchor" href="#rag-的挑战"><span>RAG 的挑战</span></a></h1><p>当你按照开源社区一些框架给的教程，做出了一个 rag 的 demo 之后，你会发现，所呈现的效果，可能只有真正理想的效果 50%都不到。</p><p>那么是什么问题，产生了这一不确定性呢？</p><p><strong>检索质量的瓶颈:</strong> 如果检索到的信息与用户的问题相关性不高或者质量不高，那么即使 LLM 再强大，也无法生成高质量的答案。</p><p><strong>上下文长度的限制:</strong> LLM 的输入上下文长度是有限制的，如果检索到的相关文档过多，可能会超出这个限制，需要进行有效的上下文压缩或选择。</p><p><strong>知识库的维护成本:</strong> 构建和维护一个高质量的知识库需要持续的投入，包括数据的收集、清洗、更新等。</p><p><strong>如何处理不相关或冗余的检索结果:</strong> 有时候检索到的信息可能包含噪声或者与问题关联不大，如何有效地过滤和利用这些信息是一个挑战。</p><p><strong>复杂的推理问题:</strong> 对于需要复杂推理的问题，仅仅依靠检索到的片段信息可能不够，还需要 LLM 具备更强的推理能力。</p><p>RAG 是一种强大的技术，但在实际应用中需要仔细考虑其固有的缺点和挑战，并采取相应的策略来缓解这些问题，以构建更有效、更可靠的知识增强型 LLM 应用。</p>',38)]))}const o=e(t,[["render",p]]),l=JSON.parse('{"path":"/article/n9zm7sax/","title":"9.人工智能RAG：从入门到放弃","lang":"en-US","frontmatter":{"title":"9.人工智能RAG：从入门到放弃","createTime":"2025/05/27 17:51:17","permalink":"/article/n9zm7sax/"},"git":{"createdTime":1749111496000,"updatedTime":1760001321000,"contributors":[{"name":"star","username":"star","email":"star@xgss.net","commits":3,"url":"https://github.com/star"}]},"readingTime":{"minutes":5.77,"words":1731},"filePathRelative":"chatgpt2025/9.人工智能RAG：从入门到放弃.md"}');export{o as comp,l as data};
