import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as n,o as i}from"./app-BiQR_lPj.js";const p={};function r(l,s){return i(),e("div",null,s[0]||(s[0]=[n(`<h1 id="docker中轻松运行群晖系统-打造个人云服务" tabindex="-1"><a class="header-anchor" href="#docker中轻松运行群晖系统-打造个人云服务"><span>Docker中轻松运行群晖系统，打造个人云服务</span></a></h1><p>群晖（Synology）系统以其便捷的操作和强大的功能，成为了很多家庭和企业用户的首选。而 Docker 作为一个强大的容器化平台，能够将应用与操作系统隔离，使得部署、管理和维护变得更加轻松。那么，如何在 Docker 中一键部署群辉系统呢？本文将详细介绍这一过程，让你在一分钟内轻松启动群辉系统，体验个人云服务的强大功能。</p><p><img src="https://imgoss.xgss.net/picgo/image-20241228230715868.png?aliyun" alt="image-20241228230715868"></p><h1 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作"><span>准备工作</span></a></h1><p>在开始部署之前，确保你已经完成以下准备工作：</p><p>Docker 环境：在你的服务器或本地机器上安装并启动 Docker。你可以通过 Docker 官方文档或者一些教程进行安装。</p><p>群辉镜像：目前，群辉系统没有官方的 Docker 镜像，但我们可以通过第三方镜像来实现部署。</p><p>端口与存储规划：为了确保群辉系统能够正常运行，你需要预先规划好需要映射的端口和存储卷。</p><h1 id="virtual-dsm" tabindex="-1"><a class="header-anchor" href="#virtual-dsm"><span>virtual-dsm</span></a></h1><p>virtual-dsm 是一个开源项目，功能是在 Docker 中运行 DiskStation Manager。我测试了一下， virtual-dsm 可以在微软 WLS2（Linux子系统）中完美运行。如果你的 Windows 开启了 WSL2 可以按照我的操作进行部署（操作很简单），也可以部署到其它支持 Docker 和 KVM 的设备上。</p><p>我的测试环境是基于 WSL2 安装的 Ubuntu 22.04 。由于 virtual-dsm 要求设备必须支持 KVM ，所以登陆到 Ubuntu 后可以通过如下命令进行检测：</p><p>硬盘最好超过50G</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>sudo apt install cpu-checker</span></span>
<span class="line"><span>sudo kvm-ok</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="docker-部署" tabindex="-1"><a class="header-anchor" href="#docker-部署"><span>docker 部署</span></a></h1><p>virtual-dsm 可以通过 docker run 或者 docker-compose 进行部署：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker run -it --rm -p 5000:5000 --device=/dev/kvm --cap-add NET_ADMIN --stop-timeout 60 kroese/virtual-dsm:latest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="docker-compose-部署" tabindex="-1"><a class="header-anchor" href="#docker-compose-部署"><span>docker-compose 部署</span></a></h1><p>我个人推荐用 docker-compose 部署会更加直观（系统需安装好 docker 和 docker-compose）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>version: &quot;3&quot;</span></span>
<span class="line"><span>services:</span></span>
<span class="line"><span>    dsm:</span></span>
<span class="line"><span>        container_name: dsm</span></span>
<span class="line"><span>        image: kroese/virtual-dsm:latest</span></span>
<span class="line"><span>        environment:</span></span>
<span class="line"><span>            DISK_SIZE: &quot;16G&quot;</span></span>
<span class="line"><span>        devices:</span></span>
<span class="line"><span>            - /dev/kvm</span></span>
<span class="line"><span>            - /dev/vhost-net</span></span>
<span class="line"><span>        cap_add:</span></span>
<span class="line"><span>            - NET_ADMIN                       </span></span>
<span class="line"><span>        ports:</span></span>
<span class="line"><span>            - 5000:5000</span></span>
<span class="line"><span>        volumes:</span></span>
<span class="line"><span>            - /opt/dsm:/storage</span></span>
<span class="line"><span>        restart: on-failure</span></span>
<span class="line"><span>        stop_grace_period: 1m</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释</p><p>其中 environment: 中的 DISK_SIZE: &quot;16G&quot; 选项可以调整硬盘大小，还可以通过 CPU_CORES: &quot;2&quot; 调整CPU核心数量，RAM_SIZE: &quot;2048M&quot; 设置内存大小。</p><p>其中 volumes: 中的 - /home/user/data:/storage 可设置挂载的本地磁盘路径，可以根据实际情况进行修改。如果只是体验一下系统，其实不用太在意这些参数。</p><p>*注意由于现在 dockerhub 主站国内被封了，所以要拉取镜像必须设置好镜像站，不然会拉取镜像失败。</p><h1 id="浏览器访问" tabindex="-1"><a class="header-anchor" href="#浏览器访问"><span>浏览器访问</span></a></h1><p>运行容器之后访问 http://IP:5000 ，然后根据指引进行 DSM 初始化设置，即可访问 DSM 的 web 控制台：</p><p><img src="https://imgoss.xgss.net/picgo/image-20241228230411007.png?aliyun" alt="image-20241228230411007"></p><p>部署成功后，打开浏览器，访问 http://&lt;宿主机IP&gt;:5000（HTTP）或 https://&lt;宿主机IP&gt;:5001（HTTPS）即可进入群辉管理界面。根据提示进行首次设置，包括创建管理员账号、选择语言等。</p><p><img src="https://imgoss.xgss.net/picgo/image-20241228230505063.png?aliyun" alt="image-20241228230505063"></p><h1 id="优化与注意事项" tabindex="-1"><a class="header-anchor" href="#优化与注意事项"><span>优化与注意事项</span></a></h1><h2 id="存储空间管理" tabindex="-1"><a class="header-anchor" href="#存储空间管理"><span>存储空间管理</span></a></h2><p>在 Docker 中运行群辉时，你需要确保宿主机有足够的存储空间来保存数据。通过 Docker 挂载卷的方式，你可以将宿主机的硬盘直接映射到群辉容器中，方便管理和扩展存储。</p><h2 id="性能调优" tabindex="-1"><a class="header-anchor" href="#性能调优"><span>性能调优</span></a></h2><p>虽然群辉系统可以通过 Docker 快速部署，但它毕竟是一个完整的操作系统，可能对宿主机的资源有一定要求。为了提高性能，可以考虑增加宿主机的内存和硬盘容量，确保群辉容器能够稳定运行。</p><h2 id="网络配置" tabindex="-1"><a class="header-anchor" href="#网络配置"><span>网络配置</span></a></h2><p>在部署群辉系统时，确保网络配置正确。如果你计划在局域网之外访问群辉系统，记得设置端口转发或使用反向代理来实现外网访问。</p><h2 id="数据安全" tabindex="-1"><a class="header-anchor" href="#数据安全"><span>数据安全</span></a></h2><p>在使用群辉系统时，一定要注意数据备份与安全。群辉自带的一些工具，如 Hyper Backup，可以帮助你定期备份数据，防止数据丢失。</p><h1 id="群晖的套件中心" tabindex="-1"><a class="header-anchor" href="#群晖的套件中心"><span>群晖的套件中心</span></a></h1><p>功能比较强大，而且可以按需安装。不少套件功能成熟运行稳定，市场认可度较高。</p><p><img src="https://imgoss.xgss.net/picgo/image-20241228230442408.png?aliyun" alt="image-20241228230442408"></p><p>通过 Docker 部署群辉系统，不仅能够体验到群辉的强大功能，还能节省购买专用硬件的成本。整个部署过程简单快捷，只需要几分钟即可完成。对于个人用户和开发者来说，Docker 提供了一个灵活且高效的方式来运行群辉系统，打造自己的私有云。只需简单配置，便能享受群辉带来的强大文件管理、备份和数据存储功能。</p>`,41)]))}const t=a(p,[["render",r]]),o=JSON.parse('{"path":"/article/2ucnk95p/","title":"Docker中轻松运行群晖系统，打造个人云服务","lang":"en-US","frontmatter":{"title":"Docker中轻松运行群晖系统，打造个人云服务","createTime":"2025/05/27 17:51:17","permalink":"/article/2ucnk95p/"},"git":{"createdTime":1749111496000,"updatedTime":1750129445000,"contributors":[{"name":"star","username":"star","email":"star@xgss.net","commits":2,"url":"https://github.com/star"}]},"readingTime":{"minutes":4.18,"words":1254},"filePathRelative":"NAS/Docker中轻松运行群晖系统，打造个人云服务.md"}');export{t as comp,o as data};
