import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as i}from"./app-BiQR_lPj.js";const c={};function p(t,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h1 id="修改运行中的docker容器的端口映射" tabindex="-1"><a class="header-anchor" href="#修改运行中的docker容器的端口映射"><span>修改运行中的docker容器的端口映射</span></a></h1><p>在docker run创建并运行容器的时候，可以通过-p指定端口映射规则。但是，我们经常会遇到刚开始忘记设置端口映射或者设置错了需要修改。当docker start运行容器后并没有提供一个-p选项或设置，让你修改指定端口映射规则。那么这种情况我们该怎么处理呢？今天Docker君教你如何修改运行中的docker容器的端口映射？</p><h2 id="方法一-删除原有容器-重新建新容器" tabindex="-1"><a class="header-anchor" href="#方法一-删除原有容器-重新建新容器"><span>方法一：删除原有容器，重新建新容器</span></a></h2><p>这个解决方案最为简单，把原来的容器删掉，重新建一个。当然这次不要忘记加上端口映射。</p><h2 id="方法二-修改容器配置文件-重启docker服务" tabindex="-1"><a class="header-anchor" href="#方法二-修改容器配置文件-重启docker服务"><span>方法二：修改容器配置文件，重启docker服务</span></a></h2><p>容器的配置文件路径：</p><p>/var/lib/docker/containers/[hash_of_the_container]/hostconfig.json</p><p>其中的hashofthecontainer是docker镜像的hash值，可以通过docker ps或者docker inspect containername查看。（CONTAINER ID就可以看出来）</p><p><img src="https://imgoss.xgss.net/picgo/image-20200917093804772.png?aliyun" alt="image-20200917093804772"></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>systemctl stop docker</span></span>
<span class="line"><span>进入docker项目的配置目录</span></span>
<span class="line"><span># cd /var/lib/docker/containers/bc96d2777c64583b2a02c5864e452e71cb370cb587f00c262e2df242fb4d8d69/</span></span>
<span class="line"><span># vi hostconfig.json </span></span>
<span class="line"><span>把：[{&quot;HostIp&quot;:&quot;&quot;,&quot;HostPort&quot;:&quot;9022&quot;}]改成[{&quot;HostIp&quot;:&quot;192.168.20.178&quot;,&quot;HostPort&quot;:&quot;9022&quot;}]</span></span>
<span class="line"><span># vi config.v2.json</span></span>
<span class="line"><span></span></span>
<span class="line"><span>未修改之前的：</span></span>
<span class="line"><span># docker ps</span></span>
<span class="line"><span>CONTAINER ID        IMAGE                       COMMAND             CREATED             STATUS              PORTS                                                 NAMES</span></span>
<span class="line"><span>bc96d2777c64        jumpserver/jms_all:latest   &quot;./entrypoint.sh&quot;   5 weeks ago         Up 5 weeks          192.168.20.178:9000-&gt;80/tcp, 0.0.0.0:9022-&gt;2222/tcp   jms_all</span></span>
<span class="line"><span></span></span>
<span class="line"><span>systemctl start docker</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改防火墙：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span> vi /etc/sysconfig/iptables</span></span>
<span class="line"><span> -A DOCKER ! -i docker0 -p tcp -m tcp --dport 9022 -j DNAT --to-destination 172.17.0.2:2222</span></span>
<span class="line"><span>改成</span></span>
<span class="line"><span>-A DOCKER -d 192.168.20.178/32 ! -i docker0 -p tcp -m tcp --dport 9022 -j DNAT --to-destination 172.17.0.2:2222</span></span>
<span class="line"><span></span></span>
<span class="line"><span>systemctl restart iptables</span></span>
<span class="line"><span></span></span>
<span class="line"><span>修改之后 重启：</span></span>
<span class="line"><span>systemctl start docker</span></span>
<span class="line"><span>CONTAINER ID        IMAGE                       COMMAND             CREATED             STATUS              PORTS                                                        NAMES</span></span>
<span class="line"><span>bc96d2777c64        jumpserver/jms_all:latest   &quot;./entrypoint.sh&quot;   5 weeks ago         Up 6 seconds        192.168.20.178:9000-&gt;80/tcp, 192.168.20.178:9022-&gt;2222/tcp   jms_all</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="方法三-利用docker-commit新构镜像" tabindex="-1"><a class="header-anchor" href="#方法三-利用docker-commit新构镜像"><span>方法三：利用docker commit新构镜像</span></a></h2><p>​ docker commit：把一个容器的文件改动和配置信息commit到一个新的镜像。这个在测试的时候会非常有用，把容器所有的文件改动和配置信息导入成一个新的docker镜像，然后用这个新的镜像重起一个容器，这对之前的容器不会有任何影响。</p><h3 id="_1、停止docker容器" tabindex="-1"><a class="header-anchor" href="#_1、停止docker容器"><span>1、停止docker容器</span></a></h3><p>docker stop container01</p><h3 id="_2、commit该docker容器" tabindex="-1"><a class="header-anchor" href="#_2、commit该docker容器"><span>2、commit该docker容器</span></a></h3><p>docker commit container01 new_image:tag</p><h3 id="_3、用前一步新生成的镜像重新起一个容器" tabindex="-1"><a class="header-anchor" href="#_3、用前一步新生成的镜像重新起一个容器"><span>3、用前一步新生成的镜像重新起一个容器</span></a></h3><p>docker run --name container02 -p 80:80 new_image:tag</p><pre><code>优缺点：这种方式的优点是不会影响统一宿主机上的其他容器，缺点是管理起来显得比较乱，没有第二种方法那么直观。
</code></pre><p>参考：</p><p>https://www.cnblogs.com/shijf/p/10386193.html</p>`,23)]))}const d=n(c,[["render",p]]),o=JSON.parse('{"path":"/article/sb2gf6hm/","title":"Docker系列教程11-修改运行中的docker容器的端口映射","lang":"en-US","frontmatter":{"title":"Docker系列教程11-修改运行中的docker容器的端口映射","createTime":"2025/05/27 17:51:17","permalink":"/article/sb2gf6hm/"},"git":{"createdTime":1749111496000,"updatedTime":1750129445000,"contributors":[{"name":"star","username":"star","email":"star@xgss.net","commits":2,"url":"https://github.com/star"}]},"readingTime":{"minutes":2.11,"words":633},"filePathRelative":"docker/Docker系列教程11-修改运行中的docker容器的端口映射.md"}');export{d as comp,o as data};
