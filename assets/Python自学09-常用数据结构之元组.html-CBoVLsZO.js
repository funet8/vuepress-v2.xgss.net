import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-BiQR_lPj.js";const t={};function l(h,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="python自学09-常用数据结构之元组" tabindex="-1"><a class="header-anchor" href="#python自学09-常用数据结构之元组"><span>Python自学09-常用数据结构之元组</span></a></h1><h2 id="🐍-前言" tabindex="-1"><a class="header-anchor" href="#🐍-前言"><span>🐍 前言</span></a></h2><p>在 Python 的数据结构家族中，**元组（Tuple）**常常被误解为“跟列表差不多，只是不能改”。</p><p>但真相是——元组的不可变性，不只是“锁住”数据，它在<strong>数据安全、性能优化、代码语义</strong>等方面，都有着不可替代的作用。</p><p>今天我们就来一次全方位的元组拆解，让你彻底搞懂它的用法与应用场景。</p><p><img src="https://imgoss.xgss.net/picgo-tx2025/QQ_1755442271103.png?tx" alt="img"></p><hr><h2 id="_1️⃣-元组是什么" tabindex="-1"><a class="header-anchor" href="#_1️⃣-元组是什么"><span>1️⃣ 元组是什么？</span></a></h2><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><ul><li>元组是<strong>有序</strong>、<strong>不可变</strong>的元素集合。</li><li>用圆括号 <code>()</code> 或内置函数 <code>tuple()</code> 创建。</li><li>支持<strong>不同类型元素混合存储</strong>。</li></ul><p><strong>示例：</strong></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建元组</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Python&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3.14</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t3 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> tuple</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 由列表转换</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2️⃣-元组-vs-列表" tabindex="-1"><a class="header-anchor" href="#_2️⃣-元组-vs-列表"><span>2️⃣ 元组 VS 列表</span></a></h2><table><thead><tr><th>特性</th><th>元组（tuple）</th><th>列表（list）</th></tr></thead><tbody><tr><td>可变性</td><td>❌ 不可变</td><td>✅ 可变</td></tr><tr><td>性能</td><td>✅ 更快（内存小）</td><td>❌ 相对较慢</td></tr><tr><td>适用场景</td><td>不希望被修改的数据</td><td>需要频繁修改的数据</td></tr><tr><td>语义表达</td><td>固定结构数据</td><td>动态数据集合</td></tr></tbody></table><p>💡 <strong>记忆技巧</strong> 列表像“购物车”，随时可增减；元组像“收据”，一旦打印不可更改。</p><h2 id="_3️⃣-元组的基本操作" tabindex="-1"><a class="header-anchor" href="#_3️⃣-元组的基本操作"><span>3️⃣ 元组的基本操作</span></a></h2><h3 id="_3-1-访问元素" tabindex="-1"><a class="header-anchor" href="#_3-1-访问元素"><span>3.1 访问元素</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>t = (&quot;Python&quot;, &quot;Java&quot;, &quot;Go&quot;)</span></span>
<span class="line"><span>print(t[0])    # Python</span></span>
<span class="line"><span>print(t[-1])   # Go</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-切片" tabindex="-1"><a class="header-anchor" href="#_3-2-切片"><span>3.2 切片</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>print(t[0:2])  # (&#39;Python&#39;, &#39;Java&#39;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3-3-解包-unpacking" tabindex="-1"><a class="header-anchor" href="#_3-3-解包-unpacking"><span>3.3 解包（Unpacking）</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>lang1, lang2, lang3 = t</span></span>
<span class="line"><span>print(lang1, lang2, lang3)  # Python Java Go</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-嵌套元组" tabindex="-1"><a class="header-anchor" href="#_3-4-嵌套元组"><span>3.4 嵌套元组</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>nested = (1, (2, 3), (4, 5))</span></span>
<span class="line"><span>print(nested[1][1])  # 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4️⃣-元组的高级用法" tabindex="-1"><a class="header-anchor" href="#_4️⃣-元组的高级用法"><span>4️⃣ 元组的高级用法</span></a></h2><h3 id="_4-1-多变量赋值" tabindex="-1"><a class="header-anchor" href="#_4-1-多变量赋值"><span>4.1 多变量赋值</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>x, y = (10, 20)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4-2-交换变量值" tabindex="-1"><a class="header-anchor" href="#_4-2-交换变量值"><span>4.2 交换变量值</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>a, b = 1, 2</span></span>
<span class="line"><span>a, b = b, a</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-作为字典的键" tabindex="-1"><a class="header-anchor" href="#_4-3-作为字典的键"><span>4.3 作为字典的键</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>coords = {(10, 20): &quot;位置A&quot;, (30, 40): &quot;位置B&quot;}</span></span>
<span class="line"><span>print(coords[(10, 20)])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>因为元组不可变，所以可以安全用作字典的键。</p><h3 id="_4-4-函数返回多个值" tabindex="-1"><a class="header-anchor" href="#_4-4-函数返回多个值"><span>4.4 函数返回多个值</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>def get_point():</span></span>
<span class="line"><span>    return (3, 4)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>x, y = get_point()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5️⃣-元组的不可变性-真的是绝对的吗" tabindex="-1"><a class="header-anchor" href="#_5️⃣-元组的不可变性-真的是绝对的吗"><span>5️⃣ 元组的不可变性，真的是绝对的吗？</span></a></h2><p>元组的不可变性指的是<strong>元组结构本身不能改</strong>，但如果元组里的元素是可变对象（如列表），那个对象依然可以被修改。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>t = (1, [2, 3])</span></span>
<span class="line"><span>t[1].append(4)   # 不会报错</span></span>
<span class="line"><span>print(t)         # (1, [2, 3, 4])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，元组是<strong>浅不可变</strong>。</p><h2 id="_6️⃣-性能对比小测试" tabindex="-1"><a class="header-anchor" href="#_6️⃣-性能对比小测试"><span>6️⃣ 性能对比小测试</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>import timeit</span></span>
<span class="line"><span></span></span>
<span class="line"><span>list_test = timeit.timeit(stmt=&quot;[1, 2, 3, 4, 5]&quot;, number=1000000)</span></span>
<span class="line"><span>tuple_test = timeit.timeit(stmt=&quot;(1, 2, 3, 4, 5)&quot;, number=1000000)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>print(&quot;列表耗时:&quot;, list_test)</span></span>
<span class="line"><span>print(&quot;元组耗时:&quot;, tuple_test)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>💡 在多数情况下，元组的创建和访问速度会比列表更快。</p><h2 id="📌-总结" tabindex="-1"><a class="header-anchor" href="#📌-总结"><span>📌 总结</span></a></h2><ul><li><strong>核心特性</strong>：有序、不可变、可存放不同类型的数据。</li><li><strong>适用场景</strong>：固定数据结构、多值返回、作为字典键。</li><li><strong>性能优势</strong>：内存占用更小、访问速度更快。</li><li><strong>注意事项</strong>：内部可变对象仍可被修改。</li></ul><h2 id="🚀-实战建议-来自星哥" tabindex="-1"><a class="header-anchor" href="#🚀-实战建议-来自星哥"><span>🚀 实战建议（来自星哥）</span></a></h2><ol><li><strong>配置类常量</strong>：用元组代替列表存储不会变的常量数据。</li><li><strong>函数返回值</strong>：用元组一次性打包多个返回值。</li><li><strong>安全字典键</strong>：避免列表当作键引发 <code>TypeError</code>。</li></ol><blockquote><p>💬 你在项目中用元组最多的场景是哪里？评论区聊聊，让更多人少踩坑！</p></blockquote>`,46)]))}const p=i(t,[["render",l]]),c=JSON.parse('{"path":"/python/S15/Python%E8%87%AA%E5%AD%A609-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%85%83%E7%BB%84.html","title":"Python自学09-常用数据结构之元组","lang":"en-US","frontmatter":{},"git":{"createdTime":1755655357000,"updatedTime":1760001321000,"contributors":[{"name":"star","username":"star","email":"star@xgss.net","commits":2,"url":"https://github.com/star"}]},"readingTime":{"minutes":2.56,"words":767},"filePathRelative":"python/S15/Python自学09-常用数据结构之元组.md"}');export{p as comp,c as data};
