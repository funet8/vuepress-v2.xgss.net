import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as n,o as i}from"./app-BiQR_lPj.js";const l={};function d(r,s){return i(),e("div",null,s[0]||(s[0]=[n(`<h1 id="docker系列教程3-常用操作命令" tabindex="-1"><a class="header-anchor" href="#docker系列教程3-常用操作命令"><span>Docker系列教程3：常用操作命令</span></a></h1><p>上次分享了Docker的一些入门知识点和docker的安装，这次主要讲docker的常用操作命令。</p><h1 id="docker使用镜像常用命令" tabindex="-1"><a class="header-anchor" href="#docker使用镜像常用命令"><span>Docker使用镜像常用命令</span></a></h1><h2 id="_1-获取镜像" tabindex="-1"><a class="header-anchor" href="#_1-获取镜像"><span>1. 获取镜像</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker pull ubuntu:14.04</span></span>
<span class="line"><span>docker pull ubuntu 			#默认从registry.hub.docker.com中获取</span></span>
<span class="line"><span>docker pull hub.c.163.com/public/ubuntu:14.04		#从网易蜂巢下载镜像</span></span>
<span class="line"><span>docker run -d -p 80:80 --name webserver nginx		#没有镜像会先下载</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-查看镜像信息" tabindex="-1"><a class="header-anchor" href="#_2-查看镜像信息"><span>2.查看镜像信息</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker images</span></span>
<span class="line"><span>docker inspect ubuntu:13.10</span></span>
<span class="line"><span>docker history ubuntu</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-查找镜像" tabindex="-1"><a class="header-anchor" href="#_3-查找镜像"><span>3.查找镜像</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker search TERM</span></span>
<span class="line"><span>docker search centos</span></span>
<span class="line"><span>docker search nginx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-删除镜像" tabindex="-1"><a class="header-anchor" href="#_4-删除镜像"><span>4.删除镜像</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker rmi IMAGE</span></span>
<span class="line"><span>docker rmi ubuntu:13.10    </span></span>
<span class="line"><span>docker rmi -f ubuntu:13.10	#强制删除镜像</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-创建镜像的三个方法" tabindex="-1"><a class="header-anchor" href="#_5-创建镜像的三个方法"><span>5.创建镜像的三个方法</span></a></h2><h3 id="_1-基于已有镜像的容器创建" tabindex="-1"><a class="header-anchor" href="#_1-基于已有镜像的容器创建"><span>1.基于已有镜像的容器创建</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span></span>
<span class="line"><span># docker run -it ubuntu:14.04 /bin/bash</span></span>
<span class="line"><span>root@cd391ad59121:/# </span></span>
<span class="line"><span>记住容器ID：cd391ad59121</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>提交新的镜像：</span></span>
<span class="line"><span>docker commit -m &quot;added a new file lxxxx&quot; -a &quot;jishubu lxx&quot; cd391ad59121 test:0.1</span></span>
<span class="line"><span>查看：</span></span>
<span class="line"><span># docker images</span></span>
<span class="line"><span>REPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE</span></span>
<span class="line"><span>test                          0.1                 b2ac4664aadb        16 seconds ago      188 MB</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-基于本地模板导入" tabindex="-1"><a class="header-anchor" href="#_2-基于本地模板导入"><span>2.基于本地模板导入</span></a></h3><p>从一个操作系统模板导入一个镜像</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>cat centos-6-x86_64-minimal.tar.gz |docker import - centos6min</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3-基于dockerfile创建" tabindex="-1"><a class="header-anchor" href="#_3-基于dockerfile创建"><span>3.基于Dockerfile创建</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>FROM	docker.io/0702/centos7 </span></span>
<span class="line"><span>MAINTAINER star  &lt;funet8@163.com&gt;</span></span>
<span class="line"><span>ENV TZ &quot;Asia/Shanghai&quot;</span></span>
<span class="line"><span>ENV TERM xterm</span></span>
<span class="line"><span>#新建用户和用户组</span></span>
<span class="line"><span>RUN groupadd www &amp;&amp; useradd -g www www</span></span>
<span class="line"><span>等等</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-保存和导出镜像" tabindex="-1"><a class="header-anchor" href="#_6-保存和导出镜像"><span>6.保存和导出镜像</span></a></h2><p>保存： docker save</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker save &lt;myimage&gt;:&lt;tag&gt; | gzip &gt; &lt;myimage&gt;_&lt;tag&gt;.tar.gz</span></span>
<span class="line"><span>docker save -o ubuntu_14.04.tar ubuntu:14.04</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过文件将镜像复制给他人</p><p>导入： docker load</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker load &lt; ubuntu_14.04.tar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>导入镜像</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>gunzip -c &lt;myimage&gt;_&lt;tag&gt;.tar.gz | docker load</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_7-上传镜像" tabindex="-1"><a class="header-anchor" href="#_7-上传镜像"><span>7.上传镜像</span></a></h2><p>使用 docker push 默认上传到docker hub官方</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker pust NAME[:TAG] |[REGISTRY_HOST[:REGISTRY_PORT ] /] NAME[:TAG]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="docker操作容器常用命令" tabindex="-1"><a class="header-anchor" href="#docker操作容器常用命令"><span>Docker操作容器常用命令</span></a></h1><h2 id="一、创建容器" tabindex="-1"><a class="header-anchor" href="#一、创建容器"><span>一、创建容器</span></a></h2><h3 id="_1-新建容器" tabindex="-1"><a class="header-anchor" href="#_1-新建容器"><span>1.新建容器</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker create --help</span></span>
<span class="line"><span>docker create -it ubuntu:latest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>create、run命令支持选项都非常复杂</p><h3 id="_2-启动容器" tabindex="-1"><a class="header-anchor" href="#_2-启动容器"><span>2.启动容器</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker start NAMES</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3-创建并启动容器" tabindex="-1"><a class="header-anchor" href="#_3-创建并启动容器"><span>3.创建并启动容器</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker run ubuntu:15.10 /bin/echo &quot;hello world&quot;</span></span>
<span class="line"><span>docker run -it ubuntu:15.10 /bin/bash </span></span>
<span class="line"><span>docker run -v /data/mysql:/var/lib/mysql -p 61920:3306 --name mariadb -d mariadb:latest</span></span>
<span class="line"><span>docker run -d --name myFpm -p 9000:9000 -v  /data/wwwroot/web:/usr/share/nginx/html bitnami/php-fpm</span></span>
<span class="line"><span>docker run -d --name myNginx -p 80:80 -v /data/wwwroot/web:/usr/share/nginx/html -v /data/wwwroot/log:/var/log/nginx nginx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>-i 分配一个伪终端并绑定到容器的标准输出上 -t 容器的标准输入保持打开 -p 表示Docker 镜像内部容器端口暴露给主机 -v标识来给容器内添加一个数据卷，你也可以在一次docker run命令中多次使用-v标识挂载多个数据卷</p><h3 id="_4-守护态运行" tabindex="-1"><a class="header-anchor" href="#_4-守护态运行"><span>4.守护态运行</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker run -d ubuntu:15.10 /bin/sh -c &quot;while true;do echo hello world; sheep 1;done&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_5-查看容器" tabindex="-1"><a class="header-anchor" href="#_5-查看容器"><span>5.查看容器</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker ps -l</span></span>
<span class="line"><span>docker logs NAMES  #显示容器的标准输出</span></span>
<span class="line"><span>docker top NAMES   #docker top 来查看容器内部运行的进程</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、停止、启动、重启容器" tabindex="-1"><a class="header-anchor" href="#二、停止、启动、重启容器"><span>二、停止、启动、重启容器</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker stop NAME</span></span>
<span class="line"><span>docker start NAME</span></span>
<span class="line"><span>docker restart NAME</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、进入容器" tabindex="-1"><a class="header-anchor" href="#三、进入容器"><span>三、进入容器</span></a></h2><h3 id="_1、-exec命令-推荐" tabindex="-1"><a class="header-anchor" href="#_1、-exec命令-推荐"><span>1、 exec命令（推荐）</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker exec -it lxx-wordpress /bin/bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2、attach-命令-不推荐" tabindex="-1"><a class="header-anchor" href="#_2、attach-命令-不推荐"><span>2、attach 命令（不推荐）</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># docker run -itd ubuntu:14.04</span></span>
<span class="line"><span>522681d4c41c7c34ad04779e83253352d1080e85eb9c8f2d1e25f81758379d19</span></span>
<span class="line"><span># docker ps</span></span>
<span class="line"><span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span></span>
<span class="line"><span>522681d4c41c        ubuntu:14.04        &quot;/bin/bash&quot;         12 seconds ago      Up 10 seconds                           distracted_perlman</span></span>
<span class="line"><span># docker attach distracted_perlman</span></span>
<span class="line"><span>root@522681d4c41c:/#</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、nsenter工具" tabindex="-1"><a class="header-anchor" href="#_3、nsenter工具"><span>3、nsenter工具</span></a></h3><p>需要安装软件，不推荐</p><h2 id="四、删除容器" tabindex="-1"><a class="header-anchor" href="#四、删除容器"><span>四、删除容器</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker rm NAMES</span></span>
<span class="line"><span>docker rm -f NAMES  #强制删除</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、导入和导出容器" tabindex="-1"><a class="header-anchor" href="#五、导入和导出容器"><span>五、导入和导出容器</span></a></h2><p>1.导出容器 -docker export</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># docker run -itd ubuntu:14.04 /bin/bash</span></span>
<span class="line"><span># docker export -o test_for_run.tar loving_bohr</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>2.导入容器 docker import</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker import test_for_run.tar  test/ubuntu:v1.0</span></span>
<span class="line"><span>docker images</span></span>
<span class="line"><span>REPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE</span></span>
<span class="line"><span>test/ubuntu                   v1.0                69f170a40e6f        6 seconds ago       175.1 MB</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docker-save-load-export-import的区别" tabindex="-1"><a class="header-anchor" href="#docker-save-load-export-import的区别"><span>Docker save load export import的区别</span></a></h2><h2 id="export" tabindex="-1"><a class="header-anchor" href="#export"><span>export</span></a></h2><p>export命令用于持久化容器（不是镜像）。所以，我们就需要通过以下方法得到容器ID：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>sudo docker ps -a</span></span>
<span class="line"><span>接着执行导出：</span></span>
<span class="line"><span>sudo docker export &lt;CONTAINER ID&gt; &gt; /home/export.tar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="save" tabindex="-1"><a class="header-anchor" href="#save"><span>save</span></a></h2><p>Save命令用于持久化镜像（不是容器）。所以，我们就需要通过以下方法得到镜像名称：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>sudo docker images</span></span>
<span class="line"><span>接着执行保存：</span></span>
<span class="line"><span>sudo docker save busybox-1 &gt; /home/save.tar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用export比使用save保存的文件要小一些</p><h2 id="load-save" tabindex="-1"><a class="header-anchor" href="#load-save"><span>load save</span></a></h2><p>两者的使用方法是一样的，导入压缩包生成镜像</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker import - busybox-1-export:latest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>docker import可以重新指定镜像的名字</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker load &lt; /home/save.tar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="它们之间到底存在什么不同呢" tabindex="-1"><a class="header-anchor" href="#它们之间到底存在什么不同呢"><span><strong>它们之间到底存在什么不同呢？</strong></span></a></h2><p>首先，docker import可以重新指定镜像的名字，docker load不可以</p><p>其次，我们发现导出后的版本会比原来的版本稍微小一些。那是因为导出后，会丢失历史和元数据。执行下面的命令就知道了： 显示镜像的所有层(layer)</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>sudo docker images --tree</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行命令，显示下面的内容。正你看到的，导出后再导入(exported-imported)的镜像会丢失所有的历史，而保存后再加载（saveed-loaded）的镜像没有丢失历史和层(layer)。这意味着使用导出后再导入的方式，你将无法回滚到之前的层(layer)，同时，使用保存后再加载的方式持久化整个镜像，就可以做到层回滚（可以执行docker tag 来回滚之前的层）。</p><h1 id="文件权限管理" tabindex="-1"><a class="header-anchor" href="#文件权限管理"><span>文件权限管理</span></a></h1><p>实际环境中docker程序中生成的文件权限 在宿主机上显示的是 500</p><p>在宿主上查看www用户的ID</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># cat /etc/passwd |grep www</span></span>
<span class="line"><span>www:x:1001:1001::/home/www:/sbin/nologin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>进入docker虚拟机</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># usermod -u 1001 www</span></span>
<span class="line"><span># groupmod -g 1001 www</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>将所需要的目录更改权限</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>chown www.www -R /data/web/dir/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="常用命令图" tabindex="-1"><a class="header-anchor" href="#常用命令图"><span>常用命令图</span></a></h1><p>有牛人总结了docker的操作命令，看图：</p><p><img src="https://imgoss.xgss.net/picgo/docker常用命令.png?aliyun" alt="docker常用命令"></p><h1 id="总结一下常用命令" tabindex="-1"><a class="header-anchor" href="#总结一下常用命令"><span>总结一下常用命令</span></a></h1><p>其中&lt;&gt;阔起来的参数为必选，[]阔起来为可选</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker version 查看docker的版本号，包括客户端、服务端、依赖的Go等</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker info 查看系统(docker)层面信息，包括管理的images, containers数等</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker search  在docker index中搜索image</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker pull  从docker registry server 中下拉image</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker push  推送一个image或repository到registry</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker push :TAG 同上，指定tag</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker inspect  查看image或container的底层信息</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker images TODO filter out the intermediate image layers (intermediate image layers 是什么)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker images -a 列出所有的images</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker ps 默认显示正在运行中的container</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker ps -l 显示最后一次创建的container，包括未运行的</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker ps -a 显示所有的container，包括未运行的</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker logs  查看container的日志，也就是执行命令的一些输出</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker rm  删除一个或多个container</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker rm \`docker ps -a -q\` 删除所有的container</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker ps -a -q | xargs docker rm 同上, 删除所有的container</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker rmi  删除一个或多个image</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker start/stop/restart  开启/停止/重启container</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker start -i  启动一个container并进入交互模式</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker attach  attach一个运行中的container</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker run  使用image创建container并执行相应命令，然后停止</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker run -i -t  /bin/bash 使用image创建container并进入交互模式, login shell是/bin/bash</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker run -i -t -p  将container的端口映射到宿主机的端口</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker commit  [repo:tag] 将一个container固化为一个新的image，后面的repo:tag可选</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker build</span></span>
<span class="line"><span>寻找path路径下名为的Dockerfile的配置文件，使用此配置生成新的image</span></span>
<span class="line"><span>docker build -t repo[:tag] 同上，可以指定repo和可选的tag</span></span>
<span class="line"><span>docker build -  使用指定的dockerfile配置文件，docker以stdin方式获取内容，使用此配置生成新的image</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker port  查看本地哪个端口映射到container的指定端口，其实用docker ps 也可以看到</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,93)]))}const t=a(l,[["render",d]]),h=JSON.parse('{"path":"/article/kyxk3ae1/","title":"Docker系列教程3常用操作命令","lang":"en-US","frontmatter":{"title":"Docker系列教程3常用操作命令","createTime":"2025/05/27 17:51:17","permalink":"/article/kyxk3ae1/"},"git":{"createdTime":1749111496000,"updatedTime":1750129445000,"contributors":[{"name":"star","username":"star","email":"star@xgss.net","commits":2,"url":"https://github.com/star"}]},"readingTime":{"minutes":6,"words":1801},"filePathRelative":"docker/Docker系列教程3常用操作命令.md"}');export{t as comp,h as data};
