import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as s,o as e}from"./app-BiQR_lPj.js";const r={};function h(t,a){return e(),n("div",null,a[0]||(a[0]=[s('<h1 id="初级、中级、高级运维各应必备哪些技能" tabindex="-1"><a class="header-anchor" href="#初级、中级、高级运维各应必备哪些技能"><span>初级、中级、高级运维各应必备哪些技能？</span></a></h1><h2 id="技术专家" tabindex="-1"><a class="header-anchor" href="#技术专家"><span>技术专家</span></a></h2><p>**发展规划：**初中级工程师 -&gt; 高级工程师 -&gt; 架构师 -&gt; 专家</p><p>**适宜人群：**比较喜欢挑战，热爱技术，有较强钻研精神，在某一领域有深入的理解，性格比较内向。</p><h2 id="技术管理" tabindex="-1"><a class="header-anchor" href="#技术管理"><span>技术管理</span></a></h2><p>**发展规划：**初中级工程师 -&gt; 高级工程师 -&gt; 主管/经理 -&gt; 总监 -&gt; CTO（首席技术官）</p><p>**适宜人群：**技术知识面广，有一些管理思维，善于交际，表达沟通能力强，经常关注行业内动态和主流技术。</p><p>2、职业发展目标</p><ul><li>熟悉运维技术学习路线及相关技能</li><li>熟悉职业发展方向及面试分析</li></ul><p>3、职业发展阶段</p><h2 id="初级主要工作" tabindex="-1"><a class="header-anchor" href="#初级主要工作"><span>初级主要工作</span></a></h2><ul><li>修电脑，设备巡检</li><li>服务器上下架</li><li>网络服务部署</li><li>网站平台搭建与维护</li></ul><h2 id="_1-linux基础" tabindex="-1"><a class="header-anchor" href="#_1-linux基础"><span><strong>1）Linux基础</strong></span></a></h2><p>刚开始阶段需要熟悉Linux操作系统安装，目录结构、启动流程等。</p><h2 id="_2-系统管理" tabindex="-1"><a class="header-anchor" href="#_2-系统管理"><span><strong>2）系统管理</strong></span></a></h2><p>主要学习Linux系统，生产环境中基本都在字符界面完成工作，所以要掌握常用的几十个基本管理命令，包括用户管理、磁盘分区、软件包管理、文件权限、文本处理、进程管理、性能分析工具等。</p><h2 id="_3-网络基础" tabindex="-1"><a class="header-anchor" href="#_3-网络基础"><span><strong>3）网络基础</strong></span></a></h2><p>OSI和TCP/IP模型一定要熟悉。基本的交换机、路由器概念及实现原理要知道。</p><h2 id="_4-shell脚本编程基础" tabindex="-1"><a class="header-anchor" href="#_4-shell脚本编程基础"><span><strong>4）Shell脚本编程基础</strong></span></a></h2><p>掌握Shell基本语法结构，能编写简单的脚本即可。</p><h2 id="中级主要工作" tabindex="-1"><a class="header-anchor" href="#中级主要工作"><span>中级主要工作</span></a></h2><ul><li>集群网站平台搭建</li><li>数据库基本管理</li><li>监控系统搭建</li><li>脚本化工作</li></ul><h2 id="_1-网络服务" tabindex="-1"><a class="header-anchor" href="#_1-网络服务"><span><strong>1）网络服务</strong></span></a></h2><p>常见的网络服务要会部署，比如vsftp、nfs、samba、bind、dhcp等。</p><p>代码版本管理系统少不了，可以学习下主流的GIT，能部署和简单使用就可以了。</p><p>经常在服务器之间传输数据，所以要会使用：rsync和scp。</p><p>数据同步：inotify/sersync。</p><p>重复性完成一些工作，可写成脚本定时去运行，所以得会配置Linux下的定时任务服务crond。</p><h2 id="_2-web服务" tabindex="-1"><a class="header-anchor" href="#_2-web服务"><span><strong>2）Web服务</strong></span></a></h2><p>每个公司基本都会有网站，能让网站跑起来，就需要搭建Web服务平台了。</p><p>如果是用PHP语言开发的，通常搭建LNMP网站平台，这是一个技术名词组合的拼写，分开讲就是得会部署Nginx、MySQL和PHP。</p><p>如果是JAVA语言开发的，通常使用Tomcat运行项目，为了提高访问速度，可以使用Nginx反向代理Tomcat，Nginx处理静态页面，Tomcat处理动态页面，实现动静分离。</p><p>不是会部署这么简单，还要知道HTTP协议工作原理、简单的性能调优。</p><h2 id="_3-负载均衡器" tabindex="-1"><a class="header-anchor" href="#_3-负载均衡器"><span><strong>3）负载均衡器</strong></span></a></h2><p>单台服务器终究资源有限，抵抗高访问量肯定是无法支撑的，解决此问题最关键的技术就是采用负载均衡器，水平扩展多台Web服务器，同时对外提供服务，这样就成倍扩展性能了。</p><p>负载均衡器主流开源技术有LVS、HAProxy和Nginx。一定要熟悉一两个！</p><h2 id="_4-数据库" tabindex="-1"><a class="header-anchor" href="#_4-数据库"><span><strong>4）数据库</strong></span></a></h2><p>数据库选择MySQL，它是世界上使用最为广泛的开源数据库。学它准没错！</p><p>也要会一些简单的SQL语句、用户管理、常用存储引擎、数据库备份与恢复。</p><p>想要深入点，必须会主从复制、性能优化、主流集群方案：MHA、MGR等。</p><p>NoSQL这么流行当然也少不了，学下Redis、MongoDB这两个就好了。</p><h2 id="_5-监控系统" tabindex="-1"><a class="header-anchor" href="#_5-监控系统"><span><strong>5）监控系统</strong></span></a></h2><p>监控必不可少，是及时发现问题和追溯问题的救命稻草。可以选择学习主流的Zabbix、Prometheus开源监控系统，功能丰富，能满足企业级监控需求。</p><p>监控点包括服务器硬件、服务器性能、API、业务、PV/UV、日志等方面。</p><p>也可以弄个仪表盘展示几个实时关键的数据，比如Grafana，会非常炫酷。</p><h2 id="_6-日志分析系统" tabindex="-1"><a class="header-anchor" href="#_6-日志分析系统"><span><strong>6）日志分析系统</strong></span></a></h2><p>日志也很重要，定期的分析，可发现潜在隐患，提炼出有价值的东西。</p><p>主流日志系统：ELK Stack</p><p>学会部署使用，能分析日志并可视化，方便故障排查。</p><h2 id="_7-安全防范" tabindex="-1"><a class="header-anchor" href="#_7-安全防范"><span><strong>7）安全防范</strong></span></a></h2><p>安全很重要，不要等到系统被攻击了，再做安全策略，此时已晚！所以，当一台服务器上线后应马上做安全访问控制策略，比如使用iptables限制只允许信任源IP访问，关闭一些无用的服务和端口等。</p><p>一些常见的攻击类型一定得知道啊，否则怎么对症下药呢！比如CC、DDOS、ARP等。</p><h2 id="_8-shell脚本编程进阶" tabindex="-1"><a class="header-anchor" href="#_8-shell脚本编程进阶"><span><strong>8）Shell脚本编程进阶</strong></span></a></h2><p>Shell脚本是Linux自动完成工作的利器，必须得熟练编写，所以得进一步学习函数、数组、信号、发邮件等。</p><p>文本处理三剑客（grep、sed、awk）得玩6啊，Linux下文本处理就指望它们了。</p><h2 id="_9-python-go开发基础" tabindex="-1"><a class="header-anchor" href="#_9-python-go开发基础"><span><strong>9）Python/Go开发基础</strong></span></a></h2><p>Shell脚本只能完成一些基本的任务，想要完成更复杂些的任务，比如调用API、多进程等。就需要学高级语言了。</p><p>Python是运维领域使用最多的语言，简单易用，学它准没错！此阶段掌握基础就可以了，例如基本语法结构、文件对象操作、函数、迭代对象、异常处理、发邮件、数据库编程等。</p><h1 id="高级主要工作" tabindex="-1"><a class="header-anchor" href="#高级主要工作"><span>高级主要工作</span></a></h1><ul><li>亿级网站架构设计</li><li>性能优化</li><li>容器化落地</li><li>大规模自动化运维</li><li>平台化工作</li></ul><h2 id="_1-web静态缓存" tabindex="-1"><a class="header-anchor" href="#_1-web静态缓存"><span><strong>1）Web静态缓存</strong></span></a></h2><p>用户老喊着访问网站慢，看看服务器资源还很富裕啊，网站访问慢也许不是服务器资源饱和导致的，影响因素很多，例如网络、转发层数等。</p><p>对于网络，存在南北通信问题，之间访问会慢，这个可以使用CDN解决，同时缓存静态页面，尽可能将请求拦截在最上层响应，减少后端请求和响应时间。</p><p>如果不用CDN，也可以使用Squid、Varnish、Nginx这样的缓存服务实现静态页面缓存，放到流量入口处。</p><h2 id="_2-集群" tabindex="-1"><a class="header-anchor" href="#_2-集群"><span><strong>2）集群</strong></span></a></h2><p>单台服务器终究资源有限，抵抗高访问量肯定是无法支撑的，解决此问题最关键的技术就是采用负载均衡器，水平扩展多台Web服务器，同时对外提供服务，这样就成倍扩展性能了。</p><p>负载均衡器主流开源技术有LVS、HAProxy和Nginx。一定要熟悉一两个。</p><p>Web服务器性能瓶颈解决了，数据库更为关键，还是采用集群，就拿MySQL来说，可以一主多从架构，在此基础上读写分离，主负责写，多从负责读，从库可水平扩展，前面再来个四层负载均衡器，承载千万级PV，妥妥的！</p><p>高可用软件也得会，避免单点的利器，主流的有Keepalived、Heartbeat等。</p><p>随着业务扩展，网站图片越来越多！NFS共享存储支撑不过了，处理很慢。上分布式文件系统，并行处理任务，无单点，高可靠，高性能等特性。</p><p>主流的有FastDFS、MFS、HDFS、Ceph、GFS等。初期的话我建议学习下FastDFS，能满足中小规模需求。</p><h2 id="_3-容器化" tabindex="-1"><a class="header-anchor" href="#_3-容器化"><span><strong>3）容器化</strong></span></a></h2><p>硬件服务器资源利用率很低，甚是浪费！可以把空闲多的服务器虚拟化，弄成很多个的虚拟机，每个虚拟机就是一个完整的操作系统。可以很大程度提高资源利用率。</p><p>主流私有云平台实现：KVM+OpenStack</p><p>虚拟机作为基础平台还可以，但应用业务弹性伸缩也太重量了吧！启动好几分钟，文件又这么大，快速扩展太费劲了！</p><p>好说，上容器，容器主要特点就是快速部署和环境隔离。一个服务封装到镜像中，分分钟钟可创建几百个容器。</p><p>主流的容器技术非Docker莫属了。</p><p>当然，生产环境单机Docker大多数情况下是无法满足业务需求的，可以基于Kubernetes构建容器平台，集群化管理容器，形成一个大的资源池，为基础架构提供有力的支撑。</p><h2 id="_4-自动化运维" tabindex="-1"><a class="header-anchor" href="#_4-自动化运维"><span><strong>4）自动化运维</strong></span></a></h2><p>反反复复重复的工作，不但提高不了效率，价值也得不到体现。</p><p>一切运维工作标准化，例如环境版本、目录结构、操作系统等统一。在标准化基础上才能更方面的自动化，点点鼠标或者敲几个命令即可完成一项复杂的工作任务，爽哉爽哉~</p><p>因此，所有的操作尽可能自动化，减少人为失误，提高工作效率。</p><p>主流服务器集中管理工具：Ansible、Saltstack</p><p>持续集成工具：Jenkins、Gitlab</p><h2 id="_5-python开发进阶" tabindex="-1"><a class="header-anchor" href="#_5-python开发进阶"><span><strong>5）Python开发进阶</strong></span></a></h2><p>可以再深入学习下Python开发，掌握面向对象编程。</p><p>最好也掌学习一个Web框架开发网站，例如Django、Flask，主要是开发运维管理系统，将一些复杂的流程写到平台中，再集成集中管理工具，可打造一个属于运维自己的管理平台。</p><h2 id="_6-性能优化" tabindex="-1"><a class="header-anchor" href="#_6-性能优化"><span><strong>6）性能优化</strong></span></a></h2><p>只会部署是远远不够的，性能优化能最大化提升服务承载量。</p><p>这块也是比较难的，也是高薪的关键点之一，为了钱也得下点功夫学习啊！</p><p>可以从硬件层、操作系统层、软件层和架构层维度展开思考。</p><p><strong>二、师门任务篇</strong></p><p>掌握 80% 互联网公司会用到的技术才有更大竞争力！</p><p><img src="https://imgoss.xgss.net/picgo/RNNc0Xz51Fyj7O.jpg?aliyun" alt="RNNc0Xz51Fyj7O"></p><h2 id="_1-坚持" tabindex="-1"><a class="header-anchor" href="#_1-坚持"><span><strong>1）坚持</strong></span></a></h2><p>学习是一个很漫长的过程，是我们每个人需要用一生去坚持的事业。</p><p>贵在坚持，难在坚持，成在坚持！</p><h2 id="_2-目标" tabindex="-1"><a class="header-anchor" href="#_2-目标"><span><strong>2）目标</strong></span></a></h2><p>没有目标的不叫工作，没有量化的不叫目标。</p><p>每到一个阶段，制定一个目标。</p><p>比如：先定一个能达到的小目标，挣它一个亿！</p><h2 id="_3-兴趣" tabindex="-1"><a class="header-anchor" href="#_3-兴趣"><span><strong>3）兴趣</strong></span></a></h2><p>如果你热爱这个行业，那它就不只是一份工作。</p><p>如果你不热爱这个行业，可能是做不好，也可能坚持不超过2年，因为你心里上过不去。</p>',104)]))}const l=p(r,[["render",h]]),d=JSON.parse('{"path":"/article/omg36fuu/","title":"初级、中级、高级运维各应必备哪些技能","lang":"en-US","frontmatter":{"title":"初级、中级、高级运维各应必备哪些技能","createTime":"2025/05/27 17:51:17","permalink":"/article/omg36fuu/"},"git":{"createdTime":1749111496000,"updatedTime":1750129445000,"contributors":[{"name":"star","username":"star","email":"star@xgss.net","commits":2,"url":"https://github.com/star"}]},"readingTime":{"minutes":8.84,"words":2652},"filePathRelative":"linux-basis/初级、中级、高级运维各应必备哪些技能.md"}');export{l as comp,d as data};
