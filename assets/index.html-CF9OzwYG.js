import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as i,o as e}from"./app-BiQR_lPj.js";const p={};function l(t,s){return e(),n("div",null,s[0]||(s[0]=[i(`<h1 id="搭建基于github开源项目chatgpt的微信聊天机器人教程" tabindex="-1"><a class="header-anchor" href="#搭建基于github开源项目chatgpt的微信聊天机器人教程"><span>搭建基于Github开源项目ChatGPT的微信聊天机器人教程</span></a></h1><h2 id="项目介绍" tabindex="-1"><a class="header-anchor" href="#项目介绍"><span>项目介绍</span></a></h2><p>ChatGPT近期以强大的对话和信息整合能力风靡全网，可以写代码、改论文、讲故事，几乎无所不能，这让人不禁有个大胆的想法，能否用他的对话模型把我们的微信打造成一个智能机器人，可以在与好友对话中给出意想不到的回应，而且再也不用担心女朋友影响我们 打游戏 工作了。</p><p>Github地址：<a href="https://github.com/zhayujie/chatgpt-on-wechat" target="_blank" rel="noopener noreferrer">https://github.com/zhayujie/chatgpt-on-wechat</a></p><h2 id="项目功能" tabindex="-1"><a class="header-anchor" href="#项目功能"><span>项目功能</span></a></h2><ul><li><strong>多端部署：</strong> 有多种部署方式可选择且功能完备，目前已支持个人微信，微信公众号和企业微信应用等部署方式</li><li><strong>基础对话：</strong> 私聊及群聊的消息智能回复，支持多轮会话上下文记忆，支持 GPT-3，GPT-3.5，GPT-4模型</li><li><strong>语音识别：</strong> 可识别语音消息，通过文字或语音回复，支持 azure, baidu, google, openai等多种语音模型</li><li><strong>图片生成：</strong> 支持图片生成 和 图生图（如照片修复），可选择 Dell-E, stable diffusion, replicate模型</li><li><strong>丰富插件：</strong> 支持个性化插件扩展，已实现多角色切换、文字冒险、敏感词过滤、聊天记录总结等插件</li><li><strong>Tool工具：</strong> 与操作系统和互联网交互，支持最新信息搜索、数学计算、天气和资讯查询、网页总结，基于 <a href="https://github.com/goldfishh/chatgpt-tool-hub" target="_blank" rel="noopener noreferrer">chatgpt-tool-hub</a> 实现</li></ul><h1 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作"><span>准备工作</span></a></h1><ol><li>科学上网的环境</li><li>chatgpt账号，并且获取到 openAI API key <a href="https://link.juejin.cn?target=https://platform.openai.com/account/api-keys" target="_blank" rel="noopener noreferrer">API管理界面</a></li><li>本次测试使用的是微软云-美国节点，系统：ubuntu 22.04</li></ol><h2 id="安装环境" tabindex="-1"><a class="header-anchor" href="#安装环境"><span>安装环境</span></a></h2><h2 id="python环境" tabindex="-1"><a class="header-anchor" href="#python环境"><span>python环境</span></a></h2><p>本机的版本是3.10.6，如果没有请安装，还需要pip3</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># python3 --version</span></span>
<span class="line"><span>Python 3.10.6</span></span>
<span class="line"><span># apt install python3-pip</span></span>
<span class="line"><span># pip3 --version</span></span>
<span class="line"><span>pip 22.0.2 from /usr/lib/python3/dist-packages/pip (python 3.10)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="克隆项目代码" tabindex="-1"><a class="header-anchor" href="#克隆项目代码"><span>克隆项目代码</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># git clone https://github.com/zhayujie/chatgpt-on-wechat</span></span>
<span class="line"><span># cd chatgpt-on-wechat/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="安装核心依赖" tabindex="-1"><a class="header-anchor" href="#安装核心依赖"><span>安装核心依赖</span></a></h2><p>能够使用itchat创建机器人，并具有文字交流功能所需的最小依赖集合</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># pip3 install -r requirements.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行该命令后会自动安装所需的各种依赖，静待安装完成即可。</p><p><img src="https://imgoss.xgss.net/picgo/image-20230713140733856.png?aliyun" alt="image-20230713140733856"></p><h2 id="修改配置文件" tabindex="-1"><a class="header-anchor" href="#修改配置文件"><span>修改配置文件</span></a></h2><p>配置文件的模板在根目录的config-template.json中，需复制该模板创建最终生效的 config.json 文件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># cp config-template.json config.json</span></span>
<span class="line"><span># vi config.json</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后修改config.json文件，按需求更改配置：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># config.json文件内容示例</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;open_ai_api_key&quot;: &quot;YOUR API KEY&quot;,                          # 填入上面创建的 OpenAI API KEY</span></span>
<span class="line"><span>  &quot;model&quot;: &quot;gpt-3.5-turbo&quot;,                                   # 模型名称。当use_azure_chatgpt为true时，其名称为Azure上model deployment名称</span></span>
<span class="line"><span>  &quot;proxy&quot;: &quot;127.0.0.1:7890&quot;,                                  # 代理客户端的ip和端口</span></span>
<span class="line"><span>  &quot;single_chat_prefix&quot;: [&quot;bot&quot;, &quot;@bot&quot;],                      # 私聊时文本需要包含该前缀才能触发机器人回复</span></span>
<span class="line"><span>  &quot;single_chat_reply_prefix&quot;: &quot;[bot] &quot;,                       # 私聊时自动回复的前缀，用于区分真人</span></span>
<span class="line"><span>  &quot;group_chat_prefix&quot;: [&quot;@bot&quot;],                              # 群聊时包含该前缀则会触发机器人回复</span></span>
<span class="line"><span>  &quot;group_name_white_list&quot;: [&quot;ChatGPT测试群&quot;, &quot;ChatGPT测试群2&quot;], # 开启自动回复的群名称列表</span></span>
<span class="line"><span>  &quot;group_chat_in_one_session&quot;: [&quot;ChatGPT测试群&quot;],              # 支持会话上下文共享的群名称  </span></span>
<span class="line"><span>  &quot;image_create_prefix&quot;: [&quot;画&quot;, &quot;看&quot;, &quot;找&quot;],                   # 开启图片回复的前缀</span></span>
<span class="line"><span>  &quot;conversation_max_tokens&quot;: 1000,                            # 支持上下文记忆的最多字符数</span></span>
<span class="line"><span>  &quot;speech_recognition&quot;: false,                                # 是否开启语音识别</span></span>
<span class="line"><span>  &quot;group_speech_recognition&quot;: false,                          # 是否开启群组语音识别</span></span>
<span class="line"><span>  &quot;use_azure_chatgpt&quot;: false,                                 # 是否使用Azure ChatGPT service代替openai ChatGPT service. 当设置为true时需要设置 open_ai_api_base，如 https://xxx.openai.azure.com/</span></span>
<span class="line"><span>  &quot;azure_deployment_id&quot;: &quot;&quot;,                                  # 采用Azure ChatGPT时，模型部署名称</span></span>
<span class="line"><span>  &quot;character_desc&quot;: &quot;你是ChatGPT, 一个由OpenAI训练的大型语言模型, 你旨在回答并解决人们的任何问题，并且可以使用多种语言与人交流。&quot;,  # 人格描述</span></span>
<span class="line"><span>  # 订阅消息，公众号和企业微信channel中请填写，当被订阅时会自动回复，可使用特殊占位符。目前支持的占位符有{trigger_prefix}，在程序中它会自动替换成bot的触发词。</span></span>
<span class="line"><span>  &quot;subscribe_msg&quot;: &quot;感谢您的关注！\\n这里是ChatGPT，可以自由对话。\\n支持语音对话。\\n支持图片输出，画字开头的消息将按要求创作图片。\\n支持角色扮演和文字冒险等丰富插件。\\n输入{trigger_prefix}#help 查看详细指令。&quot;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>以下内容必须修改：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>· open_ai_api_key：替换为你的key，注意用双引号包裹。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>· proxy：修改为&quot;x.x.x.x:7890&quot;，这是之前启动的代理客户端监听的ip和端口。因为我是在服务器是可以直接连接chatgpt的，所有不用配置</span></span>
<span class="line"><span></span></span>
<span class="line"><span>另外，group_name_white_list字段用于设置启用聊天机器人的群里，只有把群聊名称写到这个数组里才支持在这个群聊中与机器人对话。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>详细的配置说明参见项目自述文件： https://github.com/zhayujie/chatgpt-on-wechat#%E9%85%8D%E7%BD%AE</p><h1 id="运行程序" tabindex="-1"><a class="header-anchor" href="#运行程序"><span>运行程序</span></a></h1><p>配置完成后，使用nohup命令在后台运行程序：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span> # touch nohup.out      首次运行需要新建日志文件 </span></span>
<span class="line"><span> # nohup python3 app.py &amp; tail -f nohup.out  在后台运行程序并通过日志输出二维码</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://imgoss.xgss.net/picgo/image-20230713153204494.png?aliyun" alt="image-20230713153204494"></p><p>用<strong>微信小号（即充当机器人的微信号）</strong> 扫码登录后程序即可运行于服务器后台，此时可通过 ctrl+c 关闭日志，不会影响后台程序的运行。使用</p><p><code>ps -ef | grep app.py | grep -v grep</code> 命令可查看运行于后台的进程。</p><p>如果想要重新启动程序可以先 kill 掉对应的进程。日志关闭后如果想要再次打开只需输入 tail -f nohup.out。此外，scripts 目录下有一键运行、关闭程序的脚本供使用。</p><p><strong>多账号支持</strong>： 将项目复制多份，分别启动程序，用不同账号扫码登录即可实现同时运行。 <strong>特殊指令</strong>： 用户向机器人发送 <strong>#reset</strong> 即可清空该用户的上下文记忆。</p><p>登录后，手机登录微信小号，可以看到显示电脑已登录。</p><h2 id="实际效果" tabindex="-1"><a class="header-anchor" href="#实际效果"><span>实际效果</span></a></h2><p><img src="https://imgoss.xgss.net/picgo/image-20230713155830837.png?aliyun" alt="image-20230713155830837"></p><h2 id="解决微信登录报错" tabindex="-1"><a class="header-anchor" href="#解决微信登录报错"><span>解决微信登录报错</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>Please press confirm on your phone.</span></span>
<span class="line"><span>[ERROR][2023-07-13 06:26:36][app.py:52] - App startup failed!</span></span>
<span class="line"><span>[ERROR][2023-07-13 06:26:36][app.py:53] - &#39;wxsid&#39;</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>  File &quot;app.py&quot;, line 50, in run</span></span>
<span class="line"><span>    channel.startup()</span></span>
<span class="line"><span>  File &quot;/chatgpt-on-wechat/channel/wechat/wechat_channel.py&quot;, line 115, in startup</span></span>
<span class="line"><span>    itchat.auto_login(</span></span>
<span class="line"><span>  File &quot;/chatgpt-on-wechat/lib/itchat/components/register.py&quot;, line 38, in auto_login</span></span>
<span class="line"><span>    self.login(enableCmdQR=enableCmdQR, picDir=picDir, qrCallback=qrCallback,</span></span>
<span class="line"><span>  File &quot;/chatgpt-on-wechat/lib/itchat/components/login.py&quot;, line 61, in login</span></span>
<span class="line"><span>    status = self.check_login()</span></span>
<span class="line"><span>  File &quot;/chatgpt-on-wechat/lib/itchat/components/login.py&quot;, line 154, in check_login</span></span>
<span class="line"><span>    if process_login_info(self, r.text):</span></span>
<span class="line"><span>  File &quot;/chatgpt-on-wechat/lib/itchat/components/login.py&quot;, line 206, in process_login_info</span></span>
<span class="line"><span>    core.loginInfo[&#39;wxsid&#39;] = core.loginInfo[&#39;BaseRequest&#39;][&#39;Sid&#39;] = cookies[&quot;wxsid&quot;]</span></span>
<span class="line"><span>KeyError: &#39;wxsid&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>微信没有实名认证的，实名认证即可。</p><h1 id="railway部署-简单-收费故放弃" tabindex="-1"><a class="header-anchor" href="#railway部署-简单-收费故放弃"><span>railway部署（简单，收费故放弃）</span></a></h1><h2 id="点击一键部署" tabindex="-1"><a class="header-anchor" href="#点击一键部署"><span>点击一键部署</span></a></h2><p><img src="https://imgoss.xgss.net/picgo/image-20230713113534603.png?aliyun" alt="image-20230713113534603"></p><h2 id="deploy-now" tabindex="-1"><a class="header-anchor" href="#deploy-now"><span>deploy now</span></a></h2><p><img src="https://imgoss.xgss.net/picgo/image-20230713113214751.png?aliyun" alt="image-20230713113214751"></p><h2 id="授权" tabindex="-1"><a class="header-anchor" href="#授权"><span>授权</span></a></h2><p><img src="https://imgoss.xgss.net/picgo/image-20230713113237716.png?aliyun" alt="image-20230713113237716"></p><h2 id="填写配置" tabindex="-1"><a class="header-anchor" href="#填写配置"><span>填写配置</span></a></h2><p><img src="https://imgoss.xgss.net/picgo/image-20230713114544444.png?aliyun" alt="image-20230713114544444"></p><h2 id="需要收费-放弃。" tabindex="-1"><a class="header-anchor" href="#需要收费-放弃。"><span>需要收费，放弃。</span></a></h2><p><img src="https://imgoss.xgss.net/picgo/image-20230713131738975.png?aliyun" alt="image-20230713131738975"></p><p>作者的新项目：https://github.com/zhayujie/bot-on-anything</p><p>将 ChatGPT、必应、文心一言、谷歌Bard 等对话模型连接各类应用，如微信、公众号、QQ、Telegram、Gmail、Slack、Web、企业微信、飞书、钉钉等。</p>`,54)]))}const c=a(p,[["render",l]]),h=JSON.parse('{"path":"/article/gatk6mta/","title":"11.搭建基于Github开源项目ChatGPT的微信聊天机器人教程","lang":"en-US","frontmatter":{"title":"11.搭建基于Github开源项目ChatGPT的微信聊天机器人教程","createTime":"2025/05/27 17:51:17","permalink":"/article/gatk6mta/"},"git":{"createdTime":1749111496000,"updatedTime":1750129445000,"contributors":[{"name":"star","username":"star","email":"star@xgss.net","commits":2,"url":"https://github.com/star"}]},"readingTime":{"minutes":5.87,"words":1762},"filePathRelative":"chatgpt/11.搭建基于Github开源项目ChatGPT的微信聊天机器人教程.md"}');export{c as comp,h as data};
