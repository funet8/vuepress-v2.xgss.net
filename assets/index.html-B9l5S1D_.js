import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as n,o as i}from"./app-BiQR_lPj.js";const p={};function t(l,s){return i(),e("div",null,s[0]||(s[0]=[n(`<h1 id="安利免费开源的声音克隆、文本转语音整合包软件、一键本地安装" tabindex="-1"><a class="header-anchor" href="#安利免费开源的声音克隆、文本转语音整合包软件、一键本地安装"><span>安利免费开源的声音克隆、文本转语音整合包软件、一键本地安装！</span></a></h1><p>大家好，我是星哥，今天给大家介绍两款声音克隆、文本转语音的软件，一个是ChatTTS和Spark-TTS，并且都有一键安装包，让你无需复杂的配置，就能在本地轻松体验声音的魅力。</p><p><img src="https://imgoss.xgss.net/picgo/image-20250402195740983.png?aliyun" alt="image-20250402195740983"></p><h1 id="chattts是什么" tabindex="-1"><a class="header-anchor" href="#chattts是什么"><span>ChatTTS是什么？</span></a></h1><p>ChatTTS是专为对话场景设计的语音生成模型，特别适用于大型语言模型(LLM)助手的对话任务，以及诸如对话式音频和视频介绍等应用。它支持中文和英文，通过使用大约100,000小时的中文和英文数据进行训练，ChatTTS在语音合成中表现出高质量和自然度。</p><p>开源地址： https://github.com/2noise/ChatTTS</p><h1 id="安装chattts" tabindex="-1"><a class="header-anchor" href="#安装chattts"><span>安装ChatTTS</span></a></h1><p>安装ChatTTS有3种方式，第1种是Docker compose安装ChatTTS-ui(推荐)、第2种是安装一键安装包（推荐）、第3种本地安装方式、</p><h1 id="本地部署chattts" tabindex="-1"><a class="header-anchor" href="#本地部署chattts"><span>本地部署ChatTTS</span></a></h1><h2 id="系统环境介绍" tabindex="-1"><a class="header-anchor" href="#系统环境介绍"><span>系统环境介绍</span></a></h2><p>以下都安装这个系统来介绍</p><p>系统：Windows11专业版</p><p>CPU: 英特尔I7-13700KF</p><p>内存： 32G</p><p>硬盘：1T nvme SSD +4T 机械</p><p>显卡：RTX 4070 Ti</p><p>python版本：Python 3.13.2</p><p>系统要安装Docker和Docker compose</p><h1 id="docker-compose安装chattts-ui-推荐" tabindex="-1"><a class="header-anchor" href="#docker-compose安装chattts-ui-推荐"><span>Docker compose安装ChatTTS-ui(推荐)</span></a></h1><p>开源地址：https://github.com/jianchang512/ChatTTS-ui</p><h2 id="_1-拉取项目仓库" tabindex="-1"><a class="header-anchor" href="#_1-拉取项目仓库"><span>1.拉取项目仓库</span></a></h2><p>在任意路径下克隆项目，例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>git clone https://github.com/jianchang512/ChatTTS-ui.git chat-tts-ui</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_2-启动-runner" tabindex="-1"><a class="header-anchor" href="#_2-启动-runner"><span>2.启动 Runner</span></a></h2><p>进入到项目目录：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>cd chat-tts-ui</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>启动容器并查看初始化日志：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>gpu版本</span></span>
<span class="line"><span>docker compose -f docker-compose.gpu.yaml up -d </span></span>
<span class="line"><span></span></span>
<span class="line"><span>cpu版本    </span></span>
<span class="line"><span>docker compose -f docker-compose.cpu.yaml up -d</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker compose logs -f --no-log-prefix</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://imgoss.xgss.net/picgo/image-20250402173803394.png?aliyun" alt="image-20250402173803394"></p><p>稍等一段时间，使用命令docker ps查看，如下则表示安装成功。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker ps</span></span>
<span class="line"><span>CONTAINER ID   IMAGE                                                       COMMAND                  CREATED         STATUS         PORTS                                                                              NAMES</span></span>
<span class="line"><span>7cce18cbbe8d   chat-tts-ui-chat-tts-ui                                     &quot;/usr/local/bin/dock…&quot;   7 minutes ago   Up 2 minutes   7070-7071/tcp, 8080-8082/tcp, 0.0.0.0:9966-&gt;9966/tcp, :::9966-&gt;9966/tcp            chat-tts-ui</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-访问-chattts-webui" tabindex="-1"><a class="header-anchor" href="#_3-访问-chattts-webui"><span>3.访问 ChatTTS WebUI</span></a></h2><p><code>启动:[&#39;0.0.0.0&#39;, &#39;9966&#39;]</code>，也即，访问部署设备的 <code>IP:9966</code> 即可，例如：</p><ul><li>本机：<code>http://127.0.0.1:9966</code></li><li>服务器: <code>http://192.168.1.100:9966</code></li></ul><p><img src="https://imgoss.xgss.net/picgo/image-20250402180205298.png?aliyun" alt="image-20250402180205298"></p><h2 id="_4-生成语言" tabindex="-1"><a class="header-anchor" href="#_4-生成语言"><span>4.生成语言</span></a></h2><p>随便输入一段莎士比亚的《哈姆雷特》生存还是毁灭 莎士比亚 活着还是去死？这真是一个值得思虑的问题。</p><p>去忍受那狂暴的命运无情的摧残，还是挺身去反抗那无边的烦恼，把它扫一个干净。去死，去睡就结束了？如果睡眠能结束我们心灵的创伤和肉体所承受的千百样痛苦，那真是生存求之不得的天大的好事。</p><p><img src="https://imgoss.xgss.net/picgo/image-20250402193631331.png?aliyun" alt="image-20250402193631331"></p><p>可以调试好可以下载语音。</p><h1 id="windows预打包版-推荐" tabindex="-1"><a class="header-anchor" href="#windows预打包版-推荐"><span>Windows预打包版(推荐)</span></a></h1><p>从 Releases中下载压缩包，解压后双击 app.exe 即可使用 某些安全软件可能报毒，请退出或使用源码部署 英伟达显卡大于4G显存，并安装了CUDA11.8+后，将启用GPU加速</p><h2 id="chattts-ui整合包下载" tabindex="-1"><a class="header-anchor" href="#chattts-ui整合包下载"><span>ChatTTS-UI整合包下载</span></a></h2><p>文件大小： 3.69G</p><p>pan点baidu点com/s/1Hnqzm8ZdDKYX0dbvGmW38g?pwd=khds （浏览器中） 提取码: khds</p><p>由于平台不让放链接，可以关注“星哥玩云”公众号，回复“TTS安装包”获得ChatTTS和Spark-TTS的一键安装包</p><h1 id="本地安装-不推荐" tabindex="-1"><a class="header-anchor" href="#本地安装-不推荐"><span>本地安装（不推荐）</span></a></h1><h2 id="_1-安装python-和-git环境" tabindex="-1"><a class="header-anchor" href="#_1-安装python-和-git环境"><span>1.安装Python 和 git环境</span></a></h2><p>需要安装python和git软件</p><p>python需要 3.9+ 版本，比如我选择python 3.10.2</p><p>安装下git环境，这个就不详细将。</p><h2 id="_2-克隆-chattts-ui" tabindex="-1"><a class="header-anchor" href="#_2-克隆-chattts-ui"><span>2.克隆 ChatTTS-Ui</span></a></h2><p>3.解压后在根目录下输入CMD进入终端，然后依次执行下面的安装命令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>python -m venv venv</span></span>
<span class="line"><span>.\\venv\\scripts\\activate</span></span>
<span class="line"><span>pip install -r requirements.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-如果不需要cuda加速-执行" tabindex="-1"><a class="header-anchor" href="#_4-如果不需要cuda加速-执行"><span>4.如果不需要CUDA加速，执行</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>pip install torch==2.1.2 torchaudio==2.1.2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果需要CUDA加速，执行</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>pip install torch==2.1.2 torchaudio==2.1.2 --index-url https://download.pytorch.org/whl/cu118</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_5-启动" tabindex="-1"><a class="header-anchor" href="#_5-启动"><span>5.启动</span></a></h2><p>最后执行 python app.py 启动，将自动打开浏览器窗口，默认地址 http://127.0.0.1:9966</p><p>(注意：默认从 modelscope 魔塔下载模型，不可使用代理下载，请关闭代理)</p><h2 id="_6-下载modelscope下载模型" tabindex="-1"><a class="header-anchor" href="#_6-下载modelscope下载模型"><span>6.下载modelscope下载模型</span></a></h2><p>源码部署启动后，会先从 modelscope下载模型，但modelscope缺少spk_stat.pt，会报错，【<a href="https://huggingface.co/2Noise/ChatTTS/blob/main/asset/spk_stat.pt" target="_blank" rel="noopener noreferrer">点击下载 spk_stat.pt</a>】</p><p>下载后将该文件复制到 项目目录/models/pzc163/chatTTS/asset/ 文件夹内</p><p>注意 modelscope 仅允许中国大陆ip下载模型，如果遇到 proxy 类错误，请关闭代理。</p><p>如果你希望从 huggingface.co 下载模型，请打开 app.py 查看大约第50行-60行的注释。如果需要GPU加速，必须是英伟达显卡，并且安装 cuda版本的torch</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># 默认从 modelscope 下载模型,如果想从huggingface下载模型，请将以下3行注释掉</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CHATTTS_DIR = snapshot_download(&#39;pzc163/chatTTS&#39;,cache_dir=MODEL_DIR)</span></span>
<span class="line"><span>chat = ChatTTS.Chat()</span></span>
<span class="line"><span>chat.load_models(source=&quot;local&quot;,local_path=CHATTTS_DIR)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 如果希望从 huggingface.co下载模型，将以下注释删掉。将上方3行内容注释掉</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#os.environ[&#39;HF_HUB_CACHE&#39;]=MODEL_DIR</span></span>
<span class="line"><span>#os.environ[&#39;HF_ASSETS_CACHE&#39;]=MODEL_DIR</span></span>
<span class="line"><span>#chat = ChatTTS.Chat()</span></span>
<span class="line"><span>#chat.load_models()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="spark-tts是什么" tabindex="-1"><a class="header-anchor" href="#spark-tts是什么"><span>Spark-TTS是什么</span></a></h1><p>Spark-TTS 是最近备受瞩目的一个语音克隆开源项目，由香港科技大学、西北工业大学、上海交通大学等多所高校联合研发。经过本地测试，其效果与 F5-TTS 不相上下。</p><p>Spark-TTS 支持中英文语音克隆，安装部署过程并不复杂。本文将详细介绍如何安装部署，并进行修改，使其兼容 F5-TTS 的 API 接口，从而可以直接在 pyVideoTrans 软件的 F5-TTS 配音渠道中使用。</p><h2 id="spark-tts的项目地址" tabindex="-1"><a class="header-anchor" href="#spark-tts的项目地址"><span>Spark-TTS的项目地址</span></a></h2><ul><li><strong>项目官网</strong>：<a href="https://sparkaudio.github.io/spark-tts/?utm_source=ai-bot.cn" target="_blank" rel="noopener noreferrer">https://sparkaudio.github.io/spark-tts/</a></li><li><strong>Github仓库</strong>：https://github.com/SparkAudio/Spark-TTS</li><li><strong>HuggingFace模型库</strong>：https://huggingface.co/SparkAudio/Spark-TTS-0.5B</li></ul><h2 id="spark-tts的主要功能" tabindex="-1"><a class="header-anchor" href="#spark-tts的主要功能"><span>Spark-TTS的主要功能</span></a></h2><ul><li><strong>零样本文本到语音转换</strong>：Spark-TTS 能在没有特定语音数据的情况下，复现说话人的声音，实现零样本语音克隆。</li><li><strong>多语言支持</strong>：Spark-TTS 支持中英双语，可实现跨语言语音合成。用户可以用一种语言输入文本，生成另一种语言的语音输出，满足多语言场景下的语音合成需求。</li><li><strong>可控语音生成</strong>：用户可以通过调整参数（如性别、音调、语速、音色等）来定制虚拟说话者的声音，生成符合特定需求的语音内容。</li><li><strong>高效简洁的语音合成</strong>：基于 Qwen2.5 架构，Spark-TTS 无需额外的生成模型（如流匹配模型），直接从 LLM 预测的编码中重建音频，提高了语音合成的效率。</li><li><strong>虚拟说话者创建</strong>：用户可以创建完全由自己定义的虚拟说话者，通过参数调整使其具有独特的语音风格，适用于虚拟主播、有声读物等场景。</li><li><strong>语音克隆与风格迁移</strong>：Spark-TTS 支持从少量语音样本中提取风格特征，将其迁移到合成语音中，实现个性化语音风格的复制和迁移。</li></ul><h2 id="spark-tts的应用场景" tabindex="-1"><a class="header-anchor" href="#spark-tts的应用场景"><span>Spark-TTS的应用场景</span></a></h2><ul><li><strong>语音助手开发</strong>：Spark-TTS 可以用于开发个性化的语音助手，通过调整音色、语速和语调等参数，生成自然流畅的语音输出，为用户提供更加人性化和个性化的交互体验。</li><li><strong>多语言内容创作</strong>：工具支持中英双语，能实现跨语言语音合成，适合需要在不同语言版本之间保持一致语音风格的内容创作者，例如制作多语言的有声读物、广告或教育材料。</li><li><strong>智能客服与信息播报</strong>：Spark-TTS 可以将文字信息转化为自然语音，用于智能客服系统，提供24小时不间断的服务，或者在公共交通、机场、医院等公共场所进行信息播报。</li><li><strong>语音克隆与虚拟角色配音</strong>：Spark-TTS 支持零样本语音克隆，能快速复制特定说话人的声音风格，适用于虚拟角色配音、动画制作或虚拟主播等领域。</li></ul><h1 id="安装spark-tts" tabindex="-1"><a class="header-anchor" href="#安装spark-tts"><span>安装Spark-TTS</span></a></h1><h2 id="spark-tts整合安装包" tabindex="-1"><a class="header-anchor" href="#spark-tts整合安装包"><span>Spark-TTS整合安装包</span></a></h2><p>由于迅雷限速下载还需要几个小时，等下载好了，再发链接</p><p><img src="https://imgoss.xgss.net/picgo/image-20250402192830272.png?aliyun" alt="image-20250402192830272"></p><p>由于平台不让放链接，可以关注“星哥玩云”公众号，回复“TTS安装包”获得ChatTTS和Spark-TTS的一键安装包</p><h2 id="_1-下载spark-tts源码" tabindex="-1"><a class="header-anchor" href="#_1-下载spark-tts源码"><span>1. 下载Spark-TTS源码</span></a></h2><p>推荐有一定操作基础的这样安装</p><p>首先，在非系统盘创建一个由英文或数字组成的文件夹，例如 <code>D:/spark</code>。之所以要求使用英文、数字且非系统盘，是为了尽量避免可能出现的中文、权限等方面的错误。</p><p>然后，访问 Spark-TTS 官方代码仓库：https://github.com/SparkAudio/Spark-TTS</p><p>如下图所示，点击下载源码的 ZIP 包：</p><p><img src="https://imgoss.xgss.net/picgo/1742401324185_image.png?aliyun" alt="点击下载源码 zip 包"></p><p>下载完成后解压，将所有文件和文件夹复制到 <code>D:/spark</code> 文件夹中。复制后的目录结构应如下图所示：</p><p><img src="https://imgoss.xgss.net/picgo/1742401383947_image.png?aliyun" alt="复制后目录结构如图"></p><h2 id="_2-创建虚拟环境并安装依赖" tabindex="-1"><a class="header-anchor" href="#_2-创建虚拟环境并安装依赖"><span>2. 创建虚拟环境并安装依赖</span></a></h2><p>创建虚拟环境</p><p>在该文件夹地址栏输入 <code>cmd</code> 并回车，在弹出的黑色终端窗口中执行以下命令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>python -m venv venv</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行后，<code>D:/spark</code> 目录下会多出一个 <code>venv</code> 文件夹：</p><p><img src="https://imgoss.xgss.net/picgo/1742401590109_image.png?aliyun" alt="成功后文件夹会多出一个 venv 目录"></p><blockquote><p><strong>注意：</strong> 如果在执行时提示 <code>python 不是内部或外部命令</code>，说明没有安装 Python 或没有将其添加到系统环境变量中，请参考相关文章安装 Python。</p></blockquote><p>接下来，执行 <code>venv\\scripts\\activate</code> 激活虚拟环境。激活后，终端行首会出现 <code>(venv)</code> 字样，表示激活成功。后续所有命令都需要在此环境下执行，每次执行前请检查是否已激活。</p><p><img src="https://imgoss.xgss.net/picgo/1742401699839_image.png?aliyun" alt="确保开头有(venv)字样"></p><p>安装依赖</p><p>在已激活的虚拟环境中，继续在终端中执行以下命令，安装所有依赖：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>pip install -r requirements.txt</span></span>
<span class="line"><span></span></span>
<span class="line"><span>或者：</span></span>
<span class="line"><span>pip install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-下载模型" tabindex="-1"><a class="header-anchor" href="#_3-下载模型"><span>3. 下载模型</span></a></h2><p>开源 AI 项目所需的模型通常托管在 Hugging Face (huggingface.co) 上。由于该网站在国内已被屏蔽，因此需要科学上网才能下载模型。请确保已配置好科学上网环境，并设置了系统代理。</p><p>在当前目录 <code>D:/spark</code> 下创建一个名为 <code>down.txt</code> 的文本文件，将以下代码复制粘贴到文件中并保存：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>from huggingface_hub import snapshot_download</span></span>
<span class="line"><span>snapshot_download(&quot;SparkAudio/Spark-TTS-0.5B&quot;, local_dir=&quot;pretrained_models/Spark-TTS-0.5B&quot;)</span></span>
<span class="line"><span>print(&#39;下载完成&#39;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，在已激活虚拟环境的终端窗口中执行以下命令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>python down.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意检查命令行前是否存在 <code>(venv)</code>：</p><p>等待终端提示下载完成。</p><p>如果输出类似以下信息，说明网络连接错误，可能是科学上网环境配置不正确：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>Returning existing local_dir \`pretrained_models\\Spark-TTS-0.5B\` as remote repo cannot be accessed in \`snapshot_download\` ((MaxRetryError(&quot;HTTPSConnectionPool(host=&#39;huggingface.co&#39;, port=443): Max retries exceeded with url: /api/models/SparkAudio/Spark-TTS-0.5B/revision/main (Caused by ConnectTimeoutError(&lt;urllib3.connection.HTTPSConnection object at 0x000001BC4C8A4430&gt;, &#39;Connection to huggingface.co timed out. (connect timeout=None)&#39;))&quot;), &#39;(Request ID: aa61d1fb-ffc7-4479-9a99-2258c1bc0aee)&#39;)).</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="https://imgoss.xgss.net/picgo/1742402280563_image.png?aliyun" alt="连接失败，请正确配置科学上网环境"></p><h2 id="_4-启动-web-界面" tabindex="-1"><a class="header-anchor" href="#_4-启动-web-界面"><span>4. 启动 Web 界面</span></a></h2><p>模型下载完成后，就可以启动并打开 Web 界面了。</p><p>在已激活虚拟环境的终端中执行以下命令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>python webui.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>等待出现如下信息时，表示启动完成：</p><p><img src="https://pvtr2.pyvideotrans.com/1742400621321_image.png" alt="启动成功"></p><p>此时，可以在浏览器中打开地址 <code>http://127.0.0.1:7860</code>，Web 界面如下图所示：</p><p><img src="https://imgoss.xgss.net/picgo/1742400483861_image.png?aliyun" alt="打开web界面"></p><h2 id="_5-语音克隆测试" tabindex="-1"><a class="header-anchor" href="#_5-语音克隆测试"><span>5. 语音克隆测试<a href="https://pvt9.com/_posts/spark-tts#_5-%E8%AF%AD%E9%9F%B3%E5%85%8B%E9%9A%86%E6%B5%8B%E8%AF%95" target="_blank" rel="noopener noreferrer"></a></span></a></h2><p>如下图所示，选择一个你想要克隆音色的音频文件（时长 3-10 秒，发音清晰，背景干净）。</p><p>然后在右侧 <code>Text of prompt speech</code> 中输入该音频对应的文本内容，左侧输入你希望生成的语音文本，最后点击底部的 <strong>Generate</strong> 按钮开始执行。</p><p><img src="https://imgoss.xgss.net/picgo/1742402861915_image.png?aliyun" alt="执行语音克隆"></p><p>执行完成后，如下图所示。</p><h2 id="_6-在-pyvideotrans-软件中使用" tabindex="-1"><a class="header-anchor" href="#_6-在-pyvideotrans-软件中使用"><span>6. 在 pyVideotrans 软件中使用</span></a></h2><blockquote><p>Spark-TTS 与 F5-TTS 非常相似，只需进行简单修改，就可以直接在 pyVideotrans 的 F5-TTS 配音渠道中使用 Spark-TTS。</p></blockquote><p>打开 <code>webui.py</code> 文件，在大约第 135 行的上方粘贴以下代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>    def basic_tts(gen_text_input, ref_text_input, ref_audio_input,remove_silence=None,speed_slider=None):</span></span>
<span class="line"><span>        &quot;&quot;&quot;</span></span>
<span class="line"><span>        Gradio callback to clone voice using text and optional prompt speech.</span></span>
<span class="line"><span>        - text: The input text to be synthesised.</span></span>
<span class="line"><span>        - prompt_text: Additional textual info for the prompt (optional).</span></span>
<span class="line"><span>        - prompt_wav_upload/prompt_wav_record: Audio files used as reference.</span></span>
<span class="line"><span>        &quot;&quot;&quot;</span></span>
<span class="line"><span>        prompt_speech = ref_audio_input</span></span>
<span class="line"><span>        prompt_text_clean = None if len(ref_text_input) &lt; 2 else ref_text_input</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        audio_output_path = run_tts(</span></span>
<span class="line"><span>            gen_text_input,</span></span>
<span class="line"><span>            model,</span></span>
<span class="line"><span>            prompt_text=prompt_text_clean,</span></span>
<span class="line"><span>            prompt_speech=prompt_speech</span></span>
<span class="line"><span>        )</span></span>
<span class="line"><span>        return audio_output_path,prompt_text_clean</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://imgoss.xgss.net/picgo/1742403172227_image.png?aliyun" alt="特别要注意代码对应层级需对齐"></p><p><strong>特别注意：</strong> Python 代码使用空格进行缩进对齐，否则代码会报错。为避免出错，建议不要使用记事本打开 <code>webui.py</code> 文件，而是使用专业的代码编辑器，例如 Notepad++ 或 VSCode 等免费工具。</p><p>然后，找到大约第 190 行的 <code>generate_buttom_clone = gr.Button(&quot;Generate&quot;)</code> 代码。 在其上方粘贴以下代码，同样必须注意对齐：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>generate_buttom_clone2 = gr.Button(&quot;Generate2&quot;,visible=False)</span></span>
<span class="line"><span>generate_buttom_clone2.click(</span></span>
<span class="line"><span>       basic_tts,</span></span>
<span class="line"><span>       inputs=[</span></span>
<span class="line"><span>          text_input,</span></span>
<span class="line"><span>          prompt_text_input,</span></span>
<span class="line"><span>          prompt_wav_upload,</span></span>
<span class="line"><span>          text_input,</span></span>
<span class="line"><span>          text_input</span></span>
<span class="line"><span>       ],</span></span>
<span class="line"><span>       outputs=[audio_output,prompt_text_input],</span></span>
<span class="line"><span>       api_name=&quot;basic_tts&quot;</span></span>
<span class="line"><span> )</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://imgoss.xgss.net/picgo/1742403364923_image.png?aliyun" alt="注意层级对齐"></p><p>保存文件后，重新启动 <code>webui.py</code>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>python webui.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="https://pvtr2.pyvideotrans.com/1742403421047_image.png" alt="启动时务必注意(venv)"></p><ul><li>将地址 <code>http://127.0.0.1:7860</code> 填写到 pyVideotrans 软件的 “菜单” -&gt; “TTS 设置” -&gt; “F5-TTS” 的 API 地址中，即可开始使用。参考音频的位置和填写方式与 F5-TTS 的使用方法一致。</li></ul><h1 id="结束" tabindex="-1"><a class="header-anchor" href="#结束"><span>结束</span></a></h1><p>ChatTTS和Spark-TTS都是非常优秀的免费开源声音克隆、文本转语音软件。 感兴趣的小伙伴可以试试。</p><p>写文不易，如果你都看到了这里，请点个赞和在看，分享给更多的朋友；也别忘了关注星哥玩云！这里有满满的干货分享，还有轻松有趣的技术交流～点个赞、分享给身边的小伙伴，一起成长，一起玩转技术世界吧！ 😊</p>`,141)]))}const c=a(p,[["render",t]]),o=JSON.parse('{"path":"/article/a84oujm2/","title":"10.介绍两款免费开源的声音克隆文本转语音整软件、一键本地安装！","lang":"en-US","frontmatter":{"title":"10.介绍两款免费开源的声音克隆文本转语音整软件、一键本地安装！","createTime":"2025/05/27 17:51:17","permalink":"/article/a84oujm2/"},"git":{"createdTime":1749111496000,"updatedTime":1750129445000,"contributors":[{"name":"star","username":"star","email":"star@xgss.net","commits":2,"url":"https://github.com/star"}]},"readingTime":{"minutes":11.57,"words":3471},"filePathRelative":"chatgpt2025/10.介绍两款免费开源的声音克隆文本转语音整软件、一键本地安装！.md"}');export{c as comp,o as data};
