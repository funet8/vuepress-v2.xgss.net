import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as e,o as i}from"./app-BiQR_lPj.js";const l={};function p(d,s){return i(),n("div",null,s[0]||(s[0]=[e(`<h1 id="优雅、强大、轻量开源的多服务器监控神器" tabindex="-1"><a class="header-anchor" href="#优雅、强大、轻量开源的多服务器监控神器"><span>优雅、强大、轻量开源的多服务器监控神器</span></a></h1><p>在多台服务器同时运行的环境中，<strong>性能监控、状态告警、资源可视化</strong>是运维人员的日常必需。今天星哥要给大家介绍一款开源、轻量且颜值极高的服务器监控面板——<strong>哪吒监控（Nezha Monitoring）</strong>。</p><h2 id="什么是哪吒监控" tabindex="-1"><a class="header-anchor" href="#什么是哪吒监控"><span>什么是哪吒监控？</span></a></h2><p><strong>哪吒监控</strong>是一款基于 Go 语言开发的 <strong>高性能多服务器监控系统</strong>。它的定位是：<strong>轻量、灵活、美观、易用</strong>。 你可以在一台主服务器上部署控制端，再在多台被监控的服务器上部署 Agent，轻松实现统一管理与可视化监控。</p><p>相比于传统的 Zabbix、Prometheus 等方案，哪吒监控更简洁、上手更快，特别适合个人站长、小团队和中小型运维场景使用。</p><p><img src="https://imgoss.xgss.net/picgo-tx2025/QQ_1760886225512.png?tx" alt="img"></p><h2 id="核心特性" tabindex="-1"><a class="header-anchor" href="#核心特性"><span>核心特性</span></a></h2><h3 id="_1-多平台支持" tabindex="-1"><a class="header-anchor" href="#_1-多平台支持"><span>1. 多平台支持</span></a></h3><p>哪吒监控支持 Linux、Windows、macOS、ARM 架构等多种系统。无论是云服务器还是家用 NAS，都能轻松接入。</p><h3 id="_2-极简部署方式" tabindex="-1"><a class="header-anchor" href="#_2-极简部署方式"><span>2. 极简部署方式</span></a></h3><h3 id="_3-丰富的监控数据" tabindex="-1"><a class="header-anchor" href="#_3-丰富的监控数据"><span>3. 丰富的监控数据</span></a></h3><p>内置监控包括：</p><ul><li>CPU、内存、磁盘使用率</li><li>网络带宽与流量统计</li><li>系统负载、在线时长</li><li>服务状态与延迟检测</li></ul><p>还支持自定义探针任务，比如检测网站可用性、TCP 端口连通性等。</p><h3 id="_4-实时可视化与告警" tabindex="-1"><a class="header-anchor" href="#_4-实时可视化与告警"><span>4. 实时可视化与告警</span></a></h3><p>哪吒监控提供现代化前端界面，支持实时图表展示。 你还可以配置 Telegram、Slack 等通知渠道，当服务器异常时自动告警，秒级响应。</p><h3 id="_5-插件式架构" tabindex="-1"><a class="header-anchor" href="#_5-插件式架构"><span>5. 插件式架构</span></a></h3><p>支持扩展脚本和自定义命令，方便开发者根据实际需求定制功能。</p><h2 id="使用体验-轻盈又优雅的监控体验" tabindex="-1"><a class="header-anchor" href="#使用体验-轻盈又优雅的监控体验"><span>使用体验：轻盈又优雅的监控体验</span></a></h2><p>星哥在多台 VPS 上测试后，发现哪吒监控的性能占用极低，前端界面响应迅速。</p><p>面板采用 Vue + Tailwind 风格设计，清晰直观，操作逻辑非常友好。</p><p>更重要的是，它支持 <strong>反向连接模式</strong>，即便服务器在内网或防火墙后，也能轻松接入主控端，这对异地监控场景非常实用。</p><h1 id="服务端安装" tabindex="-1"><a class="header-anchor" href="#服务端安装"><span>服务端安装</span></a></h1><p>只需一条命令即可快速安装，无需复杂依赖。 常见部署方式：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -L</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://raw.githubusercontent.com/nezhahq/scripts/refs/heads/main/install.sh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nezha.sh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">chmod</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +x</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nezha.sh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./nezha.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果你的服务器位于中国大陆，可以使用镜像：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>curl -L https://gitee.com/naibahq/scripts/raw/main/install.sh -o nezha.sh &amp;&amp; chmod +x nezha.sh &amp;&amp; sudo CN=true ./nezha.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>几分钟搞定面板和 Agent 部署，真正的“开箱即用”。</p><p>以 Docker 安装为例，安装完成后按提示输入以下信息：</p><ul><li><code>请输入站点标题:</code> - 自定义站点标题。</li><li><code>请输入暴露端口:</code> - 公开访问端口（默认 8008，可自定义）。</li><li><code>请指定后台语言:</code> - 选择语言偏好。</li></ul><p>输入完成后，等待拉取 Docker 镜像。安装结束后，如果一切正常，你可以通过域名和端口号访问 Dashboard，例如： <code>http://dashboard.example.com:8008</code></p><p>如果需要再次运行安装脚本，可输入以下命令：</p><p>bash</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>./nezha.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>打开管理脚本。</p><p>登录到 Dashboard 配置界面</p><p>后台管理界面的路径为 <code>/dashboard</code>，你只需访问： <code>http://dashboard.example.com:8008/dashboard</code></p><p>首次登录的默认用户名和密码均为 <code>admin</code>。</p><p>WARNING</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>默认密码为弱密码，对于高权限的面板来说，使用弱密码非常危险！</span></span>
<span class="line"><span>建议安装后立即进入管理页面：点击头像 → “个人信息” → “更新个人资料”修改密码。</span></span>
<span class="line"><span>建议密码长度至少 18 位，并混合大小写字母、数字及符号。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nginx-配置示例" tabindex="-1"><a class="header-anchor" href="#nginx-配置示例"><span>Nginx 配置示例</span></a></h2><p>以下是使用 Nginx 配置反向代理的示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>server {</span></span>
<span class="line"><span>    listen 443 ssl http2;</span></span>
<span class="line"><span>    listen [::]:443 ssl http2;</span></span>
<span class="line"><span>    # http2 on; # Nginx &gt; 1.25.1，请注释上面两行，启用此行</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    server_name dashboard.example.com; # 替换为你的域名</span></span>
<span class="line"><span>    ssl_certificate          /data/letsencrypt/fullchain.pem; # 域名证书路径</span></span>
<span class="line"><span>    ssl_certificate_key      /data/letsencrypt/key.pem;       # 域名私钥路径</span></span>
<span class="line"><span>    ssl_stapling on;</span></span>
<span class="line"><span>    ssl_session_timeout 1d;</span></span>
<span class="line"><span>    ssl_session_cache shared:SSL:10m; # 如果与其他配置冲突，请注释此项</span></span>
<span class="line"><span>    ssl_protocols TLSv1.2 TLSv1.3;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    underscores_in_headers on;</span></span>
<span class="line"><span>    set_real_ip_from 0.0.0.0/0; # 替换为你的 CDN 回源 IP 地址段</span></span>
<span class="line"><span>    real_ip_header CF-Connecting-IP; # 替换为你的 CDN 提供的私有 header，此处为 CloudFlare 默认</span></span>
<span class="line"><span>    # 如果你使用nginx作为最外层，把上面两行注释掉</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # grpc 相关    </span></span>
<span class="line"><span>    location ^~ /proto.NezhaService/ {</span></span>
<span class="line"><span>        grpc_set_header Host $host;</span></span>
<span class="line"><span>        grpc_set_header nz-realip $http_CF_Connecting_IP; # 替换为你的 CDN 提供的私有 header，此处为 CloudFlare 默认</span></span>
<span class="line"><span>        # grpc_set_header nz-realip $remote_addr; # 如果你使用nginx作为最外层，就把上面一行注释掉，启用此行</span></span>
<span class="line"><span>        grpc_read_timeout 600s;</span></span>
<span class="line"><span>        grpc_send_timeout 600s;</span></span>
<span class="line"><span>        grpc_socket_keepalive on;</span></span>
<span class="line"><span>        client_max_body_size 10m;</span></span>
<span class="line"><span>        grpc_buffer_size 4m;</span></span>
<span class="line"><span>        grpc_pass grpc://dashboard;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    # websocket 相关</span></span>
<span class="line"><span>    location ~* ^/api/v1/ws/(server|terminal|file)(.*)$ {</span></span>
<span class="line"><span>        proxy_set_header Host $host;</span></span>
<span class="line"><span>        proxy_set_header nz-realip $http_cf_connecting_ip; # 替换为你的 CDN 提供的私有 header，此处为 CloudFlare 默认</span></span>
<span class="line"><span>        # proxy_set_header nz-realip $remote_addr; # 如果你使用nginx作为最外层，就把上面一行注释掉，启用此行</span></span>
<span class="line"><span>        proxy_set_header Origin https://$host;</span></span>
<span class="line"><span>        proxy_set_header Upgrade $http_upgrade;</span></span>
<span class="line"><span>        proxy_set_header Connection &quot;upgrade&quot;;</span></span>
<span class="line"><span>        proxy_read_timeout 3600s;</span></span>
<span class="line"><span>        proxy_send_timeout 3600s;</span></span>
<span class="line"><span>        proxy_pass http://127.0.0.1:8008;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    # web</span></span>
<span class="line"><span>    location / {</span></span>
<span class="line"><span>        proxy_set_header Host $host;</span></span>
<span class="line"><span>        proxy_set_header nz-realip $http_cf_connecting_ip; # 替换为你的 CDN 提供的私有 header，此处为 CloudFlare 默认</span></span>
<span class="line"><span>        # proxy_set_header nz-realip $remote_addr; # 如果你使用nginx作为最外层，就把上面一行注释掉，启用此行</span></span>
<span class="line"><span>        proxy_read_timeout 3600s;</span></span>
<span class="line"><span>        proxy_send_timeout 3600s;</span></span>
<span class="line"><span>        proxy_buffer_size 128k;</span></span>
<span class="line"><span>        proxy_buffers 4 256k;</span></span>
<span class="line"><span>        proxy_busy_buffers_size 256k;</span></span>
<span class="line"><span>        proxy_max_temp_file_size 0;</span></span>
<span class="line"><span>        # proxy_set_header X-Forwarded-Proto $scheme; # 如果你使用nginx作为最外层，就启用此行避免无法正确读取访问的协议</span></span>
<span class="line"><span>        proxy_pass http://127.0.0.1:8008;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>upstream dashboard {</span></span>
<span class="line"><span>    server 127.0.0.1:8008;</span></span>
<span class="line"><span>    keepalive 512;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="安装-agent" tabindex="-1"><a class="header-anchor" href="#安装-agent"><span>安装 Agent</span></a></h1><p><strong>哪吒监控的被控端服务被称为 Agent，本文档将介绍如何在被控端服务器上安装 Agent，并与 Dashboard 连接。</strong></p><p>Agent 二进制文件仓库地址为：https://github.com/nezhahq/agent/releases</p><h2 id="一键安装-agent" tabindex="-1"><a class="header-anchor" href="#一键安装-agent"><span>一键安装 Agent</span></a></h2><p>哪吒监控支持在 Windows、macOS 和 Linux 上一键安装 Agent。遵循本文档的步骤，你可以轻松地在服务器上部署它。</p><h3 id="准备" tabindex="-1"><a class="header-anchor" href="#准备"><span>准备</span></a></h3><p>在安装前，需要提前在管理面板中设置通信域名，该域名不建议接入 CDN。本文档以示例通信域名 “data.example.com” 为例。</p><ol><li>在后台管理面板点击头像，进入“系统设置”页。</li><li>在“Agent 对接地址【域名/IP:端口】”项中填入通信域名和端口 “data.example.com:8008”。</li><li>点击“确认”保存设置。</li></ol><h3 id="一键安装步骤" tabindex="-1"><a class="header-anchor" href="#一键安装步骤"><span>一键安装步骤</span></a></h3><ol><li>在 <code>服务器</code> 页面中，点击 <code>安装命令</code> 并选择对应操作系统，安装命令将自动复制到你的剪贴板。</li><li>在被控端服务器中运行安装命令，等待安装完成后返回到 <code>服务器</code> 页面查看是否上线。</li><li>如果安装成功，页面中将自动弹出新的服务器，你可以点击编辑按钮为其设置名称。</li></ol><h2 id="通知设置" tabindex="-1"><a class="header-anchor" href="#通知设置"><span>通知设置</span></a></h2><p>哪吒监控支持对服务器的负载、CPU、内存、硬盘、流量、月流量、进程数和连接数进行监控，并在达到用户设定的阈值时发送通知。</p><h2 id="灵活的通知方式" tabindex="-1"><a class="header-anchor" href="#灵活的通知方式"><span>灵活的通知方式</span></a></h2><ul><li>在面板消息中，<code>#DATETIME#</code> 代表事件发生的时间戳，当通知被触发时，会自动替换为实际时间。</li><li><code>#NEZHA#</code> 是面板消息占位符，触发通知时会自动替换为实际消息内容。</li><li>请求体内容格式： <ul><li>当请求类型为 <strong>FORM</strong> 时，使用 <code>key:value</code> 的形式，<code>value</code> 中可包含占位符，通知时会自动替换。</li><li>当请求类型为 <strong>JSON</strong> 时，会进行简单的字符串替换后直接提交到 <code>URL</code>。</li></ul></li><li><strong>URL</strong> 中也可包含占位符，请求时会进行字符串替换。</li></ul><h2 id="部署建议与优化小技巧" tabindex="-1"><a class="header-anchor" href="#部署建议与优化小技巧"><span>部署建议与优化小技巧</span></a></h2><ol><li><strong>开启 HTTPS</strong> 使用反向代理（如 Nginx）为哪吒面板配置 SSL 证书，提升安全性与专业感。</li><li><strong>结合 1Panel、宝塔等面板使用</strong> 可实现统一运维管理，快速接入多台主机。</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结：</span></a></h2><p>哪吒监控的优秀之处在于——<strong>功能足够强、部署足够轻、界面足够美</strong>。 它让服务器监控不再是复杂的告警系统，而是一种赏心悦目的“云上仪表盘”。</p><p>如果你正在寻找一款：</p><ul><li>可私有化部署的监控工具</li><li>支持多端节点统一可视化</li><li>安装简洁、性能优秀</li></ul><p>那么，<strong>哪吒监控绝对值得一试。</strong></p><p>一行命令上线，实时掌握你的服务器运行全貌。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>项目官网：https://nezha.wiki/</span></span>
<span class="line"><span>GitHub 地址：https://github.com/naiba/nezha</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,66)]))}const t=a(l,[["render",p]]),h=JSON.parse('{"path":"/kaiyuan2025/8.%E5%93%AA%E5%90%92%E7%9B%91%E6%8E%A7.html","title":"优雅、强大、轻量开源的多服务器监控神器","lang":"en-US","frontmatter":{},"git":{"createdTime":1761192011000,"updatedTime":1761192011000,"contributors":[{"name":"star","username":"star","email":"star@xgss.net","commits":1,"url":"https://github.com/star"}]},"readingTime":{"minutes":6.84,"words":2053},"filePathRelative":"kaiyuan2025/8.哪吒监控.md"}');export{t as comp,h as data};
