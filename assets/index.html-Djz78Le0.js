import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as n,o as i}from"./app-BiQR_lPj.js";const p={};function l(t,s){return i(),e("div",null,s[0]||(s[0]=[n(`<h1 id="docker部署搭建一个开源强大的图书管理系统" tabindex="-1"><a class="header-anchor" href="#docker部署搭建一个开源强大的图书管理系统"><span>Docker部署搭建一个开源强大的图书管理系统</span></a></h1><p>大家好，我是星哥，作为一个电子图书收集者，想要管理自己的几百本的电子书，确实不好整理，直到我发现这个开源项目。而且可以在Docker中部署。搭建一个开源且强大的图书管理系统，管理并且在线浏览自己搜集到的电子书。</p><h1 id="talebook简介" tabindex="-1"><a class="header-anchor" href="#talebook简介"><span>talebook简介</span></a></h1><p>一个简洁但强大的私人书籍管理系统。</p><p>它基于calibre项目构建，具备书籍管理、在线阅读与推送、用户管理、SSO登录、从百度/豆瓣拉取书籍信息等功能。</p><p>开源地址：https://github.com/talebook/talebook</p><p><strong>友情提醒：中国境内网站，个人是不允许进行在线出版的，维护公开的书籍网站是违法违规的行为！建议仅作为个人使用！</strong></p><h1 id="主要特点" tabindex="-1"><a class="header-anchor" href="#主要特点"><span>主要特点</span></a></h1><ul><li>美观的界面：由于Calibre自带的网页太丑太难用，于是基于Vue，独立编写了新的界面，支持PC访问和手机浏览；</li><li>支持多用户：为了网友们更方便使用，开发了多用户功能，支持豆瓣（已废弃）、QQ、微博、Github等社交网站的登录；</li><li>支持在线阅读：借助epub.js 库，支持了网页在线阅读电子书（章评功能开发中）；</li><li>支持批量扫描导入书籍；</li><li>支持邮件推送：可方便推送到Kindle；</li><li>支持OPDS：可使用KyBooks等APP方便地读书；</li><li>支持一键安装，网页版初始化配置，轻松启动网站；</li><li>优化大书库时文件存放路径，可以按字母分类、或者文件名保持中文；</li><li>支持快捷更新书籍信息：支持从百度百科、豆瓣搜索并导入书籍基础信息；</li><li>支持私人模式：需要输入访问码，才能进入网站，便于小圈子分享网站；</li></ul><p><img src="https://imgoss.xgss.net/picgo/image-20241216111158059.png?aliyun" alt="image-20241216111158059"></p><h1 id="硬件环境" tabindex="-1"><a class="header-anchor" href="#硬件环境"><span>硬件环境</span></a></h1><p>星哥演示在在云服务器上，当然如果你有NAS也可以在NAS上安装，任何支持docker的硬件。</p><p>本文完整的方案会用到域名、云服务器：</p><ul><li><p>服务器一台（必须，安装 Centos7.2 以上版本系统，如果没有请戳，http://y.xgss.net/aliyun or http://y.xgss.net/tx 叩谢）</p></li><li><p>域名一个，下文以 book.xgss.net 演示。</p></li><li><p>SSL 证书一个（三个月免费即可，本文用宝塔自动申请）</p></li></ul><h1 id="docker部署" tabindex="-1"><a class="header-anchor" href="#docker部署"><span>Docker部署</span></a></h1><p>首先是不要安装docker，这步就不介绍了。</p><p>部署比较简单，建议采用docker</p><p>执行命令</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker run -d --name calibre -p &lt;本机端口&gt;:80 -v &lt;本机data目录&gt;:/data talebook/calibre-webserver</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>星哥执行如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker run -itd --name talebook \\</span></span>
<span class="line"><span>--restart always \\</span></span>
<span class="line"><span>-p 8081:80 \\</span></span>
<span class="line"><span>-v /data/docker/talebook:/data \\</span></span>
<span class="line"><span>talebook/calibre-webserver</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://imgoss.xgss.net/picgo/image-20241213182416049.png?aliyun" alt="image-20241213182416049"></p><p>解释</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>-itd</span></span>
<span class="line"><span>这三个选项的组合表示容器启动时的行为：</span></span>
<span class="line"><span>-i (interactive)：让容器保持标准输入流打开，允许你与容器交互。通常与 -t 一起使用。</span></span>
<span class="line"><span>-t (tty)：分配一个伪终端，使容器可以正常处理终端输入。</span></span>
<span class="line"><span>-d (detached)：让容器在后台运行，而不占用当前的终端窗口。如果不加 -d，容器会在前台运行并输出日志。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--name talebook: </span></span>
<span class="line"><span>给容器命名为 &quot;talebook&quot;，方便管理。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--restart always: </span></span>
<span class="line"><span>设置容器在停止后自动重启。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-p 8081:80 端口随意设置一个本地不冲突的端口即可（宿主机端口为8081，docker为80）；</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-v /data/docker/talebook:/data </span></span>
<span class="line"><span>这是一个卷挂载（volume mount）选项，用于将宿主机上的某个目录挂载到容器内：</span></span>
<span class="line"><span>/data/docker/talebook：宿主机上的路径，容器将使用这个路径来存储数据，我们的书籍就可以放到这里了。</span></span>
<span class="line"><span>/data：容器内部的路径，指定容器内的路径来挂载宿主机上的文件夹。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>部署成功</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker ps</span></span>
<span class="line"><span>CONTAINER ID   IMAGE                        COMMAND                  CREATED          STATUS          PORTS                                                 NAMES</span></span>
<span class="line"><span>f5303bfe1480   talebook/calibre-webserver   &quot;/var/www/talebook/d…&quot;   18 minutes ago   Up 18 minutes   443/tcp, 0.0.0.0:8081-&gt;80/tcp, :::8081-&gt;80/tcp        talebook</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="安装talebook" tabindex="-1"><a class="header-anchor" href="#安装talebook"><span>安装Talebook</span></a></h2><p>通过IP+端口访问，注意防火墙和安全策略要开放端口 8081.</p><p><img src="https://imgoss.xgss.net/picgo/image-20241213183415680.png?aliyun" alt="image-20241213183415680"></p><p>填写资料</p><p>是否开启私人图书馆模式，如果开启每次进入就需要输入访问码</p><p><img src="https://imgoss.xgss.net/picgo/image-20241213183659701.png?aliyun" alt="image-20241213183659701"></p><h1 id="配置站点" tabindex="-1"><a class="header-anchor" href="#配置站点"><span>配置站点</span></a></h1><p>再宝塔面板中配置 http://book.xgss.net</p><h2 id="添加站点" tabindex="-1"><a class="header-anchor" href="#添加站点"><span>添加站点</span></a></h2><p>网站中，首先配置http，域名要解析到服务器中。</p><p><img src="https://imgoss.xgss.net/picgo/image-20241216101220342.png?aliyun" alt="image-20241216101220342"></p><h2 id="配置ssl" tabindex="-1"><a class="header-anchor" href="#配置ssl"><span>配置SSL</span></a></h2><p>再</p><p><img src="https://imgoss.xgss.net/picgo/image-20241216101347058.png?aliyun" alt="image-20241216101347058"></p><p>证书申请成功，如果要强制HTTPS，就勾选这里。</p><p>到期提醒设置，也要勾选。</p><p><img src="https://imgoss.xgss.net/picgo/image-20241216101459127.png?aliyun" alt="image-20241216101459127"></p><h2 id="访问站点" tabindex="-1"><a class="header-anchor" href="#访问站点"><span>访问站点</span></a></h2><p>出现下图则表示，证书和站点都配置成功。</p><p>这个是默认的站点，下一步要把默认改为我们的docker镜像提供的服务。</p><p><img src="https://imgoss.xgss.net/picgo/image-20241216101543527.png?aliyun" alt="image-20241216101543527"></p><p>添加反向代理</p><p>在站点管理里面点击“反向代理”，添加代理名称，目标URL填本机的8081端口。</p><p><img src="https://imgoss.xgss.net/picgo/image-20241216101735920.png?aliyun" alt="image-20241216101735920"></p><h2 id="再访问域名" tabindex="-1"><a class="header-anchor" href="#再访问域名"><span>再访问域名</span></a></h2><p>访问https的站点，如图则成功</p><p>输入安装时候配置的密码，进入系统，这样站点配置完成。</p><p><img src="https://imgoss.xgss.net/picgo/image-20241216102222222.png?aliyun" alt="image-20241216102222222"></p><h1 id="使用talebook" tabindex="-1"><a class="header-anchor" href="#使用talebook"><span>使用Talebook</span></a></h1><h2 id="导入书籍" tabindex="-1"><a class="header-anchor" href="#导入书籍"><span>导入书籍</span></a></h2><p>进入后台做一些基础的设置，把测试的数据删掉</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>由于docker部署的时候是这样的，</span></span>
<span class="line"><span>-v /data/docker/talebook:/data </span></span>
<span class="line"><span>我们就可以把图书上传到这个目录</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/data/docker/talebook/books/imports</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://imgoss.xgss.net/picgo/image-20241216104921305.png?aliyun" alt="image-20241216104921305"></p><p>扫码书籍之后，导入全部书籍</p><p><img src="https://imgoss.xgss.net/picgo/image-20241216105223479.png?aliyun" alt="image-20241216105223479"></p><p>既可在线阅读了</p><p><img src="https://imgoss.xgss.net/picgo/image-20241216105345849.png?aliyun" alt="image-20241216105345849"></p><h1 id="结尾" tabindex="-1"><a class="header-anchor" href="#结尾"><span>结尾</span></a></h1><p>通过Docker部署Talebook，用户可以轻松搭建一个功能强大且易于使用的个人书籍管理系统。无论是个人用户还是小型组织，都可以通过Talebook来管理和分享自己的电子书籍收藏。Talebook的丰富功能和便捷操作体验，将大大提高你的图书管理效率。</p>`,65)]))}const c=a(p,[["render",l]]),o=JSON.parse('{"path":"/article/5nx6o2hs/","title":"Docker部署搭建一个开源强大的图书管理系统","lang":"en-US","frontmatter":{"title":"Docker部署搭建一个开源强大的图书管理系统","createTime":"2025/05/27 17:51:17","permalink":"/article/5nx6o2hs/"},"git":{"createdTime":1749111496000,"updatedTime":1750129445000,"contributors":[{"name":"star","username":"star","email":"star@xgss.net","commits":2,"url":"https://github.com/star"}]},"readingTime":{"minutes":4.98,"words":1493},"filePathRelative":"kaiyuan/Open-Source-Software/Docker部署搭建一个开源强大的图书管理系统.md"}');export{c as comp,o as data};
