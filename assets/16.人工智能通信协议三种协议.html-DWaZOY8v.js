import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-BiQR_lPj.js";const s={};function r(i,t){return e(),a("div",null,t[0]||(t[0]=[n('<h1 id="人工智能通信协议三种协议-mcp协议、a2a协议、ag-ui协议是什么" tabindex="-1"><a class="header-anchor" href="#人工智能通信协议三种协议-mcp协议、a2a协议、ag-ui协议是什么"><span>人工智能通信协议三种协议：MCP协议、A2A协议、AG-UI协议是什么</span></a></h1><h2 id="引言-为什么ai智能体需要-通信协议" tabindex="-1"><a class="header-anchor" href="#引言-为什么ai智能体需要-通信协议"><span>引言：为什么AI智能体需要&quot;通信协议&quot;？</span></a></h2><p>想象一下：你让智能助手规划跨国旅行，它需要调用航班预订Agent、酒店Agent、翻译Agent，还要实时展示行程给你——这个过程中，<strong>工具调用的标准化</strong>（AI怎么&quot;用工具&quot;）、<strong>智能体间的协作</strong>（AI怎么&quot;对话&quot;）、<strong>用户界面的实时同步</strong>（AI怎么&quot;展示&quot;），缺一个环节都玩不转。</p><p>2024年以前，这些环节都是&quot;各自为战&quot;：OpenAI的Function Calling、Anthropic的Claude Tools、Google的Agent API，每个厂商都搞一套标准。直到2024年底至2025年，三大协议相继登场，才让AI智能体真正有了&quot;通用语言&quot;：</p><ul><li><strong>MCP协议</strong>：解决&quot;AI-工具&quot;通信，让智能体像插USB设备一样调用外部能力，解决了AI Agent和外部工具交互问题。</li><li><strong>A2A协议</strong>：解决&quot;AI-AI&quot;通信，让不同厂商的智能体无缝协作，解决Agent间通信问题</li><li><strong>AG-UI协议</strong>：解决&quot;AI-用户&quot;通信，让智能体与界面实时双向交互，解决AI Agent与前端应用之间的交互标准化问题。</li></ul><p><img src="https://imgoss.xgss.net/picgo-tx2025/QQ_1753867164162.png?tx" alt="img"></p><p>接下来，咱们逐个拆解这三大协议的技术细节和实战价值。</p><h2 id="一、mcp协议-ai智能体的-usb接口-让工具调用标准化" tabindex="-1"><a class="header-anchor" href="#一、mcp协议-ai智能体的-usb接口-让工具调用标准化"><span>一、MCP协议：AI智能体的&quot;USB接口&quot;，让工具调用标准化</span></a></h2><h3 id="mcp协议的定义" tabindex="-1"><a class="header-anchor" href="#mcp协议的定义"><span>MCP协议的定义</span></a></h3><p><strong>MCP（Model Context Protocol，模型上下文协议）</strong> 由Anthropic在2024年11月推出，2025年3月更新至2025-3-26版，定位是<strong>AI模型与外部工具/数据源的通用交互标准</strong>。简单说，MCP就是给AI智能体设计的&quot;USB接口&quot;——不管是数据库、API接口还是本地文件，只要遵循MCP标准，智能体就能即插即用。</p><p><img src="https://imgoss.xgss.net/picgo-tx2025/QQ_1753865308571.png?tx" alt="img"></p><h3 id="mcp技术架构-客户端-主机-服务器三层模型" tabindex="-1"><a class="header-anchor" href="#mcp技术架构-客户端-主机-服务器三层模型"><span>MCP技术架构：客户端-主机-服务器三层模型</span></a></h3><p>MCP采用<strong>客户端-主机-服务器</strong>架构，核心组件包括：</p><ul><li><strong>主机（Host）</strong>：运行LLM的应用（如Claude Desktop、IDE插件），负责权限控制和用户授权</li><li><strong>客户端（Client）</strong>：主机内的连接器，与服务器建立1:1有状态会话</li><li><strong>服务器（Server）</strong>：提供具体能力的服务（如数据库查询、文件操作），暴露资源、工具、提示词三类核心功能</li></ul><p>通信基于<strong>JSON-RPC 2.0</strong>，支持两种传输方式：</p><ul><li><strong>本地通信</strong>：通过stdio（标准输入输出）实现进程内低延迟交互</li><li><strong>远程通信</strong>：通过Streamable HTTP（取代旧版HTTP+SSE）支持流式传输和批处理请求</li></ul><h3 id="mcp核心特性-从资源访问到安全控制" tabindex="-1"><a class="header-anchor" href="#mcp核心特性-从资源访问到安全控制"><span>MCP核心特性：从资源访问到安全控制</span></a></h3><p>MCP的强大之处在于<strong>标准化工具调用全流程</strong>，核心特性包括：</p><h4 id="_1-四大核心功能模块" tabindex="-1"><a class="header-anchor" href="#_1-四大核心功能模块"><span>（1）四大核心功能模块</span></a></h4><ul><li><strong>资源（Resources）</strong>：只读数据访问，如本地文件、数据库行（通过URI标识，如<code>file://config.json</code>）</li><li><strong>提示词（Prompts）</strong>：预定义模板，如&quot;生成SQL查询语句：{user_question}&quot;</li><li><strong>工具（Tools）</strong>：可执行函数，如发送邮件、执行代码（需用户显式授权）</li><li><strong>采样（Sampling）</strong>：服务器主动请求模型推理，支持递归LLM交互</li></ul><h4 id="_2-企业级安全机制" tabindex="-1"><a class="header-anchor" href="#_2-企业级安全机制"><span>（2）企业级安全机制</span></a></h4><p>MCP在2025年版本中强化了安全框架，包括：</p><ul><li><strong>OAuth 2.1授权</strong>：严格的身份验证和权限控制</li><li><strong>用户同意机制</strong>：工具调用前必须获得用户批准（如&quot;是否允许删除文件？&quot;）</li><li><strong>数据最小化</strong>：仅传输必要上下文，服务器无法读取完整会话历史</li></ul><h4 id="_3-动态发现与热插拔" tabindex="-1"><a class="header-anchor" href="#_3-动态发现与热插拔"><span>（3）动态发现与热插拔</span></a></h4><p>客户端可通过<code>tools/list</code>请求查询服务器能力，新增工具时自动通知客户端，实现&quot;即插即用&quot;。例如，当高德地图MCP Server新增&quot;路线规划&quot;工具时，智能体无需重启即可调用。</p><h3 id="mcp应用场景-从开发工具到企业自动化" tabindex="-1"><a class="header-anchor" href="#mcp应用场景-从开发工具到企业自动化"><span>MCP应用场景：从开发工具到企业自动化</span></a></h3><p>MCP已在多个领域落地，典型场景包括：</p><ul><li><strong>IDE智能开发</strong>：在VS Code中通过自然语言调用Git工具提交代码、查询API文档</li><li><strong>企业数据查询</strong>：连接ERP系统，用自然语言生成销售报表（如&quot;显示Q1华东区销售额&quot;）</li><li><strong>本地隐私计算</strong>：在用户设备内分析文件（如简历解析），数据不离开本地</li></ul><h2 id="快速mcp服务" tabindex="-1"><a class="header-anchor" href="#快速mcp服务"><span>快速MCP服务</span></a></h2><p>可以看星哥之前写的文章<a href="https://mp.weixin.qq.com/s/q6FoaCAQeEx42foGvlQihA" target="_blank" rel="noopener noreferrer">什么是MCP？技术原理是什么？教你15分钟配置本地MCP服务</a></p><p>三个步骤 1.准备MCP Host 、2、 环境配置 3、MCP配置</p><ol><li>准备MCP Host：目前市面上已有不少MCP的客户端，用的比较多的工具包括Cursor、Windsurf、Cline等，Cline为例，介绍MCP的使用;</li><li>环境配置：MCP Server 本质上就是Node.js或者Python程序，所以在配置 MCP 前，用户需要安装 Node.js（包含 npm 或 npx）和 Python 环境;</li><li>MCP配置：可以在MCP官方选择一个热门的MCP Server</li></ol><h2 id="二、a2a协议-智能体间的-普通话-让跨组织协作成为可能" tabindex="-1"><a class="header-anchor" href="#二、a2a协议-智能体间的-普通话-让跨组织协作成为可能"><span>二、A2A协议：智能体间的&quot;普通话&quot;，让跨组织协作成为可能</span></a></h2><h3 id="a2a定义和核心目标" tabindex="-1"><a class="header-anchor" href="#a2a定义和核心目标"><span>A2A定义和核心目标</span></a></h3><p>来自： https://a2aprotocol.ai/</p><blockquote><p>A2A Protocol is an open standard that enables AI agents to communicate and collaborate across different platforms and frameworks, regardless of their underlying technologies. It&#39;s designed to maximize the benefits of agentic AI by enabling true multi-agent scenarios.</p><p>翻译</p><p>A2A 协议是一项开放标准，它能让人工智能代理在不同平台和框架间进行通信与协作，而不受其底层技术的限制。该协议旨在通过支持真正的多代理场景，最大限度地发挥智能代理的优势。</p></blockquote><p><strong>A2A（Agent2Agent Protocol）</strong> 由Google在2025年4月推出，是<strong>首个专为AI智能体间通信设计的开放标准</strong>。它解决的核心问题是：不同组织、不同框架开发的智能体，如何像人类团队一样协作？</p><p>MCP解决的是Agent和外部工具/数据的集成；而A2A致力于促进独立Agent间的通信，帮助不同生态系统的Agent沟通和协作。</p><p><img src="https://imgoss.xgss.net/picgo-tx2025/QQ_1753864704392.png?tx" alt="img"></p><p>举个例子：你的旅行Agent需要协调航班Agent（查机票）、酒店Agent（订住宿）、翻译Agent（实时翻译）——没有A2A时，这些Agent就像&quot;各说各话&quot;；有了A2A，它们能通过统一协议协商任务、共享状态。</p><h3 id="技术架构-从agent-card到任务生命周期" tabindex="-1"><a class="header-anchor" href="#技术架构-从agent-card到任务生命周期"><span>技术架构：从Agent Card到任务生命周期</span></a></h3><p>A2A基于<strong>JSON-RPC 2.0+HTTP(S)</strong>，核心机制包括：</p><h4 id="_1-agent-card-智能体的-名片" tabindex="-1"><a class="header-anchor" href="#_1-agent-card-智能体的-名片"><span>（1）Agent Card：智能体的&quot;名片&quot;</span></a></h4><p>每个A2A智能体需提供<strong>Agent Card</strong>（JSON格式），包含：</p><ul><li>身份信息（名称、版本、描述）</li><li>能力列表（支持的任务类型、模态，如&quot;文本+文件&quot;）</li><li>通信端点（URL、支持的传输方式：SSE/WebSocket）</li><li>认证要求（如OAuth 2.0、API Key）</li></ul><p>客户端通过<code>/.well-known/agent.json</code>访问Agent Card，实现智能体自动发现（类似人类交换名片）。</p><h4 id="_2-任务生命周期管理" tabindex="-1"><a class="header-anchor" href="#_2-任务生命周期管理"><span>（2）任务生命周期管理</span></a></h4><p>A2A将任务状态标准化为5种：<code>submitted</code>（已提交）→<code>working</code>（处理中）→<code>input-required</code>（需输入）→<code>completed</code>（完成）/<code>failed</code>（失败）。支持三种交互模式：</p><ul><li><strong>请求/响应</strong>：适用于简单查询（如&quot;查询天气&quot;）</li><li><strong>流式传输</strong>：通过SSE推送实时进度（如&quot;酒店搜索中：已找到3家符合条件&quot;）</li><li><strong>推送通知</strong>：通过Webhook回调异步结果（如&quot;航班预订成功&quot;）</li></ul><h3 id="a2a协议如何工作" tabindex="-1"><a class="header-anchor" href="#a2a协议如何工作"><span>A2A协议如何工作</span></a></h3><p>A2A通过结构化过程促进“客户端”代理与“远程”代理之间的通信</p><p><img src="https://imgoss.xgss.net/picgo-tx2025/QQ_1753866037944.png?tx" alt="img"></p><p>图：https://a2aprotocol.ai/</p><h3 id="核心特性-多模态支持与企业级安全" tabindex="-1"><a class="header-anchor" href="#核心特性-多模态支持与企业级安全"><span>核心特性：多模态支持与企业级安全</span></a></h3><h4 id="_1-多模态数据交换" tabindex="-1"><a class="header-anchor" href="#_1-多模态数据交换"><span>（1）多模态数据交换</span></a></h4><p>A2A支持<strong>TextPart（文本）、FilePart（文件）、DataPart（结构化数据）</strong> 三类消息内容，例如：</p><ul><li>客户服务场景：用户上传故障照片（FilePart）+ 语音描述（AudioPart），智能体返回维修建议（TextPart）+ 预约表单（DataPart）</li></ul><h4 id="_2-安全与互操作性" tabindex="-1"><a class="header-anchor" href="#_2-安全与互操作性"><span>（2）安全与互操作性</span></a></h4><ul><li><strong>传输加密</strong>：默认TLS 1.3，支持双向认证</li><li><strong>权限粒度</strong>：细到&quot;只读/可写&quot;的工具权限描述（如标记&quot;删除文件&quot;为破坏性操作）</li><li><strong>厂商中立</strong>：基于HTTP等现有标准，已获Atlassian、Salesforce、SAP等50+企业支持</li></ul><h3 id="应用场景-从旅行规划到企业自动化" tabindex="-1"><a class="header-anchor" href="#应用场景-从旅行规划到企业自动化"><span>应用场景：从旅行规划到企业自动化</span></a></h3><p>A2A已在多个复杂场景落地，典型案例包括：</p><h4 id="_1-跨平台旅行规划" tabindex="-1"><a class="header-anchor" href="#_1-跨平台旅行规划"><span>（1）跨平台旅行规划</span></a></h4><p>用户向主Agent提出&quot;规划东京5日游&quot;，主Agent通过A2A调用：</p><ul><li>航班Agent：查询并预订机票</li><li>酒店Agent：根据预算推荐住宿</li><li>翻译Agent：生成日语行程单</li><li>天气Agent：实时同步东京天气</li></ul><h4 id="_2-企业销售流程自动化" tabindex="-1"><a class="header-anchor" href="#_2-企业销售流程自动化"><span>（2）企业销售流程自动化</span></a></h4><p>销售Agent通过A2A与财务Agent协作：</p><ol><li>销售Agent生成报价单（调用产品数据库MCP Server）</li><li>财务Agent审核价格（调用ERP系统MCP Server）</li><li>双方通过A2A交换结构化数据（JSON格式报价单），自动完成开票</li></ol><h2 id="三、ag-ui协议-智能体与用户的-交互桥梁-让界面响应实时化" tabindex="-1"><a class="header-anchor" href="#三、ag-ui协议-智能体与用户的-交互桥梁-让界面响应实时化"><span>三、AG-UI协议：智能体与用户的&quot;交互桥梁&quot;，让界面响应实时化</span></a></h2><h3 id="定义与核心目标" tabindex="-1"><a class="header-anchor" href="#定义与核心目标"><span>定义与核心目标</span></a></h3><p><strong>AG-UI（Agent-User Interaction Protocol）</strong> 由CopilotKit在2025年5月推出，定位是<strong>AI智能体与前端应用的实时交互标准</strong>。简单说，AG-UI解决的是&quot;智能体生成的内容如何高效展示给用户&quot;的问题——比如AI写代码时逐字流式输出、工具调用时实时显示进度。</p><p>https://docs.ag-ui.com/introduction</p><blockquote><p><strong>AG-UI</strong> standardizes how <strong>front-end applications connect to AI agents</strong> through an open protocol. Think of it as a universal translator for AI-driven systems- no matter what language an agent speaks: <strong>AG-UI ensures fluent communication</strong>.</p><p>翻译</p><p>AG-UI 通过一种开放协议，对前端应用程序与人工智能代理的连接方式进行了标准化。可以将其视为人工智能驱动系统的 “通用翻译器”—— 无论某个代理使用何种 “语言”，AG-UI 都能确保通信流畅无阻。</p></blockquote><p><img src="https://imgoss.xgss.net/picgo-tx2025/QQ_1753866345519.png?tx" alt="img"></p><h3 id="技术架构-事件驱动的轻量级设计" tabindex="-1"><a class="header-anchor" href="#技术架构-事件驱动的轻量级设计"><span>技术架构：事件驱动的轻量级设计</span></a></h3><p>AG-UI采用<strong>事件驱动架构</strong>，核心特点是<strong>流式JSON事件传输</strong>，架构包括：</p><ul><li><strong>前端应用</strong>：网页/App，通过AG-UI客户端接收事件</li><li><strong>智能体</strong>：后端AI服务，生成事件流（如文本消息、工具调用）</li><li><strong>传输层</strong>：支持SSE（简单场景）、WebSocket（双向交互）、Webhook（异步通知）</li></ul><p>核心创新是<strong>16种标准化事件</strong>，覆盖五大场景：</p><ul><li><strong>生命周期事件</strong>：<code>run_started</code>（任务开始）、<code>run_finished</code>（任务结束）</li><li><strong>文本消息事件</strong>：<code>text_message_content</code>（流式文本块）、<code>text_message_end</code>（消息结束）</li><li><strong>工具调用事件</strong>：<code>tool_call_start</code>（工具开始执行）、<code>tool_call_end</code>（工具返回结果）</li><li><strong>状态更新事件</strong>：<code>state_delta</code>（增量更新应用状态，如表单数据）</li><li><strong>错误处理事件</strong>：<code>error</code>（异常信息）、<code>cancellation</code>（任务取消）</li></ul><h3 id="核心特性-从实时流到双向交互" tabindex="-1"><a class="header-anchor" href="#核心特性-从实时流到双向交互"><span>核心特性：从实时流到双向交互</span></a></h3><h4 id="_1-真正的双向通信" tabindex="-1"><a class="header-anchor" href="#_1-真正的双向通信"><span>（1）真正的双向通信</span></a></h4><p>AG-UI打破传统&quot;请求-响应&quot;模式，支持<strong>智能体主动推送</strong>和<strong>用户实时反馈</strong>。例如：</p><ul><li>AI生成报告时，前端通过<code>text_message_content</code>事件逐段显示</li><li>用户可发送<code>user_input</code>事件打断生成：&quot;这里需要补充2024年数据&quot;</li></ul><h4 id="_2-框架无关与低侵入性" tabindex="-1"><a class="header-anchor" href="#_2-框架无关与低侵入性"><span>（2）框架无关与低侵入性</span></a></h4><p>AG-UI不绑定特定前端框架，提供<strong>Python/TypeScript SDK</strong>，现有系统只需适配事件格式即可接入。例如：</p><ul><li>React应用通过<code>@ag-ui/client</code>监听事件，实时更新DOM</li><li>LangGraph/CrewAI等智能体框架，通过中间件将内部事件转换为AG-UI格式</li></ul><h3 id="应用场景-从智能客服到协作编辑" tabindex="-1"><a class="header-anchor" href="#应用场景-从智能客服到协作编辑"><span>应用场景：从智能客服到协作编辑</span></a></h3><h4 id="_1-实时协作编辑" tabindex="-1"><a class="header-anchor" href="#_1-实时协作编辑"><span>（1）实时协作编辑</span></a></h4><p>AG-UI让AI生成内容像&quot;人类打字&quot;一样自然：</p><ul><li>用户在文档中输入&quot;写一段产品介绍&quot;，AI通过<code>text_message_content</code>事件逐字推送，延迟&lt;100ms</li><li>同时发送<code>state_delta</code>事件更新字数统计、保存草稿</li></ul><h4 id="_2-智能客服系统" tabindex="-1"><a class="header-anchor" href="#_2-智能客服系统"><span>（2）智能客服系统</span></a></h4><p>传统客服界面需要刷新才能看到新消息，AG-UI通过事件流实时同步：</p><ul><li>客服Agent调用知识库（MCP协议），同时通过<code>tool_call_start</code>事件显示&quot;正在查询订单...&quot;</li><li>结果返回后，通过<code>text_message_content</code>推送给用户，无需页面刷新</li></ul><h2 id="四、三大协议对比-各有所长-协同互补" tabindex="-1"><a class="header-anchor" href="#四、三大协议对比-各有所长-协同互补"><span>四、三大协议对比：各有所长，协同互补</span></a></h2><p>很多朋友问：&quot;MCP、A2A、AG-UI是不是竞争关系？&quot; 其实它们覆盖了AI交互的不同维度，就像&quot;USB（MCP）+ 以太网（A2A）+ HDMI（AG-UI）&quot;，缺一不可。下面用表格直观对比：</p><table><thead><tr><th><strong>维度</strong></th><th><strong>MCP协议</strong></th><th><strong>A2A协议</strong></th><th><strong>AG-UI协议</strong></th></tr></thead><tbody><tr><td><strong>核心定位</strong></td><td>AI-工具通信</td><td>AI-AI通信</td><td>AI-用户界面通信</td></tr><tr><td><strong>通信对象</strong></td><td>主机-服务器</td><td>智能体-智能体</td><td>智能体-前端应用</td></tr><tr><td><strong>传输方式</strong></td><td>JSON-RPC 2.0（stdio/HTTP）</td><td>JSON-RPC 2.0（HTTP/SSE）</td><td>事件流（SSE/WebSocket）</td></tr><tr><td><strong>关键特性</strong></td><td>资源/工具/提示词标准化</td><td>Agent Card/任务生命周期</td><td>16种标准事件/状态增量同步</td></tr><tr><td><strong>典型场景</strong></td><td>数据库查询、文件操作</td><td>旅行规划、跨部门协作</td><td>实时聊天、协作编辑</td></tr><tr><td><strong>安全重点</strong></td><td>用户授权、数据隐私</td><td>身份认证、权限粒度</td><td>前端状态加密、输入验证</td></tr></tbody></table><h2 id="五、未来趋势-协议生态如何重塑ai应用" tabindex="-1"><a class="header-anchor" href="#五、未来趋势-协议生态如何重塑ai应用"><span>五、未来趋势：协议生态如何重塑AI应用？</span></a></h2><h3 id="从-单打独斗-到-协同网络" tabindex="-1"><a class="header-anchor" href="#从-单打独斗-到-协同网络"><span>从&quot;单打独斗&quot;到&quot;协同网络&quot;</span></a></h3><p>三大协议正在形成<strong>完整的AI交互栈</strong>：</p><ul><li><strong>底层</strong>：MCP连接工具（如数据库、API）</li><li><strong>中层</strong>：A2A实现智能体协作（如分工处理复杂任务）</li><li><strong>上层</strong>：AG-UI负责用户体验（如实时界面同步）</li></ul><p>例如，企业级智能客服系统可能同时用到：</p><ul><li>MCP调用CRM数据库查询用户订单</li><li>A2A协调&quot;技术支持Agent&quot;和&quot;退款Agent&quot;</li><li>AG-UI向用户实时展示处理进度</li></ul><h3 id="挑战与机遇" tabindex="-1"><a class="header-anchor" href="#挑战与机遇"><span>挑战与机遇</span></a></h3><ul><li><strong>标准化与兼容性</strong>：不同厂商对协议的实现可能存在差异（如A2A的Agent Card字段扩展），需社区推动统一测试套件</li><li><strong>安全与隐私</strong>：多智能体协作可能导致数据泄露，需强化&quot;数据最小化&quot;和&quot;端到端加密&quot;</li><li><strong>开发门槛降低</strong>：MCP/A2A/AG-UI的SDK和开源工具（如mcp.so、AG-UI Dojo）将让中小团队也能构建复杂智能体系统</li></ul><h2 id="结论-ai智能体的-语言革命-才刚刚开始" tabindex="-1"><a class="header-anchor" href="#结论-ai智能体的-语言革命-才刚刚开始"><span>结论：AI智能体的&quot;语言革命&quot;才刚刚开始</span></a></h2><p>从MCP的工具调用标准化，到A2A的智能体协作，再到AG-UI的人机交互优化，三大协议正在为AI智能体构建一套完整的&quot;语言体系&quot;。对于开发者来说，这意味着<strong>更少的适配工作、更高的复用率</strong>；对于用户来说，这意味着<strong>更流畅的体验、更强大的功能</strong>。</p><p>如果你正在构建AI智能体系统，不妨从这三大协议入手：先用MCP打通工具调用，再通过A2A连接其他智能体，最后用AG-UI打造丝滑的用户界面。相信随着协议生态的成熟，AI智能体将真正从&quot;单打独斗&quot;走向&quot;协同作战&quot;，为我们带来更高效的工作和生活方式。</p><p>最后，你觉得哪个协议最能解决你当前的痛点？欢迎在评论区留言，咱们下期再见！</p><p>（参考官方文档：<a href="https://spec.modelcontextprotocol.io/" target="_blank" rel="noopener noreferrer">MCP</a>、<a href="https://a2aprotocol.ai/" target="_blank" rel="noopener noreferrer">A2A</a>、<a href="https://docs.ag-ui.com/" target="_blank" rel="noopener noreferrer">AG-UI</a>）</p>',108)]))}const g=o(s,[["render",r]]),p=JSON.parse('{"path":"/chatgpt2025/16.%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E4%B8%89%E7%A7%8D%E5%8D%8F%E8%AE%AE.html","title":"人工智能通信协议三种协议：MCP协议、A2A协议、AG-UI协议是什么","lang":"en-US","frontmatter":{},"git":{"createdTime":1754468658000,"updatedTime":1754468658000,"contributors":[{"name":"star","username":"star","email":"star@xgss.net","commits":1,"url":"https://github.com/star"}]},"readingTime":{"minutes":12.54,"words":3762},"filePathRelative":"chatgpt2025/16.人工智能通信协议三种协议.md"}');export{g as comp,p as data};
