import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as i}from"./app-BiQR_lPj.js";const l={};function d(r,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h1 id="python自学11-常用数据结构之集合-set" tabindex="-1"><a class="header-anchor" href="#python自学11-常用数据结构之集合-set"><span>Python自学11 - 常用数据结构之集合（set）</span></a></h1><p>在 Python 的常用数据结构中，<strong>集合（set）</strong> 是一个非常实用但常被忽略的类型。它不仅能去重，还能高效地进行集合运算（交集、并集、差集等），在数据清洗、去重统计、快速查找等场景中非常有用。</p><p>本文将从 <strong>定义 → 特性 → 常用操作 → 实战案例</strong> 四个方面带你掌握集合的核心用法。</p><h2 id="集合的定义与特性" tabindex="-1"><a class="header-anchor" href="#集合的定义与特性"><span>集合的定义与特性</span></a></h2><h3 id="定义方式" tabindex="-1"><a class="header-anchor" href="#定义方式"><span>定义方式</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># 使用花括号</span></span>
<span class="line"><span>fruits = {&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 使用 set() 构造函数</span></span>
<span class="line"><span>numbers = set([1, 2, 3, 3, 2])  # 自动去重</span></span>
<span class="line"><span>print(numbers)  # {1, 2, 3}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h3><ul><li><strong>无序</strong>：集合中的元素没有固定顺序，不能通过索引访问。</li><li><strong>唯一性</strong>：集合会自动去重。</li><li><strong>可变性</strong>：集合本身可变，但元素必须是<strong>不可变类型</strong>（如数字、字符串、元组）。</li></ul><p>Python 程序中的集合跟数学上的集合没有什么本质区别，需要强调的是上面所说的无序性和互异性。无序性说明集合中的元素并不像列中的元素那样存在某种次序，可以通过索引运算就能访问任意元素，<strong>集合并不支持索引运算</strong>。</p><p>另外，集合的互异性决定了<strong>集合中不能有重复元素</strong>，这一点也是集合区别于列表的地方，我们无法将重复的元素添加到一个集合中。集合类型必然是支持<code>in</code>和<code>not in</code>成员运算的，这样就可以确定一个元素是否属于集合，也就是上面所说的集合的确定性。</p><p><strong>集合的成员运算在性能上要优于列表的成员运算</strong>，这是集合的底层存储特性决定的，此处我们暂时不做讨论，大家记住这个结论即可。</p><h2 id="常用操作" tabindex="-1"><a class="header-anchor" href="#常用操作"><span>常用操作</span></a></h2><h3 id="添加与删除元素" tabindex="-1"><a class="header-anchor" href="#添加与删除元素"><span>添加与删除元素</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>s = {1, 2, 3}</span></span>
<span class="line"><span>s.add(4)           # 添加单个元素</span></span>
<span class="line"><span>s.update([5, 6])   # 添加多个元素</span></span>
<span class="line"><span>s.remove(2)        # 删除元素（不存在会报错）</span></span>
<span class="line"><span>s.discard(10)      # 删除元素（不存在不会报错）</span></span>
<span class="line"><span>s.clear()          # 清空集合</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="集合运算" tabindex="-1"><a class="header-anchor" href="#集合运算"><span>集合运算</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>A = {1, 2, 3, 4}</span></span>
<span class="line"><span>B = {3, 4, 5, 6}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>print(A | B)   # 并集 {1, 2, 3, 4, 5, 6}</span></span>
<span class="line"><span>print(A &amp; B)   # 交集 {3, 4}</span></span>
<span class="line"><span>print(A - B)   # 差集 {1, 2}</span></span>
<span class="line"><span>print(A ^ B)   # 对称差集 {1, 2, 5, 6}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="判断关系" tabindex="-1"><a class="header-anchor" href="#判断关系"><span>判断关系</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>A = {1, 2}</span></span>
<span class="line"><span>B = {1, 2, 3}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>print(A.issubset(B))   # True  子集</span></span>
<span class="line"><span>print(B.issuperset(A)) # True  超集</span></span>
<span class="line"><span>print(A.isdisjoint({4, 5})) # True 无交集</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="集合推导式" tabindex="-1"><a class="header-anchor" href="#集合推导式"><span>集合推导式</span></a></h2><p>集合推导式与列表推导式类似，但用 <code>{}</code> 包裹：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>squares = {x**2 for x in range(6)}</span></span>
<span class="line"><span>print(squares)  # {0, 1, 4, 9, 16, 25}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实战案例" tabindex="-1"><a class="header-anchor" href="#实战案例"><span>实战案例</span></a></h2><h3 id="案例1-列表去重并排序" tabindex="-1"><a class="header-anchor" href="#案例1-列表去重并排序"><span>案例1：列表去重并排序</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>data = [5, 3, 1, 2, 3, 5, 1]</span></span>
<span class="line"><span>unique_sorted = sorted(set(data))</span></span>
<span class="line"><span>print(unique_sorted)  # [1, 2, 3, 5]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="案例2-快速查找公共好友" tabindex="-1"><a class="header-anchor" href="#案例2-快速查找公共好友"><span>案例2：快速查找公共好友</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>user1_friends = {&quot;Tom&quot;, &quot;Jerry&quot;, &quot;Alice&quot;}</span></span>
<span class="line"><span>user2_friends = {&quot;Alice&quot;, &quot;Bob&quot;, &quot;Tom&quot;}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>common = user1_friends &amp; user2_friends</span></span>
<span class="line"><span>print(common)  # {&#39;Tom&#39;, &#39;Alice&#39;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="案例3-文本去重统计" tabindex="-1"><a class="header-anchor" href="#案例3-文本去重统计"><span>案例3：文本去重统计</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>text = &quot;python java python c++ java go&quot;</span></span>
<span class="line"><span>words = text.split()</span></span>
<span class="line"><span>unique_words = set(words)</span></span>
<span class="line"><span>print(f&quot;去重后单词数: {len(unique_words)}&quot;)  # 4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>集合是Python中非常强大的数据结构，具有去重、成员检查、集合运算等功能。它广泛应用于实际开发中，尤其是在需要高效处理数据、去重、集合运算等场景下。掌握集合的基本操作和应用，可以帮助我们更好地解决一些复杂问题。</p><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td>无序</td><td>元素没有固定顺序</td></tr><tr><td>唯一性</td><td>自动去重</td></tr><tr><td>可变性</td><td>可添加/删除元素</td></tr><tr><td>高效查找</td><td>判断元素是否存在的速度快</td></tr></tbody></table><p><strong>适用场景</strong>：</p><ul><li>数据去重</li><li>快速查找</li><li>集合运算（交集、并集、差集）</li><li>数据关系判断（子集、超集、无交集）</li></ul><p>💡 <strong>星哥建议</strong>： 在处理需要去重、快速查找或集合运算的任务时，优先考虑 <code>set</code>，不仅代码简洁，还能显著提升性能。</p>`,34)]))}const h=n(l,[["render",d]]),c=JSON.parse('{"path":"/python/S15/Python%E8%87%AA%E5%AD%A611%20-%20%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%9B%86%E5%90%88.html","title":"Python自学11 - 常用数据结构之集合（set）","lang":"en-US","frontmatter":{},"git":{"createdTime":1760001321000,"updatedTime":1760001321000,"contributors":[{"name":"star","username":"star","email":"star@xgss.net","commits":1,"url":"https://github.com/star"}]},"readingTime":{"minutes":3.22,"words":965},"filePathRelative":"python/S15/Python自学11 - 常用数据结构之集合.md"}');export{h as comp,c as data};
