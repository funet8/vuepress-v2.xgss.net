import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as i}from"./app-BiQR_lPj.js";const l={};function r(t,e){return i(),a("div",null,e[0]||(e[0]=[n(`<h1 id="docker的四种网络方式" tabindex="-1"><a class="header-anchor" href="#docker的四种网络方式"><span>docker的四种网络方式</span></a></h1><p>当你安装好Docker之后， 它会自动的创建三个网络，你可以使用<code>docker network ls</code>命令列举这些3个网络：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># docker network ls</span></span>
<span class="line"><span></span></span>
<span class="line"><span>NETWORK ID          NAME                DRIVER              SCOPE</span></span>
<span class="line"><span></span></span>
<span class="line"><span>da8562d4b4d7        bridge              bridge              local</span></span>
<span class="line"><span></span></span>
<span class="line"><span>03eca5036e34        host                host                local</span></span>
<span class="line"><span></span></span>
<span class="line"><span>47209d68990e        none                null                local</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-bridge方式-默认" tabindex="-1"><a class="header-anchor" href="#_1-bridge方式-默认"><span>1.bridge方式(默认)</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>创建容器：（由于是默认设置，这里没指定网络--net=&quot;bridge&quot;。另外可以看到容器内创建了eth0)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_2-none方式" tabindex="-1"><a class="header-anchor" href="#_2-none方式"><span>2.none方式</span></a></h2><p>指定方法： --net=&quot;none&quot; 可以看到，这样创建出来的容器完全没有网络：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker run -i -t --net=&quot;none&quot; mysql:latest /bin/bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>那这种方式，有什么用途呢？ 实际上nova-docker用的就是这种方式，这种方式将网络创建的责任完全交给用户。 可以实现更加灵活复杂的网络。 另外这种容器可以可以通过link容器实现通信。</p><h2 id="_3-host方式" tabindex="-1"><a class="header-anchor" href="#_3-host方式"><span>3.host方式</span></a></h2><p>指定方法：--net=&quot;host&quot; 这种创建出来的容器，可以看到host上所有的网络设备。 容器中，对这些设备（比如DUBS）有全部的访问权限。因此docker提示我们，这种方式是不安全的。 如果在隔离良好的环境中（比如租户的虚拟机中）使用这种方式，问题不大。</p><h2 id="_4-container复用方式" tabindex="-1"><a class="header-anchor" href="#_4-container复用方式"><span>4.container复用方式</span></a></h2><p>指定方法： --net=&quot;container:name or id&quot; 如下例子可以看出来，两者的网络完全相同。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>docker run -i -t mysql:latest /bin/bash</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker run -i -t --net=&quot;container:02aac28b9234&quot; mysql:latest /bin/bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="举例-openstack-nova-docker中的网络实现方式" tabindex="-1"><a class="header-anchor" href="#举例-openstack-nova-docker中的网络实现方式"><span>举例（openstack nova-docker中的网络实现方式）</span></a></h3><p>openstack的nova-docker插件可以向管理虚拟机一样管理容器。 容器网络的创建方式：首先创建--net=&quot;none&quot;的容器，然后使用如下过程配置容器网络。（以OVS为例，也可以使用linux bridge）</p><p>参考： http://blog.csdn.net/halcyonbaby/article/details/42112141 https://yq.aliyun.com/articles/30345?spm=a2c4e.11154837.613419.9.14394258Qv2sNy</p>`,17)]))}const o=s(l,[["render",r]]),p=JSON.parse('{"path":"/article/bugynpgx/","title":"Docker系列教程7-Docker的四种网络方式","lang":"en-US","frontmatter":{"title":"Docker系列教程7-Docker的四种网络方式","createTime":"2025/05/27 17:51:17","permalink":"/article/bugynpgx/"},"git":{"createdTime":1749111496000,"updatedTime":1750129445000,"contributors":[{"name":"star","username":"star","email":"star@xgss.net","commits":2,"url":"https://github.com/star"}]},"readingTime":{"minutes":1.55,"words":465},"filePathRelative":"docker/Docker系列教程7-Docker的四种网络方式.md"}');export{o as comp,p as data};
