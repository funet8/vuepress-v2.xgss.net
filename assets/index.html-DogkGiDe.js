import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as i,o as n}from"./app-BiQR_lPj.js";const l={};function r(d,s){return n(),e("div",null,s[0]||(s[0]=[i(`<h1 id="使用dockerfile创建镜像" tabindex="-1"><a class="header-anchor" href="#使用dockerfile创建镜像"><span>使用dockerfile创建镜像</span></a></h1><p>文本格式的配置文件，用户可以使用它快速创建自定义的镜像。 dockerfile分为四部分：基础镜像信息、维护者信息、镜像操作指令、容器启动时执行命令。</p><h2 id="_1-from-指定基础镜像、必须" tabindex="-1"><a class="header-anchor" href="#_1-from-指定基础镜像、必须"><span>1.FROM（指定基础镜像、必须）</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>FROM &lt;image&gt;  </span></span>
<span class="line"><span>FROM &lt;image&gt;:&lt;tag&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-maintainer-用来指定镜像创建者信息" tabindex="-1"><a class="header-anchor" href="#_2-maintainer-用来指定镜像创建者信息"><span>2.MAINTAINER（用来指定镜像创建者信息）</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>MAINTAINER star xxx@163.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_3-run-安装软件用" tabindex="-1"><a class="header-anchor" href="#_3-run-安装软件用"><span>3.RUN（安装软件用）</span></a></h2><p>每条RUN指令将在当前镜像的基础上执行指令命令，并且提交为新的镜像</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>RUN &lt;command&gt; ; RUN [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</span></span>
<span class="line"><span>RUN apt-get update</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-cmd-镜像启动时执行" tabindex="-1"><a class="header-anchor" href="#_4-cmd-镜像启动时执行"><span>4.CMD（镜像启动时执行）</span></a></h2><p>每个CMD只能有一条命令，指定多了只有最后一条会被执行</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>CMD /user/sbin/nginx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_5-label-镜像的元数据标签信息" tabindex="-1"><a class="header-anchor" href="#_5-label-镜像的元数据标签信息"><span>5.LABEL(镜像的元数据标签信息)</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt;...</span></span>
<span class="line"><span>例如：</span></span>
<span class="line"><span>LABEL VERSION=&quot;1.0&quot;</span></span>
<span class="line"><span>LABEL description=&quot;this test illustrates&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-exporse-镜像内监听端口" tabindex="-1"><a class="header-anchor" href="#_6-exporse-镜像内监听端口"><span>6.EXPORSE(镜像内监听端口)</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>例如：</span></span>
<span class="line"><span>EXPORSE 80 22 443</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-env-指定环境变量" tabindex="-1"><a class="header-anchor" href="#_7-env-指定环境变量"><span>7.ENV(指定环境变量)</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>格式：</span></span>
<span class="line"><span>ENV &lt;KEY&gt;&lt;VALUE&gt;</span></span>
<span class="line"><span>ENV PG_MAJOR 9.3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-add-添加" tabindex="-1"><a class="header-anchor" href="#_8-add-添加"><span>8.ADD(添加)</span></a></h2><p>可以是dockerfile所在目录的相对路径也可以是一个URL，也可以是个tar包（会自动解压到dest路径下）</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>格式： </span></span>
<span class="line"><span>ADD &lt;src&gt; &lt;dest&gt;</span></span>
<span class="line"><span>ADD supervisord.conf /etc/supervisord.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-copy-复制" tabindex="-1"><a class="header-anchor" href="#_9-copy-复制"><span>9.COPY(复制)</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>格式： COPY &lt;src&gt; &lt;dest&gt;</span></span>
<span class="line"><span>复制本地主机的&lt;src&gt;到镜像中&lt;dest&gt;目录，目标路径不存在会自动创建，当本地目录为源目录时，推荐使用COPY</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-entrypoint-镜像启动时执行" tabindex="-1"><a class="header-anchor" href="#_10-entrypoint-镜像启动时执行"><span>10.ENTRYPOINT（镜像启动时执行）</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>两种格式：</span></span>
<span class="line"><span>ENTRYPOINT [&quot;excutable&quot;,&quot;param1&quot;,&quot;param2&quot;]   #exec调用执行</span></span>
<span class="line"><span>ENTRYPOINT command param1 param2			 #shell中执行</span></span>
<span class="line"><span>例如：</span></span>
<span class="line"><span>ENTRYPOINT [&quot;/usr/bin/supervisord&quot;, &quot;-n&quot;, &quot;-c&quot;, &quot;/etc/supervisord.conf&quot;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-volume-创建挂载点" tabindex="-1"><a class="header-anchor" href="#_11-volume-创建挂载点"><span>11.VOLUME(创建挂载点)</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>格式： </span></span>
<span class="line"><span>VOLUME [&quot;/data&quot;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-user-指定运行容器的用户名uid" tabindex="-1"><a class="header-anchor" href="#_12-user-指定运行容器的用户名uid"><span>12.USER(指定运行容器的用户名uid)</span></a></h2><p>当服务不需要管理员权限的时候，可以通过制定该命令运行用户。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>格式： </span></span>
<span class="line"><span>USER daemon</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-workdir-为后续run、cmd和entrypoint" tabindex="-1"><a class="header-anchor" href="#_13-workdir-为后续run、cmd和entrypoint"><span>13.WORKDIR(为后续RUN、CMD和ENTRYPOINT)</span></a></h2><p>指定配置工作目录</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>WORKDIR /path/to/workdir</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 在 /p1/p2 下执行 vim a.txt</span></span>
<span class="line"><span>WORKDIR /p1 </span></span>
<span class="line"><span>WORKDIR p2 </span></span>
<span class="line"><span>RUN vim a.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_14-arg-指定镜像内的参数" tabindex="-1"><a class="header-anchor" href="#_14-arg-指定镜像内的参数"><span>14.ARG 指定镜像内的参数</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>这些参数在执行docker build命令时才以 --build-arg&lt;varname&gt;=&lt;value&gt;格式传入。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>格式：</span></span>
<span class="line"><span>ARG&lt;name&gt;[=&lt;default value&gt;]</span></span>
<span class="line"><span>则可以用--build-arg&lt;varname&gt;=&lt;value&gt;来指定参数值</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_15-onbuild-在子镜像中执行" tabindex="-1"><a class="header-anchor" href="#_15-onbuild-在子镜像中执行"><span>15.ONBUILD（在子镜像中执行）</span></a></h2><p>ONBUILD 指定的命令在构建镜像时并不执行，而是在它的子镜像中执行。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>ONBUILD &lt;Dockerfile关键字&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_16-stopsignal-指定容器启动接受退出的信号" tabindex="-1"><a class="header-anchor" href="#_16-stopsignal-指定容器启动接受退出的信号"><span>16.STOPSIGNAL（指定容器启动接受退出的信号）</span></a></h2><p>所使用的信号必须是内核系统调用表中的合法的值，如：9、SIGKILL。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>STOPSIGNAL signal</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_17-healthcheck" tabindex="-1"><a class="header-anchor" href="#_17-healthcheck"><span>17.HEALTHCHECK</span></a></h2><p>（健康检查 1.12以后支持）</p><h2 id="_18-shell" tabindex="-1"><a class="header-anchor" href="#_18-shell"><span>18.SHELL</span></a></h2><p>（指定其他命令使用shell时的默认类型）</p><h1 id="dockerfile文件中的cmd和entrypoint指令差异对比" tabindex="-1"><a class="header-anchor" href="#dockerfile文件中的cmd和entrypoint指令差异对比"><span>Dockerfile文件中的CMD和ENTRYPOINT指令差异对比</span></a></h1><p>https://www.cnblogs.com/lienhua34/p/5170335.html</p><p>CMD指令和ENTRYPOINT指令的作用都是为镜像指定容器启动后的命令，那么它们两者之间有什么各自的优点呢？ 为了更好地对比CMD指令和ENTRYPOINT指令的差异，我们这里再列一下这两个指令的说明</p><h2 id="cmd" tabindex="-1"><a class="header-anchor" href="#cmd"><span><strong>CMD</strong></span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>支持三种格式</span></span>
<span class="line"><span>    CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] 使用 exec 执行，推荐方式；</span></span>
<span class="line"><span>    CMD command param1 param2 在 /bin/sh 中执行，提供给需要交互的应用；</span></span>
<span class="line"><span>    CMD [&quot;param1&quot;,&quot;param2&quot;] 提供给 ENTRYPOINT 的默认参数；</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行。 如果用户启动容器时候指定了运行的命令，则会覆盖掉 CMD 指定的命令。</p><h2 id="entrypoint" tabindex="-1"><a class="header-anchor" href="#entrypoint"><span><strong>ENTRYPOINT</strong></span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>两种格式：</span></span>
<span class="line"><span>    ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span></span>
<span class="line"><span>    ENTRYPOINT command param1 param2（shell中执行）。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的说明，我们可以看到有两个共同点：</p><ol><li><strong>都可以指定shell或exec函数调用的方式执行命令；</strong></li><li><strong>当存在多个CMD指令或ENTRYPOINT指令时，只有最后一个生效；</strong></li></ol><p>而它们有如下差异： 1.<strong>差异1：CMD指令指定的容器启动时命令可以被docker run指定的命令覆盖，而ENTRYPOINT指令指定的命令不能被覆盖，而是将docker run指定的参数当做ENTRYPOINT指定命令的参数。</strong> 2.<strong>差异2：CMD指令可以为ENTRYPOINT指令设置默认参数，而且可以被docker run指定的参数覆盖；</strong></p><p>下面分别对上面两个差异点进行详细说明，</p><h2 id="差异1" tabindex="-1"><a class="header-anchor" href="#差异1"><span>差异1</span></a></h2><p>CMD指令指定的容器启动时命令可以被docker run指定的命令覆盖；而ENTRYPOINT指令指定的命令不能被覆盖，而是将docker run指定的参数当做ENTRYPOINT指定命令的参数。</p>`,59)]))}const p=a(l,[["render",r]]),c=JSON.parse('{"path":"/article/p123jmer/","title":"Docker系列教程5-使用dockerfile基本语法","lang":"en-US","frontmatter":{"title":"Docker系列教程5-使用dockerfile基本语法","createTime":"2025/05/27 17:51:17","permalink":"/article/p123jmer/"},"git":{"createdTime":1749111496000,"updatedTime":1750129445000,"contributors":[{"name":"star","username":"star","email":"star@xgss.net","commits":2,"url":"https://github.com/star"}]},"readingTime":{"minutes":3.67,"words":1102},"filePathRelative":"docker/Docker系列教程5-使用dockerfile基本语法.md"}');export{p as comp,c as data};
